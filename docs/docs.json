{
  "cloud": {
    "assets": {
      "assetInfo": {
        "description": "Gets information for a specific asset.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}",
          "example": "const { data: assetInfo } = await AssetsApi.assetInfo({ assetId: 16989283104 });",
          "exampleData": "{\n  path: \"assets/16989283104\",\n  revisionId: \"1\",\n  revisionCreateTime: \"2024-04-02T22:57:45.953Z\",\n  assetId: \"16989283104\",\n  displayName: \"suzanne\",\n  assetType: \"Model\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n  previews: [],\n}\n",
          "exampleRawBody": "{\n  path: \"assets/16989283104\",\n  revisionId: \"1\",\n  revisionCreateTime: \"2024-04-02T22:57:45.953Z\",\n  assetId: \"16989283104\",\n  displayName: \"suzanne\",\n  assetType: \"Model\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n  previews: [],\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to get information for."
          },
          {
            "name": "fields?",
            "type": "Field[]",
            "description": "The specific fields to get (if omitted then all fields will be gotten)."
          }
        ]
      },
      "createAsset": {
        "description": "Creates a new asset.",
        "tags": {
          "endpoint": "POST /v1/assets",
          "example": "const { data: createdAssetInfo } = await AssetsApi.createAsset({\n  assetType: \"Model\",\n  displayName: \"Model\",\n  userId: 45348281,\n  file: \"suzanne.fbx\",\n});",
          "exampleData": "{\n  path: \"operations/b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  operationId: \"b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  done: true,\n  response: {\n    path: \"assets/18490359719\",\n    revisionId: \"1\",\n    revisionCreateTime: \"2024-07-14T18:02:50.597Z\",\n    assetId: \"18490359719\",\n    displayName: \"Model\",\n    assetType: \"Model\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n    state: \"Active\",\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"operations/b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  operationId: \"b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  done: true,\n  response: {\n    path: \"assets/18490359719\",\n    revisionId: \"1\",\n    revisionCreateTime: \"2024-07-14T18:02:50.597689600Z\",\n    assetId: \"18490359719\",\n    displayName: \"Model\",\n    assetType: \"Model\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n    state: \"Active\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "displayName",
            "type": "🤷",
            "description": "The display name for the asset."
          },
          {
            "name": "description",
            "type": "🤷",
            "description": "The description for the asset."
          },
          {
            "name": "userId",
            "type": "🤷",
            "description": "Define a userId to create the asset under the user."
          },
          {
            "name": "groupId",
            "type": "🤷",
            "description": "Define a groupId to create the asset under the group."
          },
          {
            "name": "assetType",
            "type": "🤷",
            "description": "The type for the asset."
          },
          {
            "name": "file",
            "type": "🤷",
            "description": "The file containing the asset data."
          },
          {
            "name": "fileName",
            "type": "🤷",
            "description": "This is required if your `file` argument is a `Buffer`."
          },
          {
            "name": "expectedPrice",
            "type": "🤷",
            "description": "Expected asset upload fee in Robux. When the actual price is more than expected, the operation fails."
          },
          {
            "name": "previews",
            "type": "🤷",
            "description": "The thumbnail previews for the asset."
          }
        ]
      },
      "updateAsset": {
        "description": "Updates an asset.",
        "tags": {
          "endpoint": "PATCH /v1/assets/{assetId}",
          "example": "const { data: updatedAssetInfo } = await AssetsApi.updateAsset({\n  assetId: 18494719558,\n  file: \"suzanne.fbx\",\n  assetType: \"Model\",\n});",
          "exampleData": "{\n  path: \"operations/b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  operationId: \"b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  done: true,\n  response: {\n    path: \"assets/18490359719\",\n    revisionId: \"2\",\n    revisionCreateTime: \"2024-07-14T18:02:50.597Z\",\n    assetId: \"18490359719\",\n    displayName: \"Model\",\n    assetType: \"Model\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n    state: \"Active\",\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"operations/b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  operationId: \"b9682431-3c86-4473-8779-2ae9df9f0c0e\",\n  done: true,\n  response: {\n    path: \"assets/18490359719\",\n    revisionId: \"2\",\n    revisionCreateTime: \"2024-07-14T18:02:50.597689600Z\",\n    assetId: \"18490359719\",\n    displayName: \"Model\",\n    assetType: \"Model\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n    state: \"Active\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "🤷",
            "description": "The ID of the asset to update."
          },
          {
            "name": "assetType",
            "type": "🤷",
            "description": "The type for the asset. Required if updating the assets file content."
          },
          {
            "name": "displayName",
            "type": "🤷",
            "description": "The display name for the asset."
          },
          {
            "name": "description",
            "type": "🤷",
            "description": "The description for the asset."
          },
          {
            "name": "file",
            "type": "🤷",
            "description": "The file containing the new asset data."
          },
          {
            "name": "fileName",
            "type": "🤷",
            "description": "This is required if your `file` argument is a `Buffer`."
          },
          {
            "name": "expectedPrice",
            "type": "🤷",
            "description": "Expected asset upload fee in Robux. When the actual price is more than expected, the operation fails."
          },
          {
            "name": "previews",
            "type": "🤷",
            "description": "The thumbnail previews for the asset."
          }
        ]
      },
      "assetOfVersion": {
        "description": "Gets an asset of a specific version.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/versions/{version}",
          "example": "const { data: assetInfo } = await AssetsApi.assetOfVersion({ assetId: 18508967120, version: 1 });",
          "exampleData": "{\n  path: \"assets/18508967120/versions/1\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n}\n",
          "exampleRawBody": "{\n  path: \"assets/18508967120/versions/1\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to get."
          },
          {
            "name": "version",
            "type": "Version",
            "description": "The version of the asset to get."
          }
        ]
      },
      "assetVersions": {
        "description": "Lists versions of a specific asset.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/versions",
          "example": "const { data: versions } = await AssetsApi.assetVersions({ assetId: 18508967120 });",
          "exampleData": "[\n  {\n    path: \"assets/18494719558/versions/2\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n  },\n  {\n    path: \"assets/18494719558/versions/1\",\n    creationContext: { creator: { userId: \"45348281\" } },\n    moderationResult: { moderationState: \"Approved\" },\n  },\n]\n",
          "exampleRawBody": "{\n  assetVersions: [\n    {\n      path: \"assets/18494719558/versions/2\",\n      creationContext: { creator: { userId: \"45348281\" } },\n      moderationResult: { moderationState: \"Approved\" },\n    },\n    {\n      path: \"assets/18494719558/versions/1\",\n      creationContext: { creator: { userId: \"45348281\" } },\n      moderationResult: { moderationState: \"Approved\" },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to get asset versions for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of games to return. Valid values range from 1 to 50 (inclusive). Defaults to 8 when not provided."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "the paging cursor for the previous or next page."
          }
        ]
      },
      "rollbackAssetVersion": {
        "description": "Rolls back a specific version of an asset",
        "tags": {
          "endpoint": "POST /v1/assets/{assetId}/versions/{version}:rollback",
          "example": "const { data: rolledBackAssetInfo } = await AssetsApi.rollbackAssetVersion({ assetId: 18494719558, version: 2 });",
          "exampleData": "{\n  path: \"assets/18494719558/versions/2\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n}\n",
          "exampleRawBody": "{\n  path: \"assets/18494719558/versions/2\",\n  creationContext: { creator: { userId: \"45348281\" } },\n  moderationResult: { moderationState: \"Approved\" },\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to rollback."
          },
          {
            "name": "version",
            "type": "Version",
            "description": "The version of the asset to rollback."
          }
        ]
      }
    },
    "creatorStore": {
      "creatorStoreProductInfo": {
        "description": "",
        "tags": {
          "endpoint": "GET /v2/creator-store-products/{productId}",
          "tags": "[ \"CloudKey Needed\" ]",
          "example": "const { data: productInfo } = await CreatorStoreApi.creatorStoreProductInfo({ modelAssetId: 16989381169 });",
          "exampleData": "{\n  path: \"creator-store-products/CreatorMarketplaceAsset-Model-16989381169\",\n  displayName: \"monkey\",\n  description: \"\",\n  basePrice: {\n    currencyCode: \"USD\",\n    quantity: { significand: 0, exponent: 0 },\n  },\n  purchasePrice: {\n    currencyCode: \"USD\",\n    quantity: { significand: 0, exponent: 0 },\n  },\n  published: false,\n  restrictions: [],\n  purchasable: false,\n  userSeller: \"45348281\",\n  modelAssetId: \"16989381169\",\n}\n",
          "exampleRawBody": "{\n  path: \"creator-store-products/CreatorMarketplaceAsset-Model-16989381169\",\n  displayName: \"monkey\",\n  description: \"\",\n  basePrice: {\n    currencyCode: \"USD\",\n    quantity: { significand: 0, exponent: 0 },\n  },\n  purchasePrice: {\n    currencyCode: \"USD\",\n    quantity: { significand: 0, exponent: 0 },\n  },\n  published: false,\n  restrictions: [],\n  purchasable: false,\n  userSeller: \"45348281\",\n  modelAssetId: \"16989381169\",\n}\n"
        },
        "params": [
          {
            "name": "modelAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a model."
          },
          {
            "name": "pluginAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a plugin."
          },
          {
            "name": "audioAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is an audio."
          },
          {
            "name": "decalAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a decal."
          },
          {
            "name": "meshPartAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a mesh part."
          },
          {
            "name": "videoAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a video."
          },
          {
            "name": "fontFamilyAssetId",
            "type": "🤷",
            "description": "Use this if the creator product you are getting is a font family."
          }
        ]
      },
      "createCreatorStoreProduct": {
        "description": "Creates a creator store product (doesnt work atm for some reason).",
        "tags": {
          "endpoint": "POST /v2/creator-store-products",
          "tags": "[ \"CloudKey Needed\" ]",
          "example": "",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "displayName",
            "type": "🤷",
            "description": "The display name for the product."
          },
          {
            "name": "description",
            "type": "🤷",
            "description": "The description for the product."
          },
          {
            "name": "basePrice",
            "type": "🤷",
            "description": "basePrice"
          }
        ]
      },
      "updateCreatorStoreProduct": {
        "tags": {},
        "params": []
      }
    },
    "engine": {
      "instanceInfo": {
        "description": "Gets an Instance.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/places/{placeId}/instances/{instanceId}",
          "example": "const { data: instance } = await EngineApi.instanceInfo({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  instanceId: \"root\",\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538/instances/root/operations/2ae28479-2d4f-4725-99e6-123cb44b5193\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.Instance\",\n    path: \"universes/5795192361/places/16866553538/instances/78c032f0-6e1a-1015-0691-6a1600000001\",\n    hasChildren: true,\n    engineInstance: {\n      id: \"78c032f0-6e1a-1015-0691-6a1600000001\",\n      parent: \"\",\n      name: \"Game\",\n      details: {},\n    },\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538/instances/root/operations/2ae28479-2d4f-4725-99e6-123cb44b5193\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.Instance\",\n    path: \"universes/5795192361/places/16866553538/instances/78c032f0-6e1a-1015-0691-6a1600000001\",\n    hasChildren: true,\n    engineInstance: {\n      Id: \"78c032f0-6e1a-1015-0691-6a1600000001\",\n      Parent: \"\",\n      Name: \"Game\",\n      Details: {},\n    },\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get the Instance from."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to get the Instance from."
          },
          {
            "name": "instanceId",
            "type": "InstanceId",
            "description": "The ID of the Instance to get."
          }
        ]
      },
      "instanceChildren": {
        "description": "Gets children for an Instance.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/places/{placeId}/instances/{instanceId}:listChildren",
          "example": "const { data: children } = await EngineApi.instanceChildren({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  instanceId: \"root\",\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538/instances/root/operations/1a9a74a7-c687-492d-8035-759b29295867\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.ListInstanceChildrenResponse\",\n    instances: [\n      {\n        path: \"universes/5795192361/places/16866553538/instances/44b188da-ce63-2b47-02e9-c68d004815fc\",\n        hasChildren: true,\n        engineInstance: {\n          id: \"44b188da-ce63-2b47-02e9-c68d004815fc\",\n          parent: \"649b6a4b-51bf-b866-0691-76d800000001\",\n          name: \"Workspace\",\n          details: {},\n        },\n      },\n    ],\n    nextPageToken: \"\",\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538/instances/root/operations/1a9a74a7-c687-492d-8035-759b29295867\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.ListInstanceChildrenResponse\",\n    instances: [\n      {\n        path: \"universes/5795192361/places/16866553538/instances/44b188da-ce63-2b47-02e9-c68d004815fc\",\n        hasChildren: true,\n        engineInstance: {\n          Id: \"44b188da-ce63-2b47-02e9-c68d004815fc\",\n          Parent: \"649b6a4b-51bf-b866-0691-76d800000001\",\n          Name: \"Workspace\",\n          Details: {},\n        },\n      },\n    ],\n    nextPageToken: \"\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get the Instance children from."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to get the Instance children from."
          },
          {
            "name": "instanceId",
            "type": "InstanceId",
            "description": "The ID of the Instance to get children for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of child instance to return. The service may return fewer than this value. If unspecified, at most 200 children will be returned. The maximum value is 200; values above 200 will be coerced to 200."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "updateInstance": {
        "description": "Updates an Instance.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universe}/places/{place}/instances/{instance}",
          "example": "const { data: updatedInstance } = await EngineApi.updateInstance({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  instanceId: \"4b70b051-16c0-dede-0691-7e9e00004e03\",\n  newData: {\n    script: {\n      source: \"-- editing a script via typescript :)\",\n    },\n  },\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538/instances/4b70b051-16c0-dede-0691-7e9e00004e03/operations/7a865423-3566-4377-8b9e-ffd831341399\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.Instance\",\n    path: \"universes/5795192361/places/16866553538/instances/4b70b051-16c0-dede-0691-7e9e00004e03\",\n    hasChildren: false,\n    engineInstance: {\n      id: \"4b70b051-16c0-dede-0691-7e9e00004e03\",\n      parent: \"44b188da-ce63-2b47-02e9-c68d004815fc\",\n      name: \"Script\",\n      details: {\n        script: {\n          enabled: true,\n          runContext: \"Legacy\",\n          source: \"-- editing a script via typescript :)\",\n        },\n      },\n    },\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538/instances/4b70b051-16c0-dede-0691-7e9e00004e03/operations/7a865423-3566-4377-8b9e-ffd831341399\",\n  done: true,\n  response: {\n    \"@type\": \"type.googleapis.com/roblox.open_cloud.cloud.v2.Instance\",\n    path: \"universes/5795192361/places/16866553538/instances/4b70b051-16c0-dede-0691-7e9e00004e03\",\n    hasChildren: false,\n    engineInstance: {\n      Id: \"4b70b051-16c0-dede-0691-7e9e00004e03\",\n      Parent: \"44b188da-ce63-2b47-02e9-c68d004815fc\",\n      Name: \"Script\",\n      Details: {\n        Script: {\n          Enabled: true,\n          RunContext: \"Legacy\",\n          Source: \"-- editing a script via typescript :)\",\n        },\n      },\n    },\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get the Instance from."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to get the Instance from."
          },
          {
            "name": "instanceId",
            "type": "InstanceId",
            "description": "The ID of the Instance to get."
          },
          {
            "name": "newData",
            "type": "UpdateInstance_NewData",
            "description": "The new data to apply to the Instance."
          }
        ]
      }
    },
    "experiences": {
      "universeInfo": {
        "description": "Gets information about a universe.",
        "tags": {
          "endpoint": "GET /cloud/v2/universes/{universeId}",
          "example": "const { data: universeInfo } = await ExperiencesApi.universeInfo({ universeId: 5795192361 });",
          "exampleData": "{\n  path: \"universes/5795192361\",\n  createTime: \"2024-03-25T10:42:46.360Z\",\n  updateTime: \"2024-03-25T10:42:46.360Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  user: \"users/45348281\",\n  visibility: \"PRIVATE\",\n  voiceChatEnabled: false,\n  ageRating: \"AGE_RATING_UNSPECIFIED\",\n  desktopEnabled: true,\n  mobileEnabled: true,\n  tabletEnabled: true,\n  consoleEnabled: false,\n  vrEnabled: true,\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361\",\n  createTime: \"2024-03-25T10:42:46.360Z\",\n  updateTime: \"2024-03-25T10:42:46.360Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  user: \"users/45348281\",\n  visibility: \"PRIVATE\",\n  voiceChatEnabled: false,\n  ageRating: \"AGE_RATING_UNSPECIFIED\",\n  desktopEnabled: true,\n  mobileEnabled: true,\n  tabletEnabled: true,\n  consoleEnabled: false,\n  vrEnabled: true,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to get information about."
          }
        ]
      },
      "updateUniverse": {
        "description": "Updates a universes information.",
        "tags": {
          "endpoint": "PATCH /cloud/v2/universes/{universeId}",
          "example": "const { data: updatedData } = await ExperiencesApi.updateUniverse({\n  universeId: 5795192361,\n  displayName: \"Lorem Ipsum\",\n  visibility: \"PRIVATE\",\n});",
          "exampleData": "{\n  path: \"universes/5795192361\",\n  createTime: \"2024-03-25T10:42:46.360Z\",\n  updateTime: \"2024-03-25T10:42:46.360Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  user: \"users/45348281\",\n  visibility: \"PRIVATE\",\n  voiceChatEnabled: false,\n  ageRating: \"AGE_RATING_UNSPECIFIED\",\n  desktopEnabled: true,\n  mobileEnabled: true,\n  tabletEnabled: true,\n  consoleEnabled: false,\n  vrEnabled: true,\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361\",\n  createTime: \"2024-03-25T10:42:46.360Z\",\n  updateTime: \"2024-03-25T10:42:46.360Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  user: \"users/45348281\",\n  visibility: \"PRIVATE\",\n  voiceChatEnabled: false,\n  ageRating: \"AGE_RATING_UNSPECIFIED\",\n  desktopEnabled: true,\n  mobileEnabled: true,\n  tabletEnabled: true,\n  consoleEnabled: false,\n  vrEnabled: true,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "🤷",
            "description": "The id of the universe to update."
          },
          {
            "name": "displayName",
            "type": "🤷",
            "description": "The new display name for the universe."
          },
          {
            "name": "description",
            "type": "🤷",
            "description": "The new description for the universe."
          },
          {
            "name": "visibility",
            "type": "🤷",
            "description": "The new visibility for the universe."
          },
          {
            "name": "facebookSocialLink",
            "type": "🤷",
            "description": "The new facebook social link for the universe."
          },
          {
            "name": "twitterSocialLink",
            "type": "🤷",
            "description": "The new twitter social link for the universe."
          },
          {
            "name": "youtubeSocialLink",
            "type": "🤷",
            "description": "The new youtube social link for the universe."
          },
          {
            "name": "twitchSocialLink",
            "type": "🤷",
            "description": "The new twitch social link for the universe."
          },
          {
            "name": "discordSocialLink",
            "type": "🤷",
            "description": "The new discord social link for the universe."
          },
          {
            "name": "robloxGroupSocialLink",
            "type": "🤷",
            "description": "The new roblox group social link for the universe."
          },
          {
            "name": "guildedSocialLink",
            "type": "🤷",
            "description": "The new guilded social link for the universe."
          },
          {
            "name": "voiceChatEnabled",
            "type": "🤷",
            "description": "if voice chat will be enabled for the universe."
          },
          {
            "name": "ageRating",
            "type": "🤷",
            "description": "The new age rating for the universe."
          },
          {
            "name": "privateServerPriceRobux",
            "type": "🤷",
            "description": "The new private server price (in robux) for the universe."
          },
          {
            "name": "desktopEnabled",
            "type": "🤷",
            "description": "if desktop players will be allowed to access the universe."
          },
          {
            "name": "mobileEnabled",
            "type": "🤷",
            "description": "if mobile players will be allowed to access the universe."
          },
          {
            "name": "tabletEnabled",
            "type": "🤷",
            "description": "if tablet players will be allowed to access the universe."
          },
          {
            "name": "consoleEnabled",
            "type": "🤷",
            "description": "if console players will be allowed to access the universe."
          },
          {
            "name": "vrEnabled",
            "type": "🤷",
            "description": "if vr players will be allowed to access the universe."
          }
        ]
      },
      "restartUniverseServers": {
        "description": "Restarts all currently running servers for a given universe. Used for releasing experience updates.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /cloud/v2/universes/{universeId}",
          "example": "await ExperiencesApi.restartUniverseServers({ universeId: 5795192361 });",
          "exampleData": "{}\n",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to restart servers for."
          }
        ]
      },
      "placeInfo": {
        "description": "Gets information about a universes place.",
        "tags": {
          "endpoint": "GET /cloud/v2/universes/{universeId}/{placeId}",
          "example": "const { data: placeInfo } = await ExperiencesApi.placeInfo({ universeId: 5795192361, placeId: 16866553538 });",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538\",\n  createTime: \"2024-03-25T10:42:46.297Z\",\n  updateTime: \"2024-03-26T16:50:19.023Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  serverSize: 50,\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538\",\n  createTime: \"2024-03-25T10:42:46.297Z\",\n  updateTime: \"2024-03-26T16:50:19.023Z\",\n  displayName: \"MightyPart's Place Number: 201\",\n  description: \"\",\n  serverSize: 50,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to get place information about."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The id of the place to get information about."
          }
        ]
      },
      "updatePlace": {
        "description": "Updates a places information.",
        "tags": {
          "endpoint": "PATCH /cloud/v2/universes/{universeId}/places/{PlaceId}",
          "example": "const { data: updatedInfo } = await ExperiencesApi.updatePlace({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  displayName: \"Hello World\",\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538\",\n  createTime: \"2024-03-25T10:42:46.297Z\",\n  updateTime: \"2024-05-13T10:21:20.247Z\",\n  displayName: \"Hello World\",\n  description: \"\",\n  serverSize: 50,\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538\",\n  createTime: \"2024-03-25T10:42:46.297Z\",\n  updateTime: \"2024-05-13T10:21:20.247157600Z\",\n  displayName: \"Hello World\",\n  description: \"\",\n  serverSize: 50,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to update place information for."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The id of the place to update."
          },
          {
            "name": "displayName?",
            "type": "DisplayName",
            "description": "The new display name for the place."
          },
          {
            "name": "description?",
            "type": "Description",
            "description": "The new description for the place."
          },
          {
            "name": "serverSize?",
            "type": "ServerSize",
            "description": "The new server size for the place."
          }
        ]
      },
      "publishPlace": {
        "description": "Publishes a place file (.rbxl or .rbxlx) to a specific place.",
        "tags": {
          "endpoint": "POST /universes/v1/{universeId}/places/{placeId}/versions",
          "example": "const { data: newVersion } = await ExperiencesApi.publishPlace({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  versionType: \"Published\",\n  placeFile: \"./place.rbxlx\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ versionNumber: 26 }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe the publish the place file to."
          },
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to publish the place file to."
          },
          {
            "name": "versionType",
            "type": "\"Saved\" | \"Published\"",
            "description": "The version type to publish with."
          },
          {
            "name": "placeFile",
            "type": "Buffer | string",
            "description": "Either a string or a buffer of the place file. (Using a string is recommended)."
          }
        ]
      }
    },
    "groups": {
      "groupInfo": {
        "description": "Gets information about a user from their id.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}",
          "example": "const { data: groupInfo } = await GroupsApi.groupInfo({ groupId: 5850082 });",
          "exampleData": "{\n  path: \"groups/5850082\",\n  createTime: \"2020-03-29T18:15:20.100Z\",\n  updateTime: \"2024-05-12T13:17:41.639Z\",\n  id: \"5850082\",\n  displayName: \"MightyPart Games\",\n  description: \"Hello World!\",\n  owner: \"users/45348281\",\n  memberCount: 99,\n  publicEntryAllowed: true,\n  locked: false,\n  verified: false,\n}\n",
          "exampleRawBody": "{\n  path: \"groups/5850082\",\n  createTime: \"2020-03-29T18:15:20.100Z\",\n  updateTime: \"2024-05-12T13:17:41.639132600Z\",\n  id: \"5850082\",\n  displayName: \"MightyPart Games\",\n  description: \"Hello World!\",\n  owner: \"users/45348281\",\n  memberCount: 99,\n  publicEntryAllowed: true,\n  locked: false,\n  verified: false,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get info about."
          }
        ]
      },
      "groupMembers": {
        "description": "Gets members for a group.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}/memberships",
          "example": "const { data: members } = await GroupsApi.groupMembers({ groupId: 5850082, filter: { userId: 45348281 } });",
          "exampleData": "[\n  {\n    path: \"groups/5850082/memberships/NDUzNDgyODE\",\n    createTime: \"2020-03-29T18:15:20.020Z\",\n    updateTime: \"2023-09-15T07:03:50.583Z\",\n    user: \"users/45348281\",\n    role: \"groups/5850082/roles/38353811\",\n  },\n]\n",
          "exampleRawBody": "{\n  groupMemberships: [\n    {\n      path: \"groups/5850082/memberships/NDUzNDgyODE\",\n      createTime: \"2020-03-29T18:15:20.020Z\",\n      updateTime: \"2023-09-15T07:03:50.583Z\",\n      user: \"users/45348281\",\n      role: \"groups/5850082/roles/38353811\",\n    },\n  ],\n  nextPageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get join requests for."
          },
          {
            "name": "limit?",
            "type": "UserId",
            "description": "The maximum number of group memberships to return. The service might return fewer than this value. If unspecified, at most 10 group memberships are returned. The maximum value is 100 and higher values are set to 100."
          },
          {
            "name": "filter?",
            "type": "Filter",
            "description": "This field may be set in order to filter the resources returned."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A page token, received from a previous call, to retrieve a subsequent page."
          }
        ]
      },
      "groupRoles": {
        "description": "Gets roles for a group.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}/roles",
          "example": "const { data: roles } = await GroupsApi.groupRoles({ groupId: 5850082, limit: 1 });",
          "exampleData": "[\n  {\n    path: \"groups/5850082/roles/38353811\",\n    createTime: \"2020-03-29T13:15:20.020Z\",\n    updateTime: \"2020-09-20T08:04:35.850Z\",\n    id: \"38353811\",\n    displayName: \"NamelessGuy2005 - Scriptor\",\n    description: \"\",\n    rank: 255,\n    memberCount: 1,\n    permissions: {\n      viewWallPosts: true,\n      createWallPosts: true,\n      deleteWallPosts: true,\n      viewGroupShout: true,\n      createGroupShout: true,\n      changeRank: true,\n      acceptRequests: true,\n      exileMembers: true,\n      manageRelationships: true,\n      viewAuditLog: true,\n      spendGroupFunds: true,\n      advertiseGroup: true,\n      createAvatarItems: true,\n      manageAvatarItems: true,\n      manageGroupUniverses: true,\n      viewUniverseAnalytics: true,\n      createApiKeys: true,\n      manageApiKeys: true,\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  groupRoles: [\n    {\n      path: \"groups/5850082/roles/38353811\",\n      createTime: \"2020-03-29T13:15:20.020Z\",\n      updateTime: \"2020-09-20T08:04:35.850Z\",\n      id: \"38353811\",\n      displayName: \"NamelessGuy2005 - Scriptor\",\n      description: \"\",\n      rank: 255,\n      memberCount: 1,\n      permissions: {\n        viewWallPosts: true,\n        createWallPosts: true,\n        deleteWallPosts: true,\n        viewGroupShout: true,\n        createGroupShout: true,\n        changeRank: true,\n        acceptRequests: true,\n        exileMembers: true,\n        manageRelationships: true,\n        viewAuditLog: true,\n        spendGroupFunds: true,\n        advertiseGroup: true,\n        createAvatarItems: true,\n        manageAvatarItems: true,\n        manageGroupUniverses: true,\n        viewUniverseAnalytics: true,\n        createApiKeys: true,\n        manageApiKeys: true,\n      },\n    },\n  ],\n  nextPageToken: \"38353811\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get roles for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of group roles to return. The service might return fewer than this value. If unspecified, at most 10 group roles are returned. The maximum value is 20 and higher values are set to 20."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A page token, received from a previous call, to retrieve a subsequent page."
          }
        ]
      },
      "groupShout": {
        "description": "Gets roles for a group.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}/roles",
          "example": "const { data: shout } = await GroupsApi.groupShout({ groupId: 5850082 });",
          "exampleData": "{\n  path: \"groups/5850082/shout\",\n  createTime: \"2020-03-31T18:36:51.607Z\",\n  updateTime: \"2023-09-17T20:35:48.213Z\",\n  content: \"Hello World!\",\n  poster: \"users/45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"groups/5850082/shout\",\n  createTime: \"2020-03-31T18:36:51.607Z\",\n  updateTime: \"2023-09-17T20:35:48.213Z\",\n  content: \"Hello World!\",\n  poster: \"users/45348281\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get roles for."
          },
          {
            "name": "limit",
            "type": "🤷",
            "description": "The maximum number of group roles to return. The service might return fewer than this value. If unspecified, at most 10 group roles are returned. The maximum value is 20 and higher values are set to 20."
          },
          {
            "name": "cursor",
            "type": "🤷",
            "description": "A page token, received from a previous call, to retrieve a subsequent page."
          }
        ]
      },
      "groupJoinRequests": {
        "description": "Gets join requests for a group.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}/join-requests",
          "example": "const { data: joinRequests } = await GroupsApi.groupJoinRequests({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    path: \"groups/5850082/join-requests/2655994471\",\n    createTime: \"2024-05-12T16:32:46.841Z\",\n    user: \"users/2655994471\",\n  },\n]\n",
          "exampleRawBody": "{\n  groupJoinRequests: [\n    {\n      path: \"groups/5850082/join-requests/2655994471\",\n      createTime: \"2024-05-12T16:32:46.841Z\",\n      user: \"users/2655994471\",\n    },\n  ],\n  nextPageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get join requests for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of group join requests to return. The service might return fewer than this value. If unspecified, at most 10 group join requests are returned. The maximum value is 20 and higher values are set to 20."
          },
          {
            "name": "filter?",
            "type": "{ userId: Identifier }",
            "description": "This field may be set in order to filter the resources returned."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A page token, received from a previous call, to retrieve a subsequent page."
          }
        ]
      },
      "acceptGroupJoinRequest": {
        "description": "Accepts a group join request.",
        "tags": {
          "endpoint": "POST /v2/groups/{groupId}/join-requests/{userId}:accept",
          "example": "const { data: success } = await GroupsApi.acceptGroupJoinRequest({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to accept a join request for."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to accept into the group."
          }
        ]
      },
      "declineGroupJoinRequest": {
        "description": "Declines a group join request.",
        "tags": {
          "endpoint": "POST /v2/groups/{groupId}/join-requests/{userId}:decline",
          "example": "const { data: success } = await GroupsApi.declineGroupJoinRequest({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to decline a join request for."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to decline from the group."
          }
        ]
      }
    },
    "inventory": {
      "inventoryItemsForUser": {
        "description": "",
        "tags": {
          "endpoint": "GET /v2/users/{userId}/inventory-items",
          "tags": "[ \"CloudKey Needed\" ]",
          "example": "const { data: inventoryItems } = await InventoryApi.inventoryItemsForUser({\n  userId: 45348281,\n  limit: 3,\n  filter: { privateServers: true },\n});",
          "exampleData": "{\n  inventoryItems: [\n    {\n      path: \"users/45348281/inventory-items/R0FNRV9QQVNTX0lEPTEyNTI3\",\n      gamePassDetails: { gamePassId: \"12527\" },\n    },\n  ],\n  nextPageToken: \"djEveyJGaWVsZEluZGV4IjoyLCJWYWx1ZUluZGV4IjowLCJDdXJzb3IiOiIxMjUyNyIsIkZpbHRlckhhc2giOiJrV3Y2VFQ0ZW1FOGgzT1RQL1hjOXFkdGIwR0JiWjNySkRMU3FTSmV5TUVJPSJ9\",\n}\n",
          "exampleRawBody": "{\n  inventoryItems: [\n    {\n      path: \"users/45348281/inventory-items/R0FNRV9QQVNTX0lEPTEyNTI3\",\n      gamePassDetails: { gamePassId: \"12527\" },\n    },\n  ],\n  nextPageToken: \"djEveyJGaWVsZEluZGV4IjoyLCJWYWx1ZUluZGV4IjowLCJDdXJzb3IiOiIxMjUyNyIsIkZpbHRlckhhc2giOiJrV3Y2VFQ0ZW1FOGgzT1RQL1hjOXFkdGIwR0JiWjNySkRMU3FTSmV5TUVJPSJ9\",\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get the inventory items for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of items to return."
          },
          {
            "name": "filter?",
            "type": "UnionPrettify<InventoryItemsForUser_Filter>",
            "description": "Filters the returned inventory items by specified criterias."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A paging cursor for a specified page."
          }
        ]
      }
    },
    "legacyBadges": {},
    "legacyDevelop": {},
    "legacyFollowings": {
      "universeFollowingsForUser": {
        "description": "Gets all universes that a user is following.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/universes",
          "example": "const { data: followings } = await LegacyFollowingsApi.universeFollowingsForUser({ userId: 45348281 });",
          "exampleData": "[\n  1040909955, 1055503474, 1127443799, 1165192137, 1200754375, 1236793313,\n  1272809249, 1291219836, 1325075446, 1333987814, 1455656959, 1459495916,\n  1475796875, 1566033, 1619449303, 1638574655, 1642810480, 1652474931,\n  1658520392, 1684207825, 1685831367, 1756953036, 1778285344, 245662005,\n  2471084, 37146255, 3837270861, 38625144, 4459945221, 4571818074,\n  478688139, 495693931, 498490399, 518243913, 5693752693, 602133888,\n  6102030522, 6211067578, 777854650, 878103525, 88070565, 904999465,\n  953412571, 99361251,\n]\n",
          "exampleRawBody": "[\n  { universeId: 1040909955, userId: 45348281 },\n  { universeId: 1055503474, userId: 45348281 },\n  { universeId: 1127443799, userId: 45348281 },\n  { universeId: 1165192137, userId: 45348281 },\n  { universeId: 1200754375, userId: 45348281 },\n  { universeId: 1236793313, userId: 45348281 },\n  { universeId: 1272809249, userId: 45348281 },\n  { universeId: 1291219836, userId: 45348281 },\n  { universeId: 1325075446, userId: 45348281 },\n  { universeId: 1333987814, userId: 45348281 },\n  { universeId: 1455656959, userId: 45348281 },\n  { universeId: 1459495916, userId: 45348281 },\n  { universeId: 1475796875, userId: 45348281 },\n  { universeId: 1566033, userId: 45348281 },\n  { universeId: 1619449303, userId: 45348281 },\n  { universeId: 1638574655, userId: 45348281 },\n  { universeId: 1642810480, userId: 45348281 },\n  { universeId: 1652474931, userId: 45348281 },\n  { universeId: 1658520392, userId: 45348281 },\n  { universeId: 1684207825, userId: 45348281 },\n  { universeId: 1685831367, userId: 45348281 },\n  { universeId: 1756953036, userId: 45348281 },\n  { universeId: 1778285344, userId: 45348281 },\n  { universeId: 245662005, userId: 45348281 },\n  { universeId: 2471084, userId: 45348281 },\n  { universeId: 37146255, userId: 45348281 },\n  { universeId: 3837270861, userId: 45348281 },\n  { universeId: 38625144, userId: 45348281 },\n  { universeId: 4459945221, userId: 45348281 },\n  { universeId: 4571818074, userId: 45348281 },\n  { universeId: 478688139, userId: 45348281 },\n  { universeId: 495693931, userId: 45348281 },\n  { universeId: 498490399, userId: 45348281 },\n  { universeId: 518243913, userId: 45348281 },\n  { universeId: 5693752693, userId: 45348281 },\n  { universeId: 602133888, userId: 45348281 },\n  { universeId: 6102030522, userId: 45348281 },\n  { universeId: 6211067578, userId: 45348281 },\n  { universeId: 777854650, userId: 45348281 },\n  { universeId: 878103525, userId: 45348281 },\n  { universeId: 88070565, userId: 45348281 },\n  { universeId: 904999465, userId: 45348281 },\n  { universeId: 953412571, userId: 45348281 },\n  { universeId: 99361251, userId: 45348281 },\n]\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get universe followings for."
          }
        ]
      },
      "universeFollowingStatusForUser": {
        "description": "Gets the following status between a user and a universe.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/universes/{universeId}/status",
          "example": "const { data: status } = await LegacyFollowingsApi.universeFollowingStatusForUser({\n  universeId: 4922741943,\n  userId: 45348281,\n});",
          "exampleData": "{\n  universeId: 4922741943,\n  userId: 45348281,\n  canFollow: true,\n  isFollowing: false,\n  followingCountByType: 44,\n  followingLimitByType: 200,\n}\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get following status for."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the user to get following status for."
          }
        ]
      },
      "authedUserUnfollowUniverse": {
        "description": "Unfollows a particular universe as the authenticated user.",
        "tags": {
          "endpoint": "DELETE /v1/users/{userId}/universes/{universeId}",
          "example": "const { data: ids } = await LegacyFollowingsApi.authedUserUnfollowUniverse({\n  universeId: 4922741943,\n  userId: 45348281,\n});",
          "exampleData": "{ universeId: 4922741943, userId: 45348281 }\n",
          "exampleRawBody": "{ universeId: 4922741943, userId: 45348281 }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to unfollow."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          }
        ]
      },
      "authedUserFollowUniverse": {
        "description": "Follows a particular universe as the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/users/{userId}/universes/{universeId}",
          "example": "const { data: ids } = await LegacyFollowingsApi.authedUserFollowUniverse({ universeId: 4922741943, userId: 45348281 });",
          "exampleData": "{ universeId: 4922741943, userId: 45348281 }\n",
          "exampleRawBody": "{ universeId: 4922741943, userId: 45348281 }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to follow."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          }
        ]
      }
    },
    "legacyGroups": {},
    "luauExecution": {
      "executeLuau": {
        "description": "Executes a roblox luau script for a given place.",
        "tags": {
          "endpoint": "POST /cloud/v2/universes/{universeId}/places/{placeId}/luau-execution-session-tasks\r\nPOST /cloud/v2/universes/{universeId}/places/{placeId}/versions/{version}/luau-execution-session-tasks",
          "example": "const { data: executed } = await LuauExecutionApi.executeLuau({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  script: `local x, y = 3, 4; return x + y`,\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  user: \"45348281\",\n  state: \"PROCESSING\",\n  script: \"local x, y = 3, 4; return x + y\",\n  universeId: \"5795192361\",\n  placeId: \"16866553538\",\n  version: 26,\n  sessionId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  taskId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  user: \"45348281\",\n  state: \"PROCESSING\",\n  script: \"local x, y = 3, 4; return x + y\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to execute the script under."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to execute the script under."
          },
          {
            "name": "version?",
            "type": "Version",
            "description": "The optional version number of the place to execute the script under."
          },
          {
            "name": "script",
            "type": "string | Buffer | ArrayNonEmptyIfConst<string | Buffer>",
            "description": "The script to execute."
          }
        ]
      },
      "luauExecutionTask": {
        "description": "Gets a luau execution task.",
        "tags": {
          "endpoint": "GET /cloud/v2/universes/{universeId}/places/{placeId}/luau-execution-session-tasks\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/versions/{version}/luau-execution-session-tasks\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/luau-execution-sessions/{sessionId}/tasks\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/versions/{version}/luau-execution-sessions/{sessionId}/tasks",
          "example": "import { pollMethod } from \"openblox/helpers\";\n\ntype Results = number[];\nconst { data: executedTask } = await pollMethod(\n  LuauExecutionApi.luauExecutionTask<Results>({\n    universeId: 5795192361,\n    placeId: 16866553538,\n    version: 26,\n    sessionId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n    taskId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  }),\n  async ({ data }, stopPolling) => data.state === \"COMPLETE\" && stopPolling(),\n);",
          "exampleData": "{\n  path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  createTime: \"2024-10-01T02:31:46.304Z\",\n  updateTime: \"2024-10-01T02:31:49.959Z\",\n  user: \"45348281\",\n  state: \"COMPLETE\",\n  script: \"\",\n  output: { results: [7] },\n  universeId: \"5795192361\",\n  placeId: \"16866553538\",\n  version: 26,\n  sessionId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  taskId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  createTime: \"2024-10-01T02:31:46.304Z\",\n  updateTime: \"2024-10-01T02:31:49.959Z\",\n  user: \"45348281\",\n  state: \"COMPLETE\",\n  script: \"\",\n  output: { results: [7] },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get the luau execution task from."
          },
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to get the luau execution task from."
          },
          {
            "name": "version?",
            "type": "number",
            "description": "The optional version number of the place to get the luau execution task for."
          },
          {
            "name": "sessionId",
            "type": "string",
            "description": "The ID of the session to get the luau execution task for."
          },
          {
            "name": "taskId",
            "type": "string",
            "description": "The ID of the task to get the luau execution task for."
          },
          {
            "name": "view?",
            "type": "\"BASIC\" | \"FULL\"",
            "description": "If the response should return the script source (`\"FULL\"`) instead of an empty string."
          }
        ]
      },
      "listLuauExecutionLogs": {
        "description": "Lists luau execution logs.",
        "tags": {
          "endpoint": "GET /cloud/v2/universes/{universeId}/places/{placeId}/luau-execution-session-tasks/{taskId}/logs\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/luau-execution-sessions/{sessionId}/tasks/{taskId}/logs\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/versions/{version}/luau-execution-session-tasks/{taskId}/logs\r\nGET /cloud/v2/universes/{universeId}/places/{placeId}/versions/{version}/luau-execution-sessions/{sessionId}/tasks/{taskId}/logs",
          "example": "const { data: logs } = await LuauExecutionApi.listLuauExecutionLogs({\n  universeId: 5795192361,\n  placeId: 16866553538,\n  version: 26,\n  sessionId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  taskId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n});",
          "exampleData": "[\n  {\n    path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/logs/1\",\n    messages: [],\n    universeId: \"5795192361\",\n    placeId: \"16866553538\",\n    version: 26,\n    sessionId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n    taskId: \"67823af7-1f99-4fc5-b3bb-da7ab3456b5d\",\n  },\n]\n",
          "exampleRawBody": "{\n  luauExecutionSessionTaskLogs: [\n    {\n      path: \"universes/5795192361/places/16866553538/versions/26/luau-execution-sessions/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/tasks/67823af7-1f99-4fc5-b3bb-da7ab3456b5d/logs/1\",\n      messages: [],\n    },\n  ],\n  nextPageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to list logs for."
          },
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to list logs for."
          },
          {
            "name": "version?",
            "type": "Version",
            "description": "The optional version number of the place to list logs for."
          },
          {
            "name": "sessionId?",
            "type": "SessionId",
            "description": "The ID of the session to get logs for."
          },
          {
            "name": "taskId",
            "type": "TaskId",
            "description": "The ID of the task to get logs for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of logs to return. The service might return fewer than this value. If unspecified, at most 10000 luau execution session task logs are returned. The maximum value is 10000 and higher values are set to 10000."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A page token, received from a previous call, to retrieve a subsequent page."
          }
        ]
      }
    },
    "memoryStores": {
      "sortedMapItem": {
        "description": "Gets a sorted map item.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/memory-store/sorted-maps/{sortedMap}/items/{itemId}",
          "example": "type Item = { isReal: boolean };\nconst { data } = await MemoryStoresApi.sortedMapItem<Item>({\n  universeId: 5243626809,\n  sortedMap: \"MySortedMap\",\n  itemId: \"Testing123\",\n});",
          "exampleData": "{\n  path: \"cloud/v2/universes/5243626809/memory-stores/sorted-maps/MySortedMap/items/Testing123\",\n  value: { isReal: true },\n  etag: \"12\",\n  expireTime: \"2024-04-18T01:44:49.000Z\",\n  id: \"Testing123\",\n  numericSortKey: 1,\n}\n",
          "exampleRawBody": "{\n  path: \"cloud/v2/universes/5243626809/memory-stores/sorted-maps/MySortedMap/items/Testing123\",\n  value: { isReal: true },\n  etag: \"12\",\n  expireTime: \"2024-04-18T01:44:49Z\",\n  id: \"Testing123\",\n  numericSortKey: 1,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the sorted map item from."
          },
          {
            "name": "sortedMap",
            "type": "string",
            "description": "The sorted map to get the item from."
          },
          {
            "name": "itemId",
            "type": "string",
            "description": "The id of the item to get."
          }
        ]
      },
      "listSortedMapItems": {
        "description": "Lists items of a sorted map.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/memory-store/sorted-maps/{sortedMap}/items",
          "example": "const { data: items } = await MemoryStoresApi.listSortedMapItems<Item>({\n  universeId: 5243626809,\n  sortedMap: \"MySortedMap\",\n  maxPageSize: 1,\n});",
          "exampleData": "[\n  {\n    path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items/Testing123\",\n    value: { isReal: true },\n    etag: \"24\",\n    expireTime: \"2024-04-18T04:31:14.000Z\",\n    id: \"Testing123\",\n    numericSortKey: 1,\n  },\n]\n",
          "exampleRawBody": "{\n  items: [\n    {\n      path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items/Testing123\",\n      value: { isReal: true },\n      etag: \"24\",\n      expireTime: \"2024-04-18T04:31:14Z\",\n      id: \"Testing123\",\n      numericSortKey: 1,\n    },\n  ],\n  nextPageToken: \"S_USLzRFVMU73i67jNK349FgCtYxw4Wl18ziPHeFRZoACgBUZXN0aW5nMTIzCQAAv_AAAAAAAAA\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the sorted map item from."
          },
          {
            "name": "sortedMap",
            "type": "string",
            "description": "The sorted map to get the item from."
          },
          {
            "name": "maxPageSize?",
            "type": "number",
            "description": "The id of the item to get."
          },
          {
            "name": "orderBy?",
            "type": "\"asc\" | \"desc\"",
            "description": "The order of the returned sorted map items."
          },
          {
            "name": "filter?",
            "type": "string",
            "description": "filter returned sorted map items."
          }
        ]
      },
      "createSortedMapItem": {
        "description": "Creates a sorted map item.",
        "tags": {
          "endpoint": "POST /v2/universes/{universeId}/memory-store/sorted-maps/{sortedMap}/items",
          "example": "type Item = { isReal: boolean };\nconst { data } = await MemoryStoresApi.createSortedMapItem<Item>({\n  universeId: 5243626809,\n  sortedMap: \"MySortedMap\",\n  item: { id: \"Testing123\", value: { isReal: true }, ttl: \"300s\", numericSortKey: 1 },\n});",
          "exampleData": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items\",\n  value: { isReal: true },\n  etag: \"10\",\n  expireTime: \"2024-04-18T00:30:14.000Z\",\n  id: \"Testing123\",\n  numericSortKey: 1,\n}\n",
          "exampleRawBody": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items\",\n  value: { isReal: true },\n  etag: \"10\",\n  expireTime: \"2024-04-18T00:30:14Z\",\n  id: \"Testing123\",\n  numericSortKey: 1,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to create the sorted map item in."
          },
          {
            "name": "sortedMap",
            "type": "string",
            "description": "The sorted map to create the item in."
          },
          {
            "name": "item",
            "type": "CreateSortedMapItem_ConstructItemConfig<ItemValue>",
            "description": "The sorted map item data."
          }
        ]
      },
      "updateSortedMapItem": {
        "description": "Updates a sorted map item.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universeId}/memory-store/sorted-maps/{sortedMap}/items/{itemId}",
          "example": "type Item = { isReal: boolean };\nconst { data: updatedItem } = await MemoryStoresApi.updateSortedMapItem<Item>({\n  universeId: 5243626809,\n  sortedMap: \"MySortedMap\",\n  itemId: \"Testing123\",\n  updatedItemData: { value: { isReal: true }, ttl: \"300s\", numericSortKey: 1 },\n});",
          "exampleData": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items/\",\n  value: { isReal: false },\n  etag: \"20\",\n  expireTime: \"2024-04-18T03:48:53.000Z\",\n  numericSortKey: null,\n}\n",
          "exampleRawBody": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/sorted-maps/MySortedMap/items/\",\n  value: { isReal: false },\n  etag: \"20\",\n  expireTime: \"2024-04-18T03:48:53Z\",\n  numericSortKey: null,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the sorted map item from."
          },
          {
            "name": "sortedMap",
            "type": "string",
            "description": "The sorted map to get the item from."
          },
          {
            "name": "itemId",
            "type": "string",
            "description": "The id of the item to update."
          },
          {
            "name": "updatedItemData",
            "type": "UpdateSortedMapItem_ConstructItemConfig<ItemValue>",
            "description": "The data to update the sorted map item with."
          },
          {
            "name": "allowMissing?",
            "type": "boolean",
            "description": "If set to true, and the item is not found, a new item will be created. Default false."
          }
        ]
      },
      "deleteSortedMapItem": {
        "description": "Deletes a sorted map item.",
        "tags": {
          "endpoint": "DELETE /v2/universes/{universeId}/memory-store/sorted-maps/{sortedMap}/items/{itemId}",
          "example": "await MemoryStoresApi.deleteSortedMapItem({ universeId: 5243626809, sortedMap: \"MySortedMap\", itemId: \"Testing1234\" });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the sorted map item from."
          },
          {
            "name": "sortedMap",
            "type": "string",
            "description": "The sorted map to get the item from."
          },
          {
            "name": "itemId",
            "type": "string",
            "description": "The id of the item to update."
          },
          {
            "name": "etag?",
            "type": "string",
            "description": "Server generated id for conditional delete."
          }
        ]
      },
      "enqueueItem": {
        "description": "Adds an item to a memory store queue.",
        "tags": {
          "endpoint": "POST /v2/universes/{universeId}/memory-store/queues/{queue}/items",
          "example": "const { data: enqueuedItem } = await MemoryStoresApi.enqueueItem({\n  universeId: 5243626809,\n  queue: \"MyQueue\",\n  item: { name: \"MyItem\", value: \"fooBar\", ttl: \"300s\" },\n});",
          "exampleData": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/queues/MyQueue/items/7fffffffffffffff0000000000000003\",\n  data: { name: \"MyItem\", value: \"fooBar\" },\n  priority: 0,\n  expireTime: \"2024-06-04T08:10:33.000Z\",\n}\n",
          "exampleRawBody": "{\n  path: \"cloud/v2/universes/5243626809/memory-store/queues/MyQueue/items/7fffffffffffffff0000000000000003\",\n  data: { name: \"MyItem\", value: \"fooBar\" },\n  priority: 0,\n  expireTime: \"2024-06-04T08:10:33Z\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the sorted map item from."
          },
          {
            "name": "sortedMap",
            "type": "🤷",
            "description": "The sorted map to get the item from."
          },
          {
            "name": "itemId",
            "type": "🤷",
            "description": "The id of the item to update."
          },
          {
            "name": "etag",
            "type": "🤷",
            "description": "Server generated id for conditional delete."
          }
        ]
      },
      "readQueueItems": {
        "description": "Reads queue items.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/memory-store/queues/{queue}/items:read",
          "example": "type Item = { isReal: boolean };\nconst { data: queueItems } = await MemoryStoresApi.readQueueItems<Item>({\n  universeId: 5243626809,\n  queue: \"MyQueue\",\n  limit: 2,\n});",
          "exampleData": "{\n  items: [\n    { name: \"Testing123\", value: { isReal: true } },\n    { name: \"Testing1234\", value: { isReal: true } },\n  ],\n  id: \"48e44da3c8754a4ab7ed728d07ac9526\",\n}\n",
          "exampleRawBody": "{\n  data: [\n    { name: \"Testing123\", value: { isReal: true } },\n    { name: \"Testing1234\", value: { isReal: true } },\n  ],\n  id: \"5cfc27af46da4cf08b41aa9a3d78a75e\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to read queue items from."
          },
          {
            "name": "queue",
            "type": "string",
            "description": "Name of the Queue."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "Maximum entries to read, Max 200, Default 1."
          },
          {
            "name": "allOrNothing?",
            "type": "boolean",
            "description": "Whether to read any items if >= count can’t be read. Default false."
          },
          {
            "name": "invisibilityTimeoutSeconds?",
            "type": "number",
            "description": "Invisibility timeout for items read, default 30s. This will make previously read items invisible for the provided duration in the next Read request."
          }
        ]
      },
      "dequeueItems": {
        "description": "Dequeues queue items.",
        "tags": {
          "endpoint": "POST /v2/universes/{universeId}/memory-store/queues/{queue}/items:discard",
          "example": "await MemoryStoresApi.dequeueItems({\n  universeId: 5243626809,\n  queue: \"MyQueue\",\n  readId: \"5cfc27af46da4cf08b41aa9a3d78a75e\",\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to remove queue items from."
          },
          {
            "name": "queue",
            "type": "string",
            "description": "Name of the Queue."
          },
          {
            "name": "readId",
            "type": "string",
            "description": "ID returned from a previous Read Queue call. It will discard all items that were read from the previous call."
          }
        ]
      },
      "flushAllQueues": {
        "description": "Removes all items from every queue in a given universe.",
        "tags": {
          "endpoint": "POST /v2/universes/${universeId}/memory-store:flush",
          "example": "const { data: createdOperation } = await MemoryStoresApi.flushAllQueues({ universeId: 5243626809 });",
          "exampleData": "{\n  path: \"cloud/v2/universes/5243626809/operations/AAUAAAAAAADRMx55T0AKRxSgFCrSusMzqOKQNyVaQz8eMi9t-dwQwQ\",\n  done: false,\n  id: \"AAUAAAAAAADRMx55T0AKRxSgFCrSusMzqOKQNyVaQz8eMi9t-dwQwQ\",\n}\n",
          "exampleRawBody": "{\n  path: \"cloud/v2/universes/5243626809/operations/AAUAAAAAAADRMx55T0AKRxSgFCrSusMzqOKQNyVaQz8eMi9t-dwQwQ\",\n  done: null,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to flush all queue items from."
          }
        ]
      }
    },
    "messaging": {
      "publishMessage": {
        "description": "Publishes a message to all servers of a universe.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/topics/{topic}",
          "tags": "[ \"Cloud Key\" ]",
          "example": "// Openblox (Typescript Code) - Sending Message\ntype Message = { targetId: number; reason: string };\nawait MessagingApi.publishMessage<Message>({\n  universeId: 5097539509,\n  topic: \"kickPlr\",\n  message: { targetId: 45348281, reason: \"You smell kinda funny.\" },\n});\n\n/* Roblox Luau Code - Recieving The Message Above\nlocal MessagingService = game:GetService(\"MessagingService\")\nlocal HttpService = game:GetService(\"HttpService\")\nlocal Players = game:GetService(\"Players\")\n\nMessagingService:SubscribeAsync(\"kickPlr\", function(msg)\n    local data = HttpService:JSONDecode(msg.Data)\n     \n    local plr = Players:GetPlayerByUserId(data.targetId)\n    if not plr then return end\n    \n    plr:Kick(`You have been kicked for: \"{data.reason}\"`)\nend) */",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": []
      }
    },
    "oauth": {
      "userInfo": {
        "description": "Gets user information from the current access token.",
        "tags": {
          "endpoint": "GET /v1/userinfo",
          "example": "const { data: userInfo } = await OAuthApi.userInfo.bind({ oauthToken: \"SENSITIVE_INFO\" })();",
          "exampleData": "{\n  sub: \"45348281\",\n  name: \"Mighty\",\n  nickname: \"Mighty\",\n  preferred_username: \"MightyPart\",\n  created_at: 1373701800,\n  profile: \"https://www.roblox.com/users/45348281/profile\",\n  picture: \"https://tr.rbxcdn.com/30DAY-AvatarHeadshot-11BD4BBC67E3F95A4F4BED256CFB4591-Png/150/150/AvatarHeadshot/Png/noFilter\",\n}\n",
          "exampleRawBody": "{\n  sub: \"45348281\",\n  name: \"Mighty\",\n  nickname: \"Mighty\",\n  preferred_username: \"MightyPart\",\n  created_at: 1373701800,\n  profile: \"https://www.roblox.com/users/45348281/profile\",\n  picture: \"https://tr.rbxcdn.com/30DAY-AvatarHeadshot-11BD4BBC67E3F95A4F4BED256CFB4591-Png/150/150/AvatarHeadshot/Png/noFilter\",\n}\n"
        },
        "params": []
      }
    },
    "orderedDataStores_V1": {
      "listOrderedDatastoreEntries": {
        "description": "Returns a list of entries from an ordered data store.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: entries } = await OrderedDataStoresApi_V1.listOrderedDatastoreEntries({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n});",
          "exampleData": "[\n  {\n    path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n    value: 54,\n    id: \"45348281\",\n  },\n]\n",
          "exampleRawBody": "{\n  entries: [\n    {\n      path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n      value: 54,\n      id: \"45348281\",\n    },\n  ],\n  nextPageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "OrderedDataStore",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The name of the data store scope."
          },
          {
            "name": "maxPageSize?",
            "type": "number",
            "description": "The maximum number of entries to return. The service may return fewer than this value. The default value is 10. The maximum value is 100, and any input above 100 is coerced to 100."
          },
          {
            "name": "orderBy?",
            "type": "\"desc\" | \"asc\"",
            "description": "The enumeration direction. The order by default is ascending. Input a desc suffix for descending."
          },
          {
            "name": "filter?",
            "type": "string",
            "description": "The range of qualifying values of entries to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A page token received from a previous List call. Provide this to retrieve the subsequent page. When paginating, all other parameters provided to List must match the call providing the page token."
          }
        ]
      },
      "createOrderedDatastoreEntry": {
        "description": "Creates a new entry with the content value provided.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: createdEntry } = await OrderedDataStoresApi_V1.createOrderedDatastoreEntry({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n  id: \"45348282\",\n  value: 54,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 54,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 54,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "OrderedDataStore",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The name of the data store scope."
          },
          {
            "name": "id",
            "type": "Id",
            "description": "The name of the entry."
          },
          {
            "name": "value",
            "type": "Value",
            "description": "The value of the entry."
          }
        ]
      },
      "orderedDatastoreEntry": {
        "description": "Returns a list of entries from an ordered data store.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: entry } = await OrderedDataStoresApi_V1.orderedDatastoreEntry({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n  id: \"45348281\",\n});",
          "exampleData": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 54,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 54,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "OrderedDataStore",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The name of the data store scope."
          },
          {
            "name": "id",
            "type": "Id",
            "description": "The id of the entry."
          }
        ]
      },
      "deleteOrderedDatastoreEntry": {
        "description": "Deletes the specified entry in an ordered datastore.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: success } = await OrderedDataStoresApi_V1.deleteOrderedDatastoreEntry({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n  id: \"45348281\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "string",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "string",
            "description": "The name of the data store scope."
          },
          {
            "name": "id",
            "type": "string",
            "description": "The id of the entry."
          }
        ]
      },
      "updateOrderedDatastoreEntry": {
        "description": "Updates the specified entry.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: updatedEntry } = await OrderedDataStoresApi_V1.updateOrderedDatastoreEntry({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n  id: \"45348281\",\n  newValue: 58,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 58,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 58,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "OrderedDataStore",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The name of the data store scope."
          },
          {
            "name": "id",
            "type": "Id",
            "description": "The id of the entry."
          },
          {
            "name": "newValue",
            "type": "Value",
            "description": "The value to set the entry to."
          },
          {
            "name": "createIfNoEntryExists?",
            "type": "boolean",
            "description": "The flag to allow the creation of an entry if the entry doesn't exist. (allow_missing)"
          }
        ]
      },
      "incrementOrderedDatastoreEntry": {
        "description": "Increments the specified entry.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/orderedDataStores/{orderedDataStore}/scopes/{scope}/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `OrderedDataStoresApi_V2` for new work.",
          "example": "const { data: incrementedEntry } = await OrderedDataStoresApi_V1.incrementOrderedDatastoreEntry({\n  universeId: 5097539509,\n  orderedDataStore: \"PointsStore\",\n  scope: \"global\",\n  id: \"45348281\",\n  incrementBy: 26,\n  createIfNoEntryExists: true,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 66,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/orderedDataStores/PointsStore/scopes/global/entries/45348281\",\n  value: 66,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The identifier of the experience with ordered data stores that you want to access."
          },
          {
            "name": "orderedDataStore",
            "type": "OrderedDataStore",
            "description": "The name of the target ordered data store."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The name of the data store scope."
          },
          {
            "name": "id",
            "type": "Id",
            "description": "The id of the entry."
          },
          {
            "name": "incrementBy",
            "type": "Identifier",
            "description": "The number to increment the entry's value by."
          },
          {
            "name": "createIfNoEntryExists?",
            "type": "boolean",
            "description": "The flag to allow the creation of an entry if the entry doesn't exist. (allow_missing)"
          }
        ]
      }
    },
    "orderedDataStores_V2": {
      "listOrderedDatastoreEntries": {
        "description": "Lists entries in an ordered data store.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries",
          "example": "const { data: entries } = await OrderedDataStoresApi_V2.listOrderedDatastoreEntries({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  sortOrder: \"Desc\",\n  lessThanOrEq: 80,\n  moreThanOrEq: 70,\n});",
          "exampleData": "[\n  {\n    path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n    value: 78,\n    id: \"45348281\",\n  },\n]\n",
          "exampleRawBody": "{\n  orderedDataStoreEntries: [\n    {\n      path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n      value: 78,\n      id: \"45348281\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get ordered data store entries from."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to get entries from."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope to get entries from."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "Whether to return the results from biggest to smallest (Desc) or smallest to biggest (Asc)."
          },
          {
            "name": "lessThanOrEq?",
            "type": "number",
            "description": "Filters the results to include those less than or equal to a specific number (can be used in tangent with `moreThabOrEq`)."
          },
          {
            "name": "moreThanOrEq?",
            "type": "number",
            "description": "Filters the results to include those more than or equal to a specific number (can be used in tangent with `lessThabOrEq`)."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "createOrderedDataStoreEntry": {
        "description": "Creates a new entry in an ordered data store.",
        "tags": {
          "endpoint": "POST /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries",
          "example": "const { data: entry } = await OrderedDataStoresApi_V2.createOrderedDataStoreEntry({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  entryId: \"453482811\",\n  entryValue: 15,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 15,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 15,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to create the entry in."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to create the entry in."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope for the data store entry."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "the ID (name) for the entry."
          }
        ]
      },
      "orderedDataStoreEntry": {
        "description": "Gets an new entry in an ordered data store.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries",
          "example": "const { data: entry } = await OrderedDataStoresApi_V2.orderedDataStoreEntry({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  entryId: \"45348281\",\n});",
          "exampleData": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 78,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 78,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get the entry from."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to get the entry from."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope of the data store entry."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "the ID (name) of the entry."
          }
        ]
      },
      "deleteOrderedDataStoreEntry": {
        "description": "Deletes an entry from an ordered data store.",
        "tags": {
          "endpoint": "DELETE /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries",
          "example": "const { data: success } = await OrderedDataStoresApi_V2.deleteOrderedDataStoreEntry({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  entryId: \"45348281\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to delete the entry from."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to delete the entry from."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope of the data store entry to delete."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "the ID (name) of the entry to delete."
          }
        ]
      },
      "updateOrderedDataStoreEntry": {
        "description": "Updates an entry in an ordered data store.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries/{entryId}",
          "example": "const { data: entry } = await OrderedDataStoresApi_V2.updateOrderedDataStoreEntry({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  entryId: \"45348281\",\n  newEntryValue: 45,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 45,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 45,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to update the entry in."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to update the entry in."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope of the data store entry to update."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "the ID (name) of the entry to update."
          }
        ]
      },
      "incrementOrderedDataStoreEntry": {
        "description": "Updates an entry in an ordered data store.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universeId}/ordered-data-stores/{dataStoreId}/scopes/{scope}/entries/{entryId}:increment",
          "example": "const { data: entry } = await OrderedDataStoresApi_V2.incrementOrderedDataStoreEntry({\n  universeId: 5097539509,\n  dataStoreId: \"PointsStore\",\n  scope: \"global\",\n  entryId: \"45348281\",\n  incrementBy: 42,\n});",
          "exampleData": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 42,\n  id: \"45348281\",\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/ordered-data-stores/PointsStore/scopes/global/entries/45348281\",\n  value: 42,\n  id: \"45348281\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to update the entry in."
          },
          {
            "name": "dataStoreId",
            "type": "DataStoreId",
            "description": "The ID (name) of the data store to update the entry in."
          },
          {
            "name": "scope",
            "type": "Scope",
            "description": "The scope of the data store entry to update."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "the ID (name) of the entry to update."
          }
        ]
      }
    },
    "standardDataStores_V1": {
      "listStandardDatastores": {
        "description": "Returns a list of data stores belonging to an experience.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/standard-datastores",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "const { data: datastores } = await StandardDataStoresApi_V1.listStandardDatastores({ universeId: 5097539509 });",
          "exampleData": "[{ name: \"InventoryStore\", createdTime: \"2023-09-16T11:03:03.868Z\" }]\n",
          "exampleRawBody": "{\n  datastores: [\n    { name: \"InventoryStore\", createdTime: \"2023-09-16T11:03:03.868331Z\" },\n  ],\n  nextPageCursor: \"\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "prefix?",
            "type": "Prefix",
            "description": "Provide to return only data stores with this prefix."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of items to return. Each call only reads one partition so it can return fewer than the given value when running out of objectives on one partition."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "Provide to request the next set of data."
          }
        ]
      },
      "standardDatastoreKeys": {
        "description": "Returns a list of entry keys within a data store.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/standard-datastores/datastore/entries",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "const { data: keys } = await StandardDataStoresApi_V1.standardDatastoreKeys({\n  universeId: 5097539509,\n  datastoreName: \"InventoryStore\",\n});",
          "exampleData": "[\"user/45348281\"]\n",
          "exampleRawBody": "{\n  keys: [{ key: \"user/45348281\" }],\n  nextPageCursor: \"eyJ2ZXJzaW9uIjoxLCJjdXJzb3IiOiIxMyMifQ==\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          },
          {
            "name": "allScopes?",
            "type": "boolean",
            "description": "Set to true to return keys from all scopes."
          },
          {
            "name": "prefix?",
            "type": "Prefix",
            "description": "Provide to return only keys with this prefix."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of items to return. Each call only reads one partition so it can return fewer than the given value when running out of objectives on one partition."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "Provide to request the next set of data."
          }
        ]
      },
      "standardDatastoreEntry": {
        "description": "Returns the value and metadata associated with an entry. Depending on the runtime, `Bun.CryptoHasher` or `node:crypto` is used to calculate the md5 checksum.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/standard-datastores/datastore/entries/entry",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst { data: entryInfo } = await StandardDataStoresApi_V1.standardDatastoreEntry<InventorySchema>({\n  universeId: 5097539509,\n  datastoreName: \"InventoryStore\",\n  entryKey: \"user/45348281\",\n});\nif (!entryInfo.checksumsMatch) console.log(\"checksums do not match, data may be invalid!\");\nelse console.log(\"checksums match! ->\", entryInfo.entry);",
          "exampleData": "{\n  entry: { Gold: 6, Iron: 57 },\n  checksumsMatch: true,\n  metadata: {\n    contentMD5: \"hGwoaGwduF4bOhexREYGkA==\",\n    entryVersion: \"08DBB6A47FDE6132.0000000016.08DBB782CEE11766.01\",\n    entryCreatedTime: \"2023-09-16T11:03:03.922Z\",\n    entryVersionCreatedTime: \"2023-09-17T13:34:24.754Z\",\n    entryAttributes: null,\n    entryUserIds: [45348281],\n  },\n}\n",
          "exampleRawBody": "{\n  entry: { Gold: 6, Iron: 57 },\n  checksumsMatch: true,\n  metadata: {\n    contentMD5: \"hGwoaGwduF4bOhexREYGkA==\",\n    entryVersion: \"08DBB6A47FDE6132.0000000016.08DBB782CEE11766.01\",\n    entryCreatedTime: \"2023-09-16T11:03:03.922Z\",\n    entryVersionCreatedTime: \"2023-09-17T13:34:24.754Z\",\n    entryAttributes: null,\n    entryUserIds: [45348281],\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          }
        ]
      },
      "setStandardDatastoreEntry": {
        "description": "Sets the value, metadata and user IDs associated with an entry.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/standard-datastores/datastore/entries/entry",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst { data: response } = await StandardDataStoresApi_V1.setStandardDatastoreEntry<InventorySchema>({\n  universeId: 5097539509,\n  datastoreName: \"InventoryStore\",\n  entryKey: \"user/45348281\",\n  entryValue: { Gold: 6 },\n  entryUserIds: [45348281],\n});",
          "exampleData": "{\n  version: \"08DBB6A47FDE6132.000000000E.08DBB780C616DF0C.01\",\n  deleted: false,\n  contentLength: 20,\n  createdTime: \"2023-09-17T13:19:51.014Z\",\n  objectCreatedTime: \"2023-09-16T11:03:03.922Z\",\n}\n",
          "exampleRawBody": "{\n  version: \"08DBB6A47FDE6132.000000000E.08DBB780C616DF0C.01\",\n  deleted: false,\n  contentLength: 20,\n  createdTime: \"2023-09-17T13:19:51.014Z\",\n  objectCreatedTime: \"2023-09-16T11:03:03.922Z\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          },
          {
            "name": "matchVersion?",
            "type": "string",
            "description": "Provide to update only if the current version matches this."
          },
          {
            "name": "exclusiveCreate?",
            "type": "boolean",
            "description": "Create the entry only if it does not exist."
          },
          {
            "name": "entryAttributes?",
            "type": "Record<string, Identifier>",
            "description": "Attributes to be associated with new version of the entry. If not provided, existing attributes are cleared."
          },
          {
            "name": "entryUserIds?",
            "type": "Identifier[]",
            "description": "An array of Roblox user IDs tagged with the entry. If not provided, existing user IDs are cleared."
          }
        ]
      },
      "deleteStandardDatastoreEntry": {
        "description": "Returns the value and metadata associated with an entry.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/standard-datastores/datastore/entries/entry",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "const { data: success } = await StandardDataStoresApi_V1.deleteStandardDatastoreEntry({\n  universeId: 5097539509,\n  datastoreName: \"InventoryStore\",\n  entryKey: \"user/45348281\",\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          }
        ]
      },
      "incrementStandardDatastoreEntry": {
        "description": "Increments the value for an entry by a given amount, or create a new entry with that amount.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/standard-datastores/datastore/entries/entry/increment",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "const { data: incrementedEntry } = await StandardDataStoresApi_V1.incrementStandardDatastoreEntry({\n  universeId: 5097539509,\n  datastoreName: \"LoremIpsum\",\n  entryKey: \"user/45348281\",\n  incrementBy: 1,\n  entryUserIds: [45348281],\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "incrementBy",
            "type": "number",
            "description": "The amount by which the entry should be incremented, or the starting value if it doesn't exist."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          },
          {
            "name": "entryAttributes?",
            "type": "Record<string, Identifier>",
            "description": "Attributes to be associated with new version of the entry. If not provided, existing attributes are cleared."
          },
          {
            "name": "entryUserIds?",
            "type": "Identifier[]",
            "description": "A comma-separated list of Roblox user IDs that the entry is tagged with. If not provided, existing user IDs are cleared."
          }
        ]
      },
      "standardDatastoreEntryOfVersion": {
        "description": "Returns the value and metadata of a specific version of an entry.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/standard-datastores/datastore/entries/entry/versions/version",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst { data: entry } = await StandardDataStoresApi_V1.standardDatastoreEntryOfVersion({\n  universeId: 5097539509,\n  datastoreName: \"LoremIpsum\",\n  entryKey: \"user/45348281\",\n  versionId: \"08DC7742E4BD78AF.0000000001.08DC7742E4BD78AF.01\",\n});",
          "exampleData": "{\n  entry: { Gold: 6, Iron: 57 },\n  checksumsMatch: true,\n  metadata: {\n    contentMD5: \"hGwoaGwduF4bOhexREYGkA==\",\n    entryVersion: \"08DBB6A47FDE6132.0000000016.08DBB782CEE11766.01\",\n    entryCreatedTime: \"2023-09-16T11:03:03.922Z\",\n    entryVersionCreatedTime: \"2023-09-17T13:34:24.754Z\",\n    entryAttributes: null,\n    entryUserIds: [45348281],\n  },\n}\n",
          "exampleRawBody": "{\n  entry: { Gold: 6, Iron: 57 },\n  checksumsMatch: true,\n  metadata: {\n    contentMD5: \"hGwoaGwduF4bOhexREYGkA==\",\n    entryVersion: \"08DBB6A47FDE6132.0000000016.08DBB782CEE11766.01\",\n    entryCreatedTime: \"2023-09-16T11:03:03.922Z\",\n    entryVersionCreatedTime: \"2023-09-17T13:34:24.754Z\",\n    entryAttributes: null,\n    entryUserIds: [45348281],\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "versionId",
            "type": "string",
            "description": "The version to inspect."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          }
        ]
      },
      "listStandardDatastoreEntryVersions": {
        "description": "Returns a list of data stores belonging to an experience.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/standard-datastores/datastore/entries/entry/versions",
          "tags": "[ \"Cloud Key\" ]",
          "deprecated": "Please use `StandardDataStoresApi_V2` for new work.",
          "example": "const { data: versions } = await StandardDataStoresApi_V1.listStandardDatastoreEntryVersions({\n  universeId: 5097539509,\n  datastoreName: \"InventoryStore\",\n  entryKey: \"user/45348281\",\n  sortOrder: \"Ascending\",\n  limit: 1,\n});",
          "exampleData": "[\n  {\n    version: \"08DBB6A47FDE6132.0000000010.08DBB781B9579F00.01\",\n    deleted: false,\n    contentLength: 20,\n    createdTime: \"2023-09-17T13:26:39.124Z\",\n    objectCreatedTime: \"2023-09-16T11:03:03.922Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  versions: [\n    {\n      version: \"08DBB6A47FDE6132.0000000010.08DBB781B9579F00.01\",\n      deleted: false,\n      contentLength: 20,\n      createdTime: \"2023-09-17T13:26:39.124Z\",\n      objectCreatedTime: \"2023-09-16T11:03:03.922Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The identifier of the experience with data stores that you want to access."
          },
          {
            "name": "datastoreName",
            "type": "string",
            "description": "The name of the data store."
          },
          {
            "name": "entryKey",
            "type": "string",
            "description": "The key identifying the entry."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The value is global by default."
          },
          {
            "name": "startTime?",
            "type": "Date | ISODateTime",
            "description": "Provide to not include versions earlier than this timestamp."
          },
          {
            "name": "endTime?",
            "type": "Date | ISODateTime",
            "description": "Provide to not include versions later than this timestamp."
          },
          {
            "name": "sortOrder?",
            "type": "\"Ascending\" | \"Descending\"",
            "description": "Either \"Ascending\" (earlier versions first) or \"Descending\" (later versions first)."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of items to return. Each call only reads one partition so it can return fewer than the given value when running out of objectives on one partition."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "Provide to request the next set of data."
          }
        ]
      }
    },
    "standardDataStores_V2": {
      "listStandardDataStores": {
        "description": "Returns a list of data stores belonging to an experience.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/data-stores",
          "example": "const { data: datastores } = await StandardDataStoresApi_V2.listStandardDataStores({\n  universeId: 5097539509,\n  prefix: \"Ba\",\n});",
          "exampleData": "[{ path: \"universes/5097539509/data-stores/Bans\", id: \"Bans\" }]\n",
          "exampleRawBody": "{\n  dataStores: [\n    { path: \"universes/5097539509/data-stores/Bans\", id: \"Bans\" },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to list datastores for."
          },
          {
            "name": "prefix?",
            "type": "Prefix",
            "description": "Provide to return only data stores with this prefix."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of data stores to return. The service might return fewer than this value. If unspecified, at most 10 data stores are returned. The maximum value is 100 and higher values are set to 100."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "createStandardDataStoreSnapshot": {
        "description": "Creates a snapshot of standard datastores for a universe.",
        "tags": {
          "endpoint": "POST /cloud/v2/universes/{universeId}/data-stores:snapshot",
          "example": "const { data: snapshot } = await StandardDataStoresApi_V2.createStandardDataStoreSnapshot({ universeId: 5097539509 });",
          "exampleData": "{ newSnapshotTaken: false, latestSnapshotTime: \"2024-07-29T22:08:49.588Z\" }\n",
          "exampleRawBody": "{ newSnapshotTaken: false, latestSnapshotTime: \"2024-07-29T22:08:49.588Z\" }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to create a snapshot for."
          }
        ]
      },
      "listStandardDataStoreEntries": {
        "description": "Lists entries for a standard datastore.",
        "tags": {
          "endpoint": "GET /v2/universes/{universe}/data-stores/{data-store}/entries\r\nGET /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries",
          "example": "await StandardDataStoresApi_V2.listStandardDataStoreEntries({\n  universeId: 5097539509,\n  dataStore: \"InventoryStore\",\n});",
          "exampleData": "[\n  {\n    path: \"universes/5097539509/data-stores/InventoryStore/entries/user/45348281\",\n    id: \"user/45348281\",\n  },\n]\n",
          "exampleRawBody": "{\n  dataStoreEntries: [\n    {\n      path: \"universes/5097539509/data-stores/InventoryStore/entries/user/45348281\",\n      id: \"user/45348281\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get data store entries for."
          },
          {
            "name": "prefix?",
            "type": "Prefix",
            "description": "Provide to return only data store entries with this prefix."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of data store entries to return. The service might return fewer than this value. If unspecified, at most 10 data store entries are returned. The maximum value is 256 and higher values are set to 256."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "createStandardDataStoreEntry": {
        "description": "Creates an entry in a standard datastore.",
        "tags": {
          "endpoint": "POST /v2/universes/{universe}/data-stores/{data-store}/entries\r\nPOST /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst { data: entry } = await StandardDataStoresApi_V2.createStandardDataStoreEntry<InventorySchema>({\n  universeId: 5097539509,\n  dataStore: \"InventoryStore\",\n  entryId: \"users/45348281\",\n  value: { Iron: 50 },\n  users: [45348281],\n});",
          "exampleData": "{\n  path: \"universes/5097539509/data-stores/InventoryStore/entries/users:45348281\",\n  createTime: \"2024-07-22T19:06:55.829Z\",\n  revisionId: \"08DCAA81744A406E.0000000001.08DCAA81744A406E.01\",\n  revisionCreateTime: \"2024-07-22T19:06:55.829Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA81744A406E.0000000001.08DCAA81744A406E.01\",\n  value: { Iron: 50 },\n  id: \"users:45348281\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/data-stores/InventoryStore/entries/users:45348281\",\n  createTime: \"2024-07-22T19:06:55.829412600Z\",\n  revisionId: \"08DCAA81744A406E.0000000001.08DCAA81744A406E.01\",\n  revisionCreateTime: \"2024-07-22T19:06:55.829412600Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA81744A406E.0000000001.08DCAA81744A406E.01\",\n  value: { Iron: 50 },\n  id: \"users:45348281\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to create the entry in."
          },
          {
            "name": "dataStore",
            "type": "string",
            "description": "the name of the datastore to create the entry in."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The optional scope for the dataStore."
          },
          {
            "name": "entryId",
            "type": "string",
            "description": "The ID (key / name) for the entry."
          },
          {
            "name": "value",
            "type": "Schema",
            "description": "The value (content) for the entry."
          },
          {
            "name": "users?",
            "type": "ArrayNonEmptyIfConst<Identifier>",
            "description": "Array metadata containing the IDs of the users this entry is affiliated with."
          },
          {
            "name": "attributes?",
            "type": "Record<any, any>",
            "description": "Key-Value Pairs metadata containing arbitrary data."
          }
        ]
      },
      "standardDataStoreEntry": {
        "description": "Gets an entry from a standard datastore.",
        "tags": {
          "endpoint": "GET /v2/universes/{universe}/data-stores/{data-store}/entries/{entryId}\r\nGET /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries/{entryId}",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst {\n  data,\n  response: { body },\n} = await StandardDataStoresApi_V2.standardDataStoreEntry<InventorySchema>({\n  universeId: 5097539509,\n  dataStore: \"InventoryStore\",\n  entryId: \"users/45348281\",\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get the entry in."
          },
          {
            "name": "dataStore",
            "type": "string",
            "description": "the name of the datastore to get the entry in."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The optional scope of the dataStore."
          },
          {
            "name": "entryId",
            "type": "string",
            "description": "The ID (key / name) of the entry."
          }
        ]
      },
      "deleteStandardDataStoreEntry": {
        "description": "Deletes an entry from a standard datastore.",
        "tags": {
          "endpoint": "DELETE /v2/universes/{universe}/data-stores/{data-store}/entries/{entryId}\r\nDELETE /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries/{entryId}",
          "example": "const { data: success } = await StandardDataStoresApi_V2.deleteStandardDataStoreEntry({\n  universeId: 5097539509,\n  dataStore: \"InventoryStore\",\n  entryId: \"users/45348281\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to delete the entry in."
          },
          {
            "name": "dataStore",
            "type": "string",
            "description": "the name of the datastore to delete the entry in."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The optional scope of the dataStore."
          },
          {
            "name": "entryId",
            "type": "string",
            "description": "The ID (key / name) of the entry."
          }
        ]
      },
      "updateStandardDataStoreEntry": {
        "description": "Updates an entry in a standard datastore.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universe}/data-stores/{data-store}/entries/{entryId}\r\nPATCH /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries/{entryId}",
          "example": "type InventorySchema = { Iron?: number; Gold?: number; Copper?: number; Stone?: number; Wood?: number };\nconst {\n  data,\n  response: { body },\n} = await StandardDataStoresApi_V2.updateStandardDataStoreEntry<InventorySchema>({\n  universeId: 5097539509,\n  dataStore: \"InventoryStore\",\n  entryId: \"users/453482811\",\n  value: { Iron: 50, Gold: 26 },\n  users: [45348281],\n});",
          "exampleData": "{\n  path: \"universes/5097539509/data-stores/InventoryStore/entries/users:453482811\",\n  createTime: \"2024-07-22T19:02:27.811Z\",\n  revisionId: \"08DCAA80D489FD52.0000000003.08DCAA8627CF76E1.01\",\n  revisionCreateTime: \"2024-07-22T19:02:27.811Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA80D489FD52.0000000003.08DCAA8627CF76E1.01\",\n  value: { Iron: 50, Gold: 26 },\n  id: \"users:453482811\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/data-stores/InventoryStore/entries/users:453482811\",\n  createTime: \"2024-07-22T19:02:27.811669Z\",\n  revisionId: \"08DCAA80D489FD52.0000000003.08DCAA8627CF76E1.01\",\n  revisionCreateTime: \"2024-07-22T19:40:35.001520100Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA80D489FD52.0000000003.08DCAA8627CF76E1.01\",\n  value: { Iron: 50, Gold: 26 },\n  id: \"users:453482811\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to update an entry in."
          },
          {
            "name": "dataStore",
            "type": "string",
            "description": "the name of the datastore to update an entry in."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The optional scope of the dataStore."
          },
          {
            "name": "entryId",
            "type": "string",
            "description": "The ID (key / name) of the entry."
          },
          {
            "name": "allowMissing",
            "type": "boolean",
            "description": "If set to true, and the data store entry is not found, a data store entry is created."
          },
          {
            "name": "value",
            "type": "Schema",
            "description": "The value (content) of the entry."
          },
          {
            "name": "users?",
            "type": "ArrayNonEmptyIfConst<Identifier>",
            "description": "Array metadata containing the IDs of the users this entry is affiliated with."
          },
          {
            "name": "attributes?",
            "type": "Record<any, any>",
            "description": "Key-Value Pairs metadata containing arbitrary data."
          }
        ]
      },
      "incrementStandardDatastoreEntry": {
        "description": "Increments an entry in a standard datastore.",
        "tags": {
          "endpoint": "POST /v2/universes/{universe}/data-stores/{data-store}/entries/{entryId}:increment\r\nPOST /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries/{entryId}:increment",
          "example": "const { data: entry } = await StandardDataStoresApi_V2.incrementStandardDatastoreEntry({\n  universeId: 5097539509,\n  dataStore: \"Deaths\",\n  entryId: \"users/45348281\",\n  amount: 3,\n  users: [45348281],\n});",
          "exampleData": "{\n  path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281\",\n  createTime: \"2024-07-22T19:46:42.453Z\",\n  revisionId: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n  revisionCreateTime: \"2024-07-22T19:46:42.453Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n  value: 9,\n  id: \"users:45348281\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281\",\n  createTime: \"2024-07-22T19:46:42.453649200Z\",\n  revisionId: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n  revisionCreateTime: \"2024-07-22T19:50:08.205250100Z\",\n  state: \"ACTIVE\",\n  etag: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n  value: 9,\n  id: \"users:45348281\",\n  users: [\"users/45348281\"],\n  attributes: {},\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to increment an entry in."
          },
          {
            "name": "dataStore",
            "type": "string",
            "description": "the name of the datastore to increment an entry in."
          },
          {
            "name": "scope?",
            "type": "string",
            "description": "The optional scope of the dataStore."
          },
          {
            "name": "entryId",
            "type": "string",
            "description": "The ID (key / name) of the entry."
          },
          {
            "name": "value",
            "type": "🤷",
            "description": "The value (content) of the entry."
          },
          {
            "name": "users?",
            "type": "ArrayNonEmptyIfConst<Identifier>",
            "description": "Array metadata containing the IDs of the users this entry is affiliated with."
          },
          {
            "name": "attributes?",
            "type": "Record<any, any>",
            "description": "Key-Value Pairs metadata containing arbitrary data."
          }
        ]
      },
      "listStandardDataStoreEntryRevisions": {
        "description": "Lists revisions for a standard datastores entries.",
        "tags": {
          "endpoint": "GET /v2/universes/{universe}/data-stores/{data-store}/entries/{entryId}:listRevisions\r\nGET /v2/universes/{universe}/data-stores/{data-store}/scopes/{scope}/entries/{entryId}:listRevisions",
          "example": "const { data: entries } = await StandardDataStoresApi_V2.listStandardDataStoreEntryRevisions({\n  universeId: 5097539509,\n  dataStore: \"Deaths\",\n  entryId: \"users/45348281\",\n});",
          "exampleData": "[\n  {\n    path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n    createTime: \"2024-07-22T19:46:42.453Z\",\n    revisionId: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n    revisionCreateTime: \"2024-07-22T19:46:42.453Z\",\n    state: \"ACTIVE\",\n    etag: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n    id: \"users:45348281@08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n  },\n  {\n    path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n    createTime: \"2024-07-22T19:46:42.453Z\",\n    revisionId: \"08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n    revisionCreateTime: \"2024-07-22T19:46:42.453Z\",\n    state: \"ACTIVE\",\n    etag: \"08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n    id: \"users:45348281@08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n  },\n  {\n    path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n    createTime: \"2024-07-22T19:46:42.453Z\",\n    revisionId: \"08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n    revisionCreateTime: \"2024-07-22T19:46:42.453Z\",\n    state: \"ACTIVE\",\n    etag: \"08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n    id: \"users:45348281@08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n  },\n]\n",
          "exampleRawBody": "{\n  dataStoreEntries: [\n    {\n      path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n      createTime: \"2024-07-22T19:46:42.453649200Z\",\n      revisionId: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n      revisionCreateTime: \"2024-07-22T19:50:08.205250100Z\",\n      state: \"ACTIVE\",\n      etag: \"08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n      id: \"users:45348281@08DCAA8702D435AC.0000000003.08DCAA877D776995.01\",\n    },\n    {\n      path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n      createTime: \"2024-07-22T19:46:42.453649200Z\",\n      revisionId: \"08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n      revisionCreateTime: \"2024-07-22T19:49:30.797636Z\",\n      state: \"ACTIVE\",\n      etag: \"08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n      id: \"users:45348281@08DCAA8702D435AC.0000000002.08DCAA87672B76A8.01\",\n    },\n    {\n      path: \"universes/5097539509/data-stores/Deaths/entries/users:45348281@08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n      createTime: \"2024-07-22T19:46:42.453649200Z\",\n      revisionId: \"08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n      revisionCreateTime: \"2024-07-22T19:46:42.453649200Z\",\n      state: \"ACTIVE\",\n      etag: \"08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n      id: \"users:45348281@08DCAA8702D435AC.0000000001.08DCAA8702D435AC.01\",\n    },\n  ],\n  nextPageToken: \"eyJpbmxpbmVWZXJzaW9uIjpmYWxzZSwibGFzdFZlcnNpb24iOiIwOERDQUE4NzAyRDQzNUFDLjAwMDAwMDAwMDEuMDhEQ0FBODcwMkQ0MzVBQy4wMSIsIkN1cnNvclZlcnNpb24iOjF9\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get data store entry revisions for."
          },
          {
            "name": "dataStore",
            "type": "DataStore",
            "description": "The name of the data store to get entry revisions for,"
          },
          {
            "name": "scope?",
            "type": "Scope",
            "description": "The optional scope for the dataStore."
          },
          {
            "name": "entryId",
            "type": "EntryId",
            "description": "The ID (key / name) for the entry."
          },
          {
            "name": "createdBefore?",
            "type": "ISODateTime | Date",
            "description": "Only include revisions made before (inclusive), this filter is combined with createdAfter."
          },
          {
            "name": "createdAfter?",
            "type": "ISODateTime | Date",
            "description": "Only include revisions made after (inclusive), this filter is combined with createdBefore."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The service might return fewer than the maximum number of revisions. If unspecified, at most 10 revisions are returned. The maximum value is 100 values and higher values are set to 100."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      }
    },
    "subscriptions": {
      "subscriptionInfo": {
        "description": "",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/subscription-products/{subscriptionProductId}/subscriptions/{subscriptionId}",
          "example": "",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe."
          },
          {
            "name": "subscriptionProductId",
            "type": "SubscriptionProductId",
            "description": "The id of the subscription."
          },
          {
            "name": "subscriptionId",
            "type": "SubscriptionId",
            "description": "The Id of the user who subscribed."
          }
        ]
      }
    },
    "userRestrictions": {
      "listRestrictions": {
        "description": "Gets restrictions for a user.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universe}/user-restrictions/{user-restriction}\r\nPATCH /v2/universes/{universeId}/places/{placeId}/user-restrictions/{userId}",
          "example": "const { data: restrictions } = await UserRestrictionsApi.listRestrictions({\n  universeId: 5795192361,\n  placeId: 18210254887,\n  userId: 6193495014,\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/18210254887/user-restrictions/6193495014\",\n  user: \"users/6193495014\",\n  gameJoinRestriction: {\n    active: true,\n    startTime: \"2024-06-25T22:56:58.873Z\",\n    duration: \"31540000s\",\n    privateReason: \"Being a meanie :/\",\n    displayReason: \"Annoying other players.\",\n    excludeAltAccounts: false,\n    inherited: false,\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/18210254887/user-restrictions/6193495014\",\n  user: \"users/6193495014\",\n  gameJoinRestriction: {\n    active: true,\n    startTime: \"2024-06-25T22:56:58.873Z\",\n    duration: \"31540000s\",\n    privateReason: \"Being a meanie :/\",\n    displayReason: \"Annoying other players.\",\n    excludeAltAccounts: false,\n    inherited: false,\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get restrictions for."
          },
          {
            "name": "placeId?",
            "type": "PlaceId",
            "description": "The ID of the place to get restrictions for."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the uset to get restrictions to get."
          }
        ]
      },
      "restrictionForUser": {
        "description": "Gets the active restriction for a user in a given universe.",
        "tags": {
          "endpoint": "GET /cloud/v2/universes/{universeId}/user-restrictions/{userId}",
          "example": "",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get restriction from."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get restriction for."
          }
        ]
      },
      "updateRestrictionsForUser": {
        "description": "Updates restrctions for a user.",
        "tags": {
          "endpoint": "PATCH /v2/universes/{universe}/user-restrictions/{user-restriction}\r\nPATCH /v2/universes/{universeId}/places/{placeId}/user-restrictions/{userId}",
          "example": "import { v4 as uuidv4 } from \"uuid\";\nconst idempotencyKey = uuidv4(),\n  firstSent = new Date();\n\nconst { data: updatedRestrictions } = await UserRestrictionsApi.updateRestrictionsForUser({\n  universeId: 5795192361,\n  placeId: 18210254887,\n  userId: 6193495014,\n  idempotencyKey,\n  firstSent,\n  updatedData: {\n    gameJoinRestriction: {\n      active: true,\n      duration: \"31540000s\", // 1 year.\n      privateReason: \"Being a meanie :/\",\n      displayReason: \"Annoying other players.\",\n      excludeAltAccounts: false,\n    },\n  },\n});",
          "exampleData": "{\n  path: \"universes/5795192361/places/18210254887/user-restrictions/6193495014\",\n  user: \"users/6193495014\",\n  gameJoinRestriction: {\n    active: true,\n    startTime: \"2024-06-25T22:54:39.245Z\",\n    duration: \"31540000s\",\n    privateReason: \"Being a meanie :/\",\n    displayReason: \"Annoying other players.\",\n    excludeAltAccounts: false,\n    inherited: false,\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"universes/5795192361/places/18210254887/user-restrictions/6193495014\",\n  user: \"users/6193495014\",\n  gameJoinRestriction: {\n    active: true,\n    startTime: \"2024-06-25T22:54:39.245Z\",\n    duration: \"31540000s\",\n    privateReason: \"Being a meanie :/\",\n    displayReason: \"Annoying other players.\",\n    excludeAltAccounts: false,\n    inherited: false,\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to set restrictions for."
          },
          {
            "name": "placeId?",
            "type": "PlaceId",
            "description": "The ID of the place to set restrictions for."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the uset to set restrictions to get."
          },
          {
            "name": "updatedData",
            "type": "UpdatedData",
            "description": "The new restrictions."
          },
          {
            "name": "idempotencyKey?",
            "type": "string",
            "description": "The unique key to use for idempotency."
          },
          {
            "name": "firstSent?",
            "type": "Date | ISODateTime",
            "description": "The timestamp at which the first request was sent. If this is further in the past than the lifetime of the idempotency key (which may exceed the annotated minimum lifetime), the server must return an error."
          }
        ]
      },
      "listRestrictionLogs": {
        "description": "Gets a list of restriction logs from a specific universe.",
        "tags": {
          "endpoint": "GET /v2/universes/{universeId}/user-restrictions:listLogs",
          "example": "const { data: logs } = await UserRestrictionsApi.listRestrictionLogs({\n  universeId: 5795192361,\n  placeId: 18210254887,\n  userId: 6193495014,\n});",
          "exampleData": "[\n  {\n    user: \"users/6193495014\",\n    place: \"18210254887\",\n    moderator: { robloxUser: \"45348281\" },\n    createTime: \"2024-06-25T22:56:58.873Z\",\n    active: true,\n    startTime: \"2024-06-25T22:56:58.873Z\",\n    duration: \"31540000s\",\n    privateReason: \"Being a meanie :/\",\n    displayReason: \"Annoying other players.\",\n    excludeAltAccounts: false,\n  },\n]\n",
          "exampleRawBody": "{\n  logs: [\n    {\n      user: \"users/6193495014\",\n      place: \"18210254887\",\n      moderator: { robloxUser: \"45348281\" },\n      createTime: \"2024-06-25T22:56:58.873Z\",\n      active: true,\n      startTime: \"2024-06-25T22:56:58.873Z\",\n      duration: \"31540000s\",\n      privateReason: \"Being a meanie :/\",\n      displayReason: \"Annoying other players.\",\n      excludeAltAccounts: false,\n    },\n  ],\n  nextPageToken: \"id_2zwAAAZBRnd35xBBXeienIm9K54uMH01-RpcT\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get restriction logs for."
          },
          {
            "name": "placeId?",
            "type": "PlaceId",
            "description": "The ID of the place to get restriction logs for."
          },
          {
            "name": "userId?",
            "type": "UserId",
            "description": "The ID of the uset to get restriction logs to get."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum number of items to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "Provide to request the next set of data."
          }
        ]
      }
    },
    "users": {
      "userInfo": {
        "description": "Gets information about a user from their id.",
        "tags": {
          "endpoint": "GET /v2/users/{userId}",
          "example": "const { data: userInfo } = await UsersApi.userInfo({ userId: 45348281 });",
          "exampleData": "{\n  path: \"users/45348281\",\n  createTime: \"2013-07-13T07:50:00.083Z\",\n  id: \"45348281\",\n  name: \"MightyPart\",\n  displayName: \"Mighty\",\n  about: \"football nothing to is push sudden national\",\n  locale: \"en_us\",\n  premium: true,\n  idVerified: true,\n  socialNetworkProfiles: { visibility: \"EVERYONE\" },\n}\n",
          "exampleRawBody": "{\n  path: \"users/45348281\",\n  createTime: \"2013-07-13T07:50:00.083Z\",\n  id: \"45348281\",\n  name: \"MightyPart\",\n  displayName: \"Mighty\",\n  about: \"football nothing to is push sudden national\",\n  locale: \"en_us\",\n  premium: true,\n  idVerified: true,\n  socialNetworkProfiles: {\n    facebook: \"\",\n    twitter: \"\",\n    youtube: \"\",\n    twitch: \"\",\n    guilded: \"\",\n    visibility: \"EVERYONE\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get detailed info about."
          }
        ]
      },
      "userThumbnail": {
        "description": "Gets a users avatar.",
        "tags": {
          "endpoint": "GET /v2/users/{userId}:generateThumbnail",
          "example": "const { data: userInfo } = await UsersApi.userInfo({ userId: 45348281 });",
          "exampleData": "{\n  path: \"users/45348281/operations/eyJOb25jZSI6ImM5ZGZmN2E3OTQ1ZTQxYTc4M2E3OGY4Nzk2ZTYwOTczIiwiVHlwZSI6IkdlbmVyYXRlVXNlclRodW1ibmFpbFJlcXVlc3QiLCJQYXRoIjoidXNlcnMvNDUzNDgyODEiLCJTaXplIjoiMCIsIkZvcm1hdCI6IjAiLCJTaGFwZSI6IjAifQ==\",\n  done: true,\n  response: {\n    \"@type\": \"apis.roblox.com/roblox.open_cloud.cloud.v2.GenerateUserThumbnailResponse\",\n    imageUri: \"https://tr.rbxcdn.com/30DAY-AvatarHeadshot-8D297BB79DBA963A48A765F78DFC5D1B-Png/420/420/AvatarHeadshot/Png/isCircular\",\n  },\n}\n",
          "exampleRawBody": "{\n  path: \"users/45348281/operations/eyJOb25jZSI6ImM5ZGZmN2E3OTQ1ZTQxYTc4M2E3OGY4Nzk2ZTYwOTczIiwiVHlwZSI6IkdlbmVyYXRlVXNlclRodW1ibmFpbFJlcXVlc3QiLCJQYXRoIjoidXNlcnMvNDUzNDgyODEiLCJTaXplIjoiMCIsIkZvcm1hdCI6IjAiLCJTaGFwZSI6IjAifQ==\",\n  done: true,\n  response: {\n    \"@type\": \"apis.roblox.com/roblox.open_cloud.cloud.v2.GenerateUserThumbnailResponse\",\n    imageUri: \"https://tr.rbxcdn.com/30DAY-AvatarHeadshot-8D297BB79DBA963A48A765F78DFC5D1B-Png/420/420/AvatarHeadshot/Png/isCircular\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get the thumbnail for."
          },
          {
            "name": "size?",
            "type": "UserThumbnailSize",
            "description": "The size of the thumbnail to be returned."
          },
          {
            "name": "format?",
            "type": "\"PNG\" | \"JPEG\"",
            "description": "The format of the thumbnail to be returned."
          },
          {
            "name": "shape?",
            "type": "\"ROUND\" | \"SQUARE\"",
            "description": "The shape of the thumbnail to be returned."
          }
        ]
      },
      "sendNotificationToUser": {
        "description": "Sends a notification to a user.",
        "tags": {
          "endpoint": "POST /v2/users/{userId}/notifications",
          "example": "const { data: notification } = await UsersApi.sendNotificationToUser<Parameters>({\n  universeId: 1685831367,\n  userId: 45348281,\n  notificationData: {\n    messageId: \"f70b6a49-a5e5-a048-b1a4-10f9e930614f\",\n    parameters: { questsLeft: \"15\", custom: \"lorem ipsum dolor sit amet\" },\n    launchData: \"joined from foobar\",\n    analyticsCategory: \"foobar\",\n  },\n});",
          "exampleData": "{\n  path: \"users/45348281/notifications/05268fb7-3a73-4d07-9972-65e7a6063892\",\n  id: \"05268fb7-3a73-4d07-9972-65e7a6063892\",\n}\n",
          "exampleRawBody": "{\n  path: \"users/45348281/notifications/05268fb7-3a73-4d07-9972-65e7a6063892\",\n  id: \"05268fb7-3a73-4d07-9972-65e7a6063892\",\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user send the notification to."
          },
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to send the notification from."
          },
          {
            "name": "notificationData",
            "type": "SendNotificationToUser_NotificationData<Parameters>",
            "description": "The data of the notification."
          }
        ]
      }
    }
  },
  "classic": {
    "badges": {
      "badgeInfo": {
        "description": "Gets information for a badge.",
        "tags": {
          "endpoint": "GET /v1/badges/{badgeId}",
          "example": "const { data: badgeInfo } = await ClassicBadgesApi.badgeInfo({ badgeId: 2124533401 });",
          "exampleData": "{\n  id: 2124533401,\n  name: \"Tutorial Done\",\n  description: \"Tutorial Lol\",\n  displayName: \"Tutorial Done\",\n  displayDescription: \"Tutorial Lol\",\n  enabled: true,\n  iconImageId: 5316501478,\n  displayIconImageId: 5316501478,\n  created: \"2020-05-05T08:20:10.653Z\",\n  updated: \"2023-08-26T12:43:15.280Z\",\n  statistics: {\n    pastDayAwardedCount: 0,\n    awardedCount: 394,\n    winRatePercentage: 0,\n  },\n  awardingUniverse: {\n    id: 1685831367,\n    name: \"RoCamping\",\n    rootPlaceId: 4922741943,\n  },\n}\n",
          "exampleRawBody": "{\n  id: 2124533401,\n  name: \"Tutorial Done\",\n  description: \"Tutorial Lol\",\n  displayName: \"Tutorial Done\",\n  displayDescription: \"Tutorial Lol\",\n  enabled: true,\n  iconImageId: 5316501478,\n  displayIconImageId: 5316501478,\n  created: \"2020-05-05T08:20:10.653Z\",\n  updated: \"2023-08-26T12:43:15.280Z\",\n  statistics: {\n    pastDayAwardedCount: 0,\n    awardedCount: 394,\n    winRatePercentage: 0,\n  },\n  awardingUniverse: {\n    id: 1685831367,\n    name: \"RoCamping\",\n    rootPlaceId: 4922741943,\n  },\n}\n"
        },
        "params": [
          {
            "name": "badgeId",
            "type": "BadgeId",
            "description": "The ID of the badge to get information for."
          }
        ]
      },
      "updateBadge": {
        "description": "Updates a badge.",
        "tags": {
          "endpoint": "PATCH /v1/badges/{badgeId}",
          "example": "const { data: success } = await ClassicBadgesApi.updateBadge({ badgeId: 2124533401, description: \"hello\" });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "badgeId",
            "type": "Identifier",
            "description": "The ID of the badge to update."
          },
          {
            "name": "name?",
            "type": "string",
            "description": "The new name for the badge."
          },
          {
            "name": "description?",
            "type": "string",
            "description": "The new description for the badge."
          },
          {
            "name": "enabled?",
            "type": "boolean",
            "description": "If the badge is to enabled."
          }
        ]
      },
      "badgesMetadata": {
        "description": "Gets metadata about the badges system.",
        "tags": {
          "endpoint": "GET /v1/badges/metadata",
          "example": "const { data: metadata } = await ClassicBadgesApi.badgesMetadata();",
          "exampleData": "{\n  badgeCreationPrice: 100,\n  maxBadgeNameLength: 50,\n  maxBadgeDescriptionLength: 1000,\n}\n",
          "exampleRawBody": "{\n  badgeCreationPrice: 100,\n  maxBadgeNameLength: 50,\n  maxBadgeDescriptionLength: 1000,\n}\n"
        },
        "params": []
      },
      "badgesForUniverse": {
        "description": "Gets badges for a specific universe.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/badges",
          "example": "const { data: badges } = await ClassicBadgesApi.badgesForUniverse({ universeId: 1685831367 });",
          "exampleData": "[\n  {\n    id: 2124533401,\n    name: \"Tutorial Done\",\n    description: \"true\",\n    displayName: \"Tutorial Done\",\n    displayDescription: \"true\",\n    enabled: true,\n    iconImageId: 5316501478,\n    displayIconImageId: 5316501478,\n    created: \"2020-05-05T08:20:10.653Z\",\n    updated: \"2024-07-16T22:34:44.021Z\",\n    statistics: {\n      pastDayAwardedCount: 0,\n      awardedCount: 394,\n      winRatePercentage: 0,\n    },\n    awardingUniverse: {\n      id: 1685831367,\n      name: \"RoCamping\",\n      rootPlaceId: 4922741943,\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJrZXkiOiJpZF8yendBQUFYSGo2OEVkem42aHpwayIsInNvcnRPcmRlciI6IkFzYyIsInBhZ2luZ0RpcmVjdGlvbiI6IkZvcndhcmQiLCJwYWdlTnVtYmVyIjoyLCJkaXNjcmltaW5hdG9yIjoidW5pdmVyc2VJZDoxNjg1ODMxMzY3IiwiY291bnQiOjEwfQplMzk4ODQzNTg5NGYxNzU4MTk1YmVlNWFhMDE5NTI1MmJiMjdhZDRiYzU5YzE3NjNjNjg3M2UxYmExNDdkMWZh\",\n  data: [\n    {\n      id: 2124533401,\n      name: \"Tutorial Done\",\n      description: \"true\",\n      displayName: \"Tutorial Done\",\n      displayDescription: \"true\",\n      enabled: true,\n      iconImageId: 5316501478,\n      displayIconImageId: 5316501478,\n      created: \"2020-05-05T08:20:10.653+00:00\",\n      updated: \"2024-07-16T22:34:44.021+00:00\",\n      statistics: {\n        pastDayAwardedCount: 0,\n        awardedCount: 394,\n        winRatePercentage: 0,\n      },\n      awardingUniverse: {\n        id: 1685831367,\n        name: \"RoCamping\",\n        rootPlaceId: 4922741943,\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get badges from."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "freeBadgesLeftForUniverse": {
        "description": "Gets the number of free badges left for the current UTC day by their awarding game.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/free-badges-quota",
          "example": "const { data: freeBadgesLeft } = await ClassicBadgesApi.freeBadgesLeftForUniverse({ universeId: 1685831367 });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get free badges for."
          }
        ]
      },
      "userBadges": {
        "description": "Gets a list of badges a user has been awarded",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/badges",
          "example": "const { data: badges } = await ClassicBadgesApi.userBadges({ userId: 45348281 });",
          "exampleData": "[\n  {\n    id: 2124533401,\n    name: \"Tutorial Done\",\n    description: \"true\",\n    displayName: \"Tutorial Done\",\n    displayDescription: \"true\",\n    enabled: true,\n    iconImageId: 5316501478,\n    displayIconImageId: 5316501478,\n    created: \"2020-05-05T08:20:10.653Z\",\n    updated: \"2024-07-16T22:34:44.021Z\",\n    statistics: {\n      pastDayAwardedCount: 0,\n      awardedCount: 394,\n      winRatePercentage: 0,\n    },\n    awardingUniverse: {\n      id: 1685831367,\n      name: \"RoCamping\",\n      rootPlaceId: 4922741943,\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJrZXkiOiJpZF8yendBQUFYSGo2OEVkem42aHpwayIsInNvcnRPcmRlciI6IkFzYyIsInBhZ2luZ0RpcmVjdGlvbiI6IkZvcndhcmQiLCJwYWdlTnVtYmVyIjoyLCJkaXNjcmltaW5hdG9yIjoidW5pdmVyc2VJZDoxNjg1ODMxMzY3IiwiY291bnQiOjEwfQplMzk4ODQzNTg5NGYxNzU4MTk1YmVlNWFhMDE5NTI1MmJiMjdhZDRiYzU5YzE3NjNjNjg3M2UxYmExNDdkMWZh\",\n  data: [\n    {\n      id: 2124533401,\n      name: \"Tutorial Done\",\n      description: \"true\",\n      displayName: \"Tutorial Done\",\n      displayDescription: \"true\",\n      enabled: true,\n      iconImageId: 5316501478,\n      displayIconImageId: 5316501478,\n      created: \"2020-05-05T08:20:10.653+00:00\",\n      updated: \"2024-07-16T22:34:44.021+00:00\",\n      statistics: {\n        pastDayAwardedCount: 0,\n        awardedCount: 394,\n        winRatePercentage: 0,\n      },\n      awardingUniverse: {\n        id: 1685831367,\n        name: \"RoCamping\",\n        rootPlaceId: 4922741943,\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get badges for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "badgeAwardedDateForUser": {
        "description": "Gets timestamp for when a single badge was awarded to a user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/badges/{badgeId}/awarded-date",
          "example": "const { data: awardDate } = await ClassicBadgesApi.badgeAwardedDateForUser({ badgeId: 2124533401, userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": "{ badgeId: 2124533401, awardedDate: \"2020-11-15T18:51:30.604064Z\" }\n"
        },
        "params": [
          {
            "name": "badgeId",
            "type": "BadgeId",
            "description": "The ID of the badge to get award date from."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of thw user to get award date for."
          }
        ]
      },
      "badgesAwardedDatesForUser": {
        "description": "Gets timestamp for when multiple badges were awarded to a user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/badges/awarded-dates",
          "example": "const { data: awardDates } = await ClassicBadgesApi.badgesAwardedDatesForUser({\n  badgeIds: [2124533401],\n  userId: 45348281,\n});",
          "exampleData": "{ \"2124533401\": \"2020-11-15T18:51:30.604Z\" }\n",
          "exampleRawBody": "{\n  data: [\n    { badgeId: 2124533401, awardedDate: \"2020-11-15T18:51:30.604064Z\" },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "badgeIds",
            "type": "ArrayNonEmptyIfConst<BadgeId>",
            "description": "The IDs of the badges to get award dates from."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of thw user to get award date for."
          }
        ]
      },
      "removeBadgeFromUser": {
        "description": "Removes a specific badge from a specific user.",
        "tags": {
          "endpoint": "DELETE /v1/user/{userId}/badges/{badgeId}",
          "example": "const { data: success } = await ClassicBadgesApi.removeBadgeFromUser({ badgeId: 2124533401, userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "badgeId",
            "type": "Identifier",
            "description": "The ID of the badge to remove from the user."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to remove the badge from."
          }
        ]
      },
      "authenticatedUserRemoveBadge": {
        "description": "Removes a specific badge from the authenticated user.",
        "tags": {
          "endpoint": "DELETE /v1/user/badges/{badgeId}",
          "example": "const { data: success } = await ClassicBadgesApi.authenticatedUserRemoveBadge({ badgeId: 2124533401 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "badgeId",
            "type": "Identifier",
            "description": "The ID of the badge to remove from the authenticated user."
          }
        ]
      }
    },
    "catalog": {
      "assetIdsToCatalogCategoryIds": {
        "description": "Lists asset IDs and their corresponding catalog category ID.",
        "tags": {
          "endpoint": "GET /v1/asset-to-category",
          "example": "const { data: ids } = await ClassicCatalogApi.assetIdsToCatalogCategoryIds();",
          "exampleData": "{\n  \"2\": 3,\n  \"3\": 9,\n  \"8\": 11,\n  \"10\": 6,\n  \"11\": 3,\n  \"12\": 3,\n  \"13\": 8,\n  \"17\": 4,\n  \"18\": 4,\n  \"19\": 11,\n  \"38\": 7,\n  \"40\": 10,\n  \"41\": 11,\n  \"42\": 11,\n  \"43\": 11,\n  \"44\": 11,\n  \"45\": 11,\n  \"46\": 11,\n  \"47\": 11,\n  \"48\": 12,\n  \"50\": 12,\n  \"51\": 12,\n  \"52\": 12,\n  \"53\": 12,\n  \"54\": 12,\n  \"55\": 12,\n  \"61\": 12,\n  \"62\": 14,\n  \"64\": 3,\n  \"65\": 3,\n  \"66\": 3,\n  \"67\": 3,\n  \"68\": 3,\n  \"69\": 3,\n  \"70\": 3,\n  \"71\": 3,\n  \"72\": 3,\n}\n",
          "exampleRawBody": "{\n  \"2\": 3,\n  \"3\": 9,\n  \"8\": 11,\n  \"10\": 6,\n  \"11\": 3,\n  \"12\": 3,\n  \"13\": 8,\n  \"17\": 4,\n  \"18\": 4,\n  \"19\": 11,\n  \"38\": 7,\n  \"40\": 10,\n  \"41\": 11,\n  \"42\": 11,\n  \"43\": 11,\n  \"44\": 11,\n  \"45\": 11,\n  \"46\": 11,\n  \"47\": 11,\n  \"48\": 12,\n  \"50\": 12,\n  \"51\": 12,\n  \"52\": 12,\n  \"53\": 12,\n  \"54\": 12,\n  \"55\": 12,\n  \"61\": 12,\n  \"62\": 14,\n  \"64\": 3,\n  \"65\": 3,\n  \"66\": 3,\n  \"67\": 3,\n  \"68\": 3,\n  \"69\": 3,\n  \"70\": 3,\n  \"71\": 3,\n  \"72\": 3,\n}\n"
        },
        "params": []
      },
      "assetIdsToCatalogSubCategoryIds": {
        "description": "Lists asset IDs and their corresponding catalog sub category ID.",
        "tags": {
          "endpoint": "GET /v1/asset-to-category",
          "example": "const { data: ids } = await ClassicCatalogApi.assetIdsToCatalogSubCategoryIds();",
          "exampleData": "{\n  \"2\": 55,\n  \"3\": 16,\n  \"8\": 54,\n  \"10\": 6,\n  \"11\": 56,\n  \"12\": 57,\n  \"13\": 8,\n  \"17\": 15,\n  \"18\": 10,\n  \"19\": 5,\n  \"38\": 7,\n  \"40\": 18,\n  \"41\": 20,\n  \"42\": 21,\n  \"43\": 22,\n  \"44\": 23,\n  \"45\": 24,\n  \"46\": 25,\n  \"47\": 26,\n  \"48\": 28,\n  \"50\": 30,\n  \"51\": 31,\n  \"52\": 32,\n  \"53\": 33,\n  \"54\": 34,\n  \"55\": 35,\n  \"61\": 39,\n  \"62\": 41,\n  \"64\": 58,\n  \"65\": 59,\n  \"66\": 60,\n  \"67\": 61,\n  \"68\": 62,\n  \"69\": 63,\n  \"70\": 64,\n  \"71\": 64,\n  \"72\": 65,\n}\n",
          "exampleRawBody": "{\n  \"2\": 55,\n  \"3\": 16,\n  \"8\": 54,\n  \"10\": 6,\n  \"11\": 56,\n  \"12\": 57,\n  \"13\": 8,\n  \"17\": 15,\n  \"18\": 10,\n  \"19\": 5,\n  \"38\": 7,\n  \"40\": 18,\n  \"41\": 20,\n  \"42\": 21,\n  \"43\": 22,\n  \"44\": 23,\n  \"45\": 24,\n  \"46\": 25,\n  \"47\": 26,\n  \"48\": 28,\n  \"50\": 30,\n  \"51\": 31,\n  \"52\": 32,\n  \"53\": 33,\n  \"54\": 34,\n  \"55\": 35,\n  \"61\": 39,\n  \"62\": 41,\n  \"64\": 58,\n  \"65\": 59,\n  \"66\": 60,\n  \"67\": 61,\n  \"68\": 62,\n  \"69\": 63,\n  \"70\": 64,\n  \"71\": 64,\n  \"72\": 65,\n}\n"
        },
        "params": []
      },
      "catalogCategories": {
        "description": "Lists catalog categories and their corresponding ID.",
        "tags": {
          "endpoint": "GET /v1/asset-to-category",
          "example": "const { data: categories } = await ClassicCatalogApi.catalogCategories();",
          "exampleData": "{\n  Featured: 0,\n  All: 1,\n  Collectibles: 2,\n  Clothing: 3,\n  BodyParts: 4,\n  Gear: 5,\n  Models: 6,\n  Plugins: 7,\n  Decals: 8,\n  Audio: 9,\n  Meshes: 10,\n  Accessories: 11,\n  AvatarAnimations: 12,\n  CommunityCreations: 13,\n  Video: 14,\n  Recommended: 15,\n  LayeredClothing: 16,\n  Characters: 17,\n}\n",
          "exampleRawBody": "{\n  Featured: 0,\n  All: 1,\n  Collectibles: 2,\n  Clothing: 3,\n  BodyParts: 4,\n  Gear: 5,\n  Models: 6,\n  Plugins: 7,\n  Decals: 8,\n  Audio: 9,\n  Meshes: 10,\n  Accessories: 11,\n  AvatarAnimations: 12,\n  CommunityCreations: 13,\n  Video: 14,\n  Recommended: 15,\n  LayeredClothing: 16,\n  Characters: 17,\n}\n"
        },
        "params": []
      },
      "catalogSubCategories": {
        "description": "Lists catalog sub categories and their corresponding ID.",
        "tags": {
          "endpoint": "GET /v1/asset-to-category",
          "example": "const { data: categories } = await ClassicCatalogApi.catalogCategories();",
          "exampleData": "{\n  Featured: 0,\n  All: 1,\n  Collectibles: 2,\n  Clothing: 3,\n  BodyParts: 4,\n  Gear: 5,\n  Models: 6,\n  Plugins: 7,\n  Decals: 8,\n  Hats: 9,\n  Faces: 10,\n  Packages: 11,\n  Shirts: 12,\n  Tshirts: 13,\n  Pants: 14,\n  Heads: 15,\n  Audio: 16,\n  RobloxCreated: 17,\n  Meshes: 18,\n  Accessories: 19,\n  HairAccessories: 20,\n  FaceAccessories: 21,\n  NeckAccessories: 22,\n  ShoulderAccessories: 23,\n  FrontAccessories: 24,\n  BackAccessories: 25,\n  WaistAccessories: 26,\n  AvatarAnimations: 27,\n  ClimbAnimations: 28,\n  FallAnimations: 30,\n  IdleAnimations: 31,\n  JumpAnimations: 32,\n  RunAnimations: 33,\n  SwimAnimations: 34,\n  WalkAnimations: 35,\n  AnimationPackage: 36,\n  BodyPartsBundles: 37,\n  AnimationBundles: 38,\n  EmoteAnimations: 39,\n  CommunityCreations: 40,\n  Video: 41,\n  Recommended: 51,\n  LayeredClothing: 52,\n  AllBundles: 53,\n  HeadAccessories: 54,\n  ClassicTShirts: 55,\n  ClassicShirts: 56,\n  ClassicPants: 57,\n  TShirtAccessories: 58,\n  ShirtAccessories: 59,\n  PantsAccessories: 60,\n  JacketAccessories: 61,\n  SweaterAccessories: 62,\n  ShortsAccessories: 63,\n  ShoesBundles: 64,\n  DressSkirtAccessories: 65,\n  DynamicHeads: 66,\n}\n",
          "exampleRawBody": "{\n  Featured: 0,\n  All: 1,\n  Collectibles: 2,\n  Clothing: 3,\n  BodyParts: 4,\n  Gear: 5,\n  Models: 6,\n  Plugins: 7,\n  Decals: 8,\n  Hats: 9,\n  Faces: 10,\n  Packages: 11,\n  Shirts: 12,\n  Tshirts: 13,\n  Pants: 14,\n  Heads: 15,\n  Audio: 16,\n  RobloxCreated: 17,\n  Meshes: 18,\n  Accessories: 19,\n  HairAccessories: 20,\n  FaceAccessories: 21,\n  NeckAccessories: 22,\n  ShoulderAccessories: 23,\n  FrontAccessories: 24,\n  BackAccessories: 25,\n  WaistAccessories: 26,\n  AvatarAnimations: 27,\n  ClimbAnimations: 28,\n  FallAnimations: 30,\n  IdleAnimations: 31,\n  JumpAnimations: 32,\n  RunAnimations: 33,\n  SwimAnimations: 34,\n  WalkAnimations: 35,\n  AnimationPackage: 36,\n  BodyPartsBundles: 37,\n  AnimationBundles: 38,\n  EmoteAnimations: 39,\n  CommunityCreations: 40,\n  Video: 41,\n  Recommended: 51,\n  LayeredClothing: 52,\n  AllBundles: 53,\n  HeadAccessories: 54,\n  ClassicTShirts: 55,\n  ClassicShirts: 56,\n  ClassicPants: 57,\n  TShirtAccessories: 58,\n  ShirtAccessories: 59,\n  PantsAccessories: 60,\n  JacketAccessories: 61,\n  SweaterAccessories: 62,\n  ShortsAccessories: 63,\n  ShoesBundles: 64,\n  DressSkirtAccessories: 65,\n  DynamicHeads: 66,\n}\n"
        },
        "params": []
      },
      "bundlesAssetIsIn": {
        "description": "Lists bundles a particular asset belongs to.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/bundles",
          "example": "const { data: bundles } = await ClassicCatalogApi.bundlesAssetIsIn({ assetId: 2608539495 });",
          "exampleData": "[\n  {\n    id: 429,\n    name: \"Magma Fiend\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    bundleType: \"BodyParts\",\n    items: [\n      { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n      { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n      { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n      { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n      { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n      { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n      { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n      { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n      { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n      { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n      { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n      { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n      { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n      { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n      { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n      { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n    ],\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n    product: {\n      id: 7219806593957530,\n      type: \"productType\",\n      isPublicDomain: false,\n      isForSale: true,\n      priceInRobux: 300,\n      isFree: false,\n      noPriceText: null,\n    },\n    collectibleItemDetail: {\n      collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n      collectibleProductId: null,\n      price: 300,\n      lowestPrice: 300,\n      lowestResalePrice: 0,\n      totalQuantity: 0,\n      unitsAvailable: 0,\n      saleLocation: {\n        saleLocationType: \"ShopAndAllExperiences\",\n        saleLocationTypeId: 5,\n        universeIds: [],\n        enabledUniverseIds: [],\n      },\n      hasResellers: false,\n      saleStatus: \"OnSale\",\n      quantityLimitPerUser: null,\n      offSaleDeadline: null,\n      collectibleItemType: \"NonLimited\",\n      lowestAvailableResaleProductId: null,\n      lowestAvailableResaleItemInstanceId: null,\n      resaleRestriction: \"Disabled\",\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      id: 429,\n      name: \"Magma Fiend\",\n      description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n      bundleType: \"BodyParts\",\n      items: [\n        { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n        { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n        { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n        { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n        { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n        { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n        { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n        { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n        { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n        { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n        { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n        { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n        { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n        { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n        { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n        { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n      ],\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n      product: {\n        id: 7219806593957530,\n        type: \"productType\",\n        isPublicDomain: false,\n        isForSale: true,\n        priceInRobux: 300,\n        isFree: false,\n        noPriceText: null,\n      },\n      collectibleItemDetail: {\n        collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n        collectibleProductId: \"85283800-cf57-4870-9a02-141945b9cbfd\",\n        price: 300,\n        lowestPrice: 300,\n        lowestResalePrice: 0,\n        totalQuantity: 0,\n        unitsAvailable: 0,\n        saleLocation: {\n          saleLocationType: \"ShopAndAllExperiences\",\n          saleLocationTypeId: 5,\n          universeIds: [],\n          enabledUniverseIds: [],\n        },\n        hasResellers: false,\n        saleStatus: \"OnSale\",\n        quantityLimitPerUser: null,\n        offSaleDeadline: null,\n        collectibleItemType: \"NonLimited\",\n        lowestAvailableResaleProductId: null,\n        lowestAvailableResaleItemInstanceId: null,\n        resaleRestriction: \"Disabled\",\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to get bundles for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "bundleInfo": {
        "description": "Gets information about a bundle.",
        "tags": {
          "endpoint": "GET /v1/bundles/{bundleId}/details",
          "example": "const { data: bundle } = await ClassicCatalogApi.bundleInfo({ bundleId: 429 });",
          "exampleData": "{\n  id: 429,\n  name: \"Magma Fiend\",\n  description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n  bundleType: \"BodyParts\",\n  items: [\n    { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n    { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n    { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n    { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n    { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n    { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n    { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n    { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n    { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n    { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n    { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n    { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n    { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n    { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n    { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n    { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n  ],\n  creator: { id: 1, name: \"Roblox\", type: \"User\", hasVerifiedBadge: true },\n  product: {\n    id: 7219806593957530,\n    type: \"productType\",\n    isPublicDomain: false,\n    isForSale: true,\n    priceInRobux: 300,\n    isFree: false,\n    noPriceText: null,\n  },\n  collectibleItemDetail: {\n    collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n    collectibleProductId: null,\n    price: 300,\n    lowestPrice: 300,\n    lowestResalePrice: 0,\n    totalQuantity: 0,\n    unitsAvailable: 0,\n    saleLocation: {\n      saleLocationType: \"ShopAndAllExperiences\",\n      saleLocationTypeId: 5,\n      universeIds: [],\n      enabledUniverseIds: [],\n    },\n    hasResellers: false,\n    saleStatus: \"OnSale\",\n    quantityLimitPerUser: null,\n    offSaleDeadline: null,\n    collectibleItemType: \"NonLimited\",\n    lowestAvailableResaleProductId: null,\n    lowestAvailableResaleItemInstanceId: null,\n    resaleRestriction: \"Disabled\",\n  },\n}\n",
          "exampleRawBody": "{\n  id: 429,\n  name: \"Magma Fiend\",\n  description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n  bundleType: \"BodyParts\",\n  items: [\n    { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n    { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n    { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n    { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n    { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n    { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n    { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n    { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n    { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n    { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n    { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n    { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n    { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n    { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n    { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n    { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n  ],\n  creator: { id: 1, name: \"Roblox\", type: \"User\", hasVerifiedBadge: true },\n  product: {\n    id: 7219806593957530,\n    type: \"productType\",\n    isPublicDomain: false,\n    isForSale: true,\n    priceInRobux: 300,\n    isFree: false,\n    noPriceText: null,\n  },\n  collectibleItemDetail: {\n    collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n    collectibleProductId: \"85283800-cf57-4870-9a02-141945b9cbfd\",\n    price: 300,\n    lowestPrice: 300,\n    lowestResalePrice: 0,\n    totalQuantity: 0,\n    unitsAvailable: 0,\n    saleLocation: {\n      saleLocationType: \"ShopAndAllExperiences\",\n      saleLocationTypeId: 5,\n      universeIds: [],\n      enabledUniverseIds: [],\n    },\n    hasResellers: false,\n    saleStatus: \"OnSale\",\n    quantityLimitPerUser: null,\n    offSaleDeadline: null,\n    collectibleItemType: \"NonLimited\",\n    lowestAvailableResaleProductId: null,\n    lowestAvailableResaleItemInstanceId: null,\n    resaleRestriction: \"Disabled\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "bundleId",
            "type": "BundleId",
            "description": "The ID of the bundle to get information about."
          }
        ]
      },
      "recommendationsForBundle": {
        "description": "Gets recommendations for a specific bundle.",
        "tags": {
          "endpoint": "GET /v1/bundles/{bundleId}/recommendations",
          "example": "const { data: bundles } = await ClassicCatalogApi.recommendationsForBundle({ bundleId: 429, amount: 1 });",
          "exampleData": "[\n  {\n    id: 598,\n    name: \"Elemental Crystal Golem\",\n    description: \"The light of an Elemental is controlled by its summoner, so its pretty much like a giant glowing mood ring. \",\n    bundleType: \"BodyParts\",\n    items: [\n      {\n        id: 4504227797,\n        name: \"Elemental Crystal Golem - Left Arm\",\n        type: \"Asset\",\n      },\n      {\n        id: 4504228958,\n        name: \"Elemental Crystal Golem - Left Leg\",\n        type: \"Asset\",\n      },\n      {\n        id: 4504228453,\n        name: \"Elemental Crystal Golem - Right Arm\",\n        type: \"Asset\",\n      },\n      {\n        id: 4504229658,\n        name: \"Elemental Crystal Golem - Right Leg\",\n        type: \"Asset\",\n      },\n      {\n        id: 4504230246,\n        name: \"Elemental Crystal Golem - Torso\",\n        type: \"Asset\",\n      },\n      {\n        id: 4504231783,\n        name: \"Elemental Crystal Golem - Shoulder Rock\",\n        type: \"Asset\",\n      },\n      { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n      { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n      { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n      { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n      { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n      { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n      { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n      {\n        id: 1791810588,\n        name: \"Elemental Crystal Golem\",\n        type: \"UserOutfit\",\n      },\n      {\n        id: 15057738572,\n        name: \"Elemental Crystal Golem - Head\",\n        type: \"Asset\",\n      },\n      { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n      {\n        id: 23452708388,\n        name: \"Elemental Crystal Golem - Head\",\n        type: \"UserOutfit\",\n      },\n    ],\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n    product: {\n      id: 1066235020906534,\n      type: \"productType\",\n      isPublicDomain: false,\n      isForSale: true,\n      priceInRobux: 400,\n      isFree: false,\n      noPriceText: null,\n    },\n    collectibleItemDetail: {\n      collectibleItemId: \"5529c928-ca35-4fba-91d8-9b63f81a1ae2\",\n      collectibleProductId: null,\n      price: 400,\n      lowestPrice: 400,\n      lowestResalePrice: 0,\n      totalQuantity: 0,\n      unitsAvailable: 0,\n      saleLocation: {\n        saleLocationType: \"ShopAndAllExperiences\",\n        saleLocationTypeId: 5,\n        universeIds: [],\n        enabledUniverseIds: [],\n      },\n      hasResellers: false,\n      saleStatus: \"OnSale\",\n      quantityLimitPerUser: null,\n      offSaleDeadline: null,\n      collectibleItemType: \"NonLimited\",\n      lowestAvailableResaleProductId: null,\n      lowestAvailableResaleItemInstanceId: null,\n      resaleRestriction: \"Disabled\",\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 598,\n      name: \"Elemental Crystal Golem\",\n      description: \"The light of an Elemental is controlled by its summoner, so its pretty much like a giant glowing mood ring. \",\n      bundleType: \"BodyParts\",\n      items: [\n        {\n          id: 4504227797,\n          name: \"Elemental Crystal Golem - Left Arm\",\n          type: \"Asset\",\n        },\n        {\n          id: 4504228958,\n          name: \"Elemental Crystal Golem - Left Leg\",\n          type: \"Asset\",\n        },\n        {\n          id: 4504228453,\n          name: \"Elemental Crystal Golem - Right Arm\",\n          type: \"Asset\",\n        },\n        {\n          id: 4504229658,\n          name: \"Elemental Crystal Golem - Right Leg\",\n          type: \"Asset\",\n        },\n        {\n          id: 4504230246,\n          name: \"Elemental Crystal Golem - Torso\",\n          type: \"Asset\",\n        },\n        {\n          id: 4504231783,\n          name: \"Elemental Crystal Golem - Shoulder Rock\",\n          type: \"Asset\",\n        },\n        { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n        { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n        { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n        { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n        { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n        { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n        { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n        {\n          id: 1791810588,\n          name: \"Elemental Crystal Golem\",\n          type: \"UserOutfit\",\n        },\n        {\n          id: 15057738572,\n          name: \"Elemental Crystal Golem - Head\",\n          type: \"Asset\",\n        },\n        { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n        {\n          id: 23452708388,\n          name: \"Elemental Crystal Golem - Head\",\n          type: \"UserOutfit\",\n        },\n      ],\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n      product: {\n        id: 1066235020906534,\n        type: \"productType\",\n        isPublicDomain: false,\n        isForSale: true,\n        priceInRobux: 400,\n        isFree: false,\n        noPriceText: null,\n      },\n      collectibleItemDetail: {\n        collectibleItemId: \"5529c928-ca35-4fba-91d8-9b63f81a1ae2\",\n        collectibleProductId: \"b503d9a7-c446-4e16-90ab-644c272e8543\",\n        price: 400,\n        lowestPrice: 400,\n        lowestResalePrice: 0,\n        totalQuantity: 0,\n        unitsAvailable: 0,\n        saleLocation: {\n          saleLocationType: \"ShopAndAllExperiences\",\n          saleLocationTypeId: 5,\n          universeIds: [],\n          enabledUniverseIds: [],\n        },\n        hasResellers: false,\n        saleStatus: \"OnSale\",\n        quantityLimitPerUser: null,\n        offSaleDeadline: null,\n        collectibleItemType: \"NonLimited\",\n        lowestAvailableResaleProductId: null,\n        lowestAvailableResaleItemInstanceId: null,\n        resaleRestriction: \"Disabled\",\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "bundleId",
            "type": "Identifier",
            "description": "The ID of the bundle to get recommendations for."
          },
          {
            "name": "amount?",
            "type": "number",
            "description": "The amount of recommendations to return. Can't exceed 50."
          }
        ]
      },
      "bundlesInfo": {
        "description": "Gets information about multiple bundles.",
        "tags": {
          "endpoint": "GET /v1/bundles/details",
          "example": "const { data: bundles } = await ClassicCatalogApi.bundlesInfo({ bundleIds: [429] });",
          "exampleData": "[\n  {\n    id: 429,\n    name: \"Magma Fiend\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    bundleType: \"BodyParts\",\n    items: [\n      { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n      { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n      { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n      { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n      { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n      { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n      { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n      { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n      { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n      { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n      { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n      { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n      { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n      { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n      { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n      { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n    ],\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n    product: {\n      id: 7219806593957530,\n      type: \"productType\",\n      isPublicDomain: false,\n      isForSale: true,\n      priceInRobux: 300,\n      isFree: false,\n      noPriceText: null,\n    },\n    collectibleItemDetail: {\n      collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n      collectibleProductId: null,\n      price: 300,\n      lowestPrice: 300,\n      lowestResalePrice: 0,\n      totalQuantity: 0,\n      unitsAvailable: 0,\n      saleLocation: {\n        saleLocationType: \"ShopAndAllExperiences\",\n        saleLocationTypeId: 5,\n        universeIds: [],\n        enabledUniverseIds: [],\n      },\n      hasResellers: false,\n      saleStatus: \"OnSale\",\n      quantityLimitPerUser: null,\n      offSaleDeadline: null,\n      collectibleItemType: \"NonLimited\",\n      lowestAvailableResaleProductId: null,\n      lowestAvailableResaleItemInstanceId: null,\n      resaleRestriction: \"Disabled\",\n    },\n  },\n]\n",
          "exampleRawBody": "[\n  {\n    id: 429,\n    name: \"Magma Fiend\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    bundleType: \"BodyParts\",\n    items: [\n      { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n      { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n      { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n      { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n      { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n      { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n      { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n      { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n      { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n      { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n      { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n      { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n      { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n      { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n      { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n      { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n    ],\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n    product: {\n      id: 7219806593957530,\n      type: \"productType\",\n      isPublicDomain: false,\n      isForSale: true,\n      priceInRobux: 300,\n      isFree: false,\n      noPriceText: null,\n    },\n    collectibleItemDetail: {\n      collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n      collectibleProductId: \"85283800-cf57-4870-9a02-141945b9cbfd\",\n      price: 300,\n      lowestPrice: 300,\n      lowestResalePrice: 0,\n      totalQuantity: 0,\n      unitsAvailable: 0,\n      saleLocation: {\n        saleLocationType: \"ShopAndAllExperiences\",\n        saleLocationTypeId: 5,\n        universeIds: [],\n        enabledUniverseIds: [],\n      },\n      hasResellers: false,\n      saleStatus: \"OnSale\",\n      quantityLimitPerUser: null,\n      offSaleDeadline: null,\n      collectibleItemType: \"NonLimited\",\n      lowestAvailableResaleProductId: null,\n      lowestAvailableResaleItemInstanceId: null,\n      resaleRestriction: \"Disabled\",\n    },\n  },\n]\n"
        },
        "params": [
          {
            "name": "bundleIds",
            "type": "ArrayNonEmptyIfConst<BundleId>",
            "description": "The IDs of the bundles to get information about."
          }
        ]
      },
      "bundlesOwnedByUser": {
        "description": "Gets bundles owned by a specific user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/bundles",
          "example": "const { data: bundles } = await ClassicCatalogApi.bundlesOwnedByUser({ userId: 45348281 });",
          "exampleData": "[\n  {\n    id: 290,\n    name: \"Football Player\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 71,\n    name: \"Wild Starr\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 238,\n    name: \"Man \",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 81,\n    name: \"Superhero Animation Pack\",\n    bundleType: \"AvatarAnimations\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 109,\n    name: \"ROBLOX Boy\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 338,\n    name: \"Knights of Redcliff: Paladin\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 321,\n    name: \"City Life Man\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 337,\n    name: \"City Life Woman\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 339,\n    name: \"The High Seas: Beatrix The Pirate Queen\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 350,\n    name: \"Dark Age Apprentice\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"191961467_1_6d4452377c2b2297df45ff633660d10b\",\n  data: [\n    {\n      id: 290,\n      name: \"Football Player\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 71,\n      name: \"Wild Starr\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 238,\n      name: \"Man \",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 81,\n      name: \"Superhero Animation Pack\",\n      bundleType: \"AvatarAnimations\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 109,\n      name: \"ROBLOX Boy\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 338,\n      name: \"Knights of Redcliff: Paladin\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 321,\n      name: \"City Life Man\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 337,\n      name: \"City Life Woman\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 339,\n      name: \"The High Seas: Beatrix The Pirate Queen\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 350,\n      name: \"Dark Age Apprentice\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get owned bundles for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "bundlesOfTypeOwnedByUser": {
        "description": "Gets bundles of a specific type owned by a specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/bundles/{bundleType}",
          "example": "const { data: bundles } = await ClassicCatalogApi.bundlesOfTypeOwnedByUser({\n  userId: 45348281,\n  bundleType: \"BodyParts\",\n});",
          "exampleData": "[\n  {\n    id: 2043,\n    name: \"Billy\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1755732316,\n      name: \"mPhase\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 942,\n    name: \"Gil by Guilded\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 573,\n    name: \"Oliver\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 572,\n    name: \"Summer\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 239,\n    name: \"Woman\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 510,\n    name: \"Eleven’s Mall Outfit\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 502,\n    name: \"FC Barcelona: Elite Playmaker\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 504,\n    name: \"FC Barcelona: Elite Striker\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 364,\n    name: \"NFL Super Bowl LIII – Los Angeles Rams\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n  {\n    id: 394,\n    name: \"Simple Robo\",\n    bundleType: \"BodyParts\",\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJrZXkiOjIzNTUwNjI0NSwic29ydE9yZGVyIjoiRGVzYyIsInBhZ2luZ0RpcmVjdGlvbiI6IkZvcndhcmQiLCJwYWdlTnVtYmVyIjoyLCJkaXNjcmltaW5hdG9yIjoidXNlcklkOjQ1MzQ4MjgxYnVuZGxlVHlwZTpCb2R5UGFydHMiLCJjb3VudCI6MTB9CmExMTc4NzRhNTM0ZWVhNWY3NzM1OTdjOGVjZGU4NjczMDVhMGJhYTVhMjQ5NTk4OGQyZjc4NmU1NzM3NTVhMzk=\",\n  data: [\n    {\n      id: 2043,\n      name: \"Billy\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1755732316,\n        name: \"mPhase\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 942,\n      name: \"Gil by Guilded\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 573,\n      name: \"Oliver\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 572,\n      name: \"Summer\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 239,\n      name: \"Woman\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 510,\n      name: \"Eleven’s Mall Outfit\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 502,\n      name: \"FC Barcelona: Elite Playmaker\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 504,\n      name: \"FC Barcelona: Elite Striker\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 364,\n      name: \"NFL Super Bowl LIII – Los Angeles Rams\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n    {\n      id: 394,\n      name: \"Simple Robo\",\n      bundleType: \"BodyParts\",\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get owned bundles for."
          },
          {
            "name": "bundleType",
            "type": "Type",
            "description": "The type of bundles to return."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "assetFavoritesCount": {
        "description": "Gets favorites count for an asset.",
        "tags": {
          "endpoint": "GET /v1/favorites/assets/{assetId}/count",
          "example": "const { data: favoritesCount } = await ClassicCatalogApi.assetFavoritesCount({ assetId: 2608539495 });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to get favorites count for."
          }
        ]
      },
      "bundleFavoritesCount": {
        "description": "Gets favorites count for a bundle.",
        "tags": {
          "endpoint": "GET /v1/favorites/bundles/{bundleId}/count",
          "example": "const { data: favoritesCount } = await ClassicCatalogApi.bundleFavoritesCount({ bundleId: 429 });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "bundleId",
            "type": "Identifier",
            "description": "The ID of the bundle to get favorites count for."
          }
        ]
      },
      "authedUserRemoveAssetFavorite": {
        "description": "Removes the authenticated users favorite for a specific asset.",
        "tags": {
          "endpoint": "DELETE /v1/favorites/users/{userId}/assets/{assetId}/favorite",
          "example": "const { data: success } = await ClassicCatalogApi.authedUserRemoveAssetFavorite({\n  userId: 45348281,\n  assetId: 2608539495,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to unfavorite."
          }
        ]
      },
      "authedUserGetAssetFavorite": {
        "description": "Gets the authenticated users favorite for a specific asset.",
        "tags": {
          "endpoint": "GET /v1/favorites/users/{userId}/assets/{assetId}/favorite",
          "example": "const { data: favorite } = await ClassicCatalogApi.authedUserGetAssetFavorite({\n  userId: 45348281,\n  assetId: 2608539495,\n});",
          "exampleData": "{\n  assetId: 2608539495,\n  userId: 45348281,\n  created: \"2024-07-30T15:00:39.540Z\",\n}\n",
          "exampleRawBody": "{\n  assetId: 2608539495,\n  userId: 45348281,\n  created: \"2024-07-30T15:00:39.540Z\",\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to get favorite for."
          }
        ]
      },
      "authedUserCreateAssetFavorite": {
        "description": "Favorites a specific asset for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/favorites/users/{userId}/assets/{assetId}/favorite",
          "example": "const { data: favorite } = await ClassicCatalogApi.authedUserCreateAssetFavorite({\n  userId: 45348281,\n  assetId: 2608539495,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The ID of the asset to create favorite for."
          }
        ]
      },
      "authedUserRemoveBundleFavorite": {
        "description": "Removes the authenticated users favorite for a specific asset.",
        "tags": {
          "endpoint": "DELETE /v1/favorites/users/{userId}/bundles/{bundleId}/favorite",
          "example": "const { data: success } = await ClassicCatalogApi.authedUserRemoveBundleFavorite({ userId: 45348281, bundleId: 429 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "assetId",
            "type": "🤷",
            "description": "The ID of the bundle to unfavorite."
          }
        ]
      },
      "authedUserGetBundleFavorite": {
        "description": "Gets the authenticated users favorite for a specific bundle.",
        "tags": {
          "endpoint": "GET /v1/favorites/users/{userId}/bundles/{bundleId}/favorite",
          "example": "const { data: favorite } = await ClassicCatalogApi.authedUserGetBundleFavorite({ userId: 45348281, bundleId: 429 });",
          "exampleData": "{ bundleId: 429, userId: 45348281, created: \"2024-07-30T23:23:36.501Z\" }\n",
          "exampleRawBody": "{ bundleId: 429, userId: 45348281, created: \"2024-07-30T23:23:36.501Z\" }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "bundleId",
            "type": "BundleId",
            "description": "The ID of the bundle to get favorite for."
          }
        ]
      },
      "authedUserCreateBundleFavorite": {
        "description": "Favorites a specific bundle for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/favorites/users/{userId}/bundles/{bundleId}/favorite",
          "example": "const { data: favorite } = await ClassicCatalogApi.authedUserCreateBundleFavorite({ userId: 45348281, bundleId: 429 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "bundleId",
            "type": "AssetId",
            "description": "The ID of the bundle to create favorite for."
          }
        ]
      },
      "authedUserFavoritedBundlesOfType": {
        "description": "Gets bundles of a specific type that the authenticated user has favorited.",
        "tags": {
          "endpoint": "GET /v1/favorites/users/{userId}/favorites/{bundleType}/bundles",
          "example": "const { data: bundles } = await ClassicCatalogApi.authedUserFavoritedBundlesOfType({\n  userId: 45348281,\n  bundleType: \"BodyParts\",\n});",
          "exampleData": "[\n  {\n    id: 429,\n    name: \"Magma Fiend\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    bundleType: \"BodyParts\",\n    items: [\n      { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n      { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n      { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n      { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n      { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n      { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n      { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n      { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n      { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n      { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n      { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n      { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n      { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n      { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n      { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n      { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n    ],\n    creator: {\n      id: 1,\n      name: \"Roblox\",\n      type: \"User\",\n      hasVerifiedBadge: true,\n    },\n    product: {\n      id: 7219806593957530,\n      type: \"productType\",\n      isPublicDomain: false,\n      isForSale: true,\n      priceInRobux: 300,\n      isFree: false,\n      noPriceText: null,\n    },\n    collectibleItemDetail: {\n      collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n      collectibleProductId: null,\n      price: 300,\n      lowestPrice: 300,\n      lowestResalePrice: 0,\n      totalQuantity: 0,\n      unitsAvailable: 0,\n      saleLocation: {\n        saleLocationType: \"ShopAndAllExperiences\",\n        saleLocationTypeId: 5,\n        universeIds: [],\n        enabledUniverseIds: [],\n      },\n      hasResellers: false,\n      saleStatus: \"OnSale\",\n      quantityLimitPerUser: null,\n      offSaleDeadline: null,\n      collectibleItemType: \"NonLimited\",\n      lowestAvailableResaleProductId: null,\n      lowestAvailableResaleItemInstanceId: null,\n      resaleRestriction: \"Disabled\",\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  favorites: [\n    {\n      id: 429,\n      name: \"Magma Fiend\",\n      description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n      bundleType: \"BodyParts\",\n      items: [\n        { id: 2608534881, name: \"Magma Fiend - Left Arm\", type: \"Asset\" },\n        { id: 2608536258, name: \"Magma Fiend - Left Leg\", type: \"Asset\" },\n        { id: 2608537440, name: \"Magma Fiend - Right Arm\", type: \"Asset\" },\n        { id: 2608538559, name: \"Magma Fiend - Right Leg\", type: \"Asset\" },\n        { id: 2608539495, name: \"Magma Fiend - Torso\", type: \"Asset\" },\n        { id: 2510230574, name: \"Rthro Climb\", type: \"Asset\" },\n        { id: 2510233257, name: \"Rthro Fall\", type: \"Asset\" },\n        { id: 2510235063, name: \"Rthro Idle\", type: \"Asset\" },\n        { id: 2510236649, name: \"Rthro Jump\", type: \"Asset\" },\n        { id: 2510238627, name: \"Rthro Run\", type: \"Asset\" },\n        { id: 2510240941, name: \"Rthro Swim\", type: \"Asset\" },\n        { id: 2510242378, name: \"Rthro Walk\", type: \"Asset\" },\n        { id: 474312030, name: \"Magma Fiend\", type: \"UserOutfit\" },\n        { id: 12726967427, name: \"Magma Fiend - Head\", type: \"Asset\" },\n        { id: 11573370910, name: \"Anime - Mood\", type: \"Asset\" },\n        { id: 23452425262, name: \"Magma Fiend Head\", type: \"UserOutfit\" },\n      ],\n      creator: {\n        id: 1,\n        name: \"Roblox\",\n        type: \"User\",\n        hasVerifiedBadge: true,\n      },\n      product: {\n        id: 7219806593957530,\n        type: \"productType\",\n        isPublicDomain: false,\n        isForSale: true,\n        priceInRobux: 300,\n        isFree: false,\n        noPriceText: null,\n      },\n      collectibleItemDetail: {\n        collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n        collectibleProductId: \"85283800-cf57-4870-9a02-141945b9cbfd\",\n        price: 300,\n        lowestPrice: 300,\n        lowestResalePrice: 0,\n        totalQuantity: 0,\n        unitsAvailable: 0,\n        saleLocation: {\n          saleLocationType: \"ShopAndAllExperiences\",\n          saleLocationTypeId: 5,\n          universeIds: [],\n          enabledUniverseIds: [],\n        },\n        hasResellers: false,\n        saleStatus: \"OnSale\",\n        quantityLimitPerUser: null,\n        offSaleDeadline: null,\n        collectibleItemType: \"NonLimited\",\n        lowestAvailableResaleProductId: null,\n        lowestAvailableResaleItemInstanceId: null,\n        resaleRestriction: \"Disabled\",\n      },\n    },\n  ],\n  moreFavorites: false,\n  nextCursor: null,\n  previousCursor: null,\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "🤷",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "bundleType",
            "type": "🤷",
            "description": "The type of bundle sub type to get."
          },
          {
            "name": "cursor",
            "type": "🤷",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "catalogBatchInfo": {
        "description": "Gets batch information about specific assets and bundles.",
        "tags": {
          "endpoint": "GET /v1/catalog/items/details",
          "example": "const { data: items } = await ClassicCatalogApi.catalogBatchInfo({ assetIds: [2608538559], bundleIds: [429] });",
          "exampleData": "[\n  {\n    id: 429,\n    itemType: \"Bundle\",\n    bundleType: 1,\n    name: \"Magma Fiend\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    productId: 7219806593957530,\n    itemStatus: [],\n    itemRestrictions: [],\n    creatorHasVerifiedBadge: true,\n    creatorType: \"User\",\n    creatorTargetId: 1,\n    creatorName: \"Roblox\",\n    price: 300,\n    lowestPrice: 300,\n    lowestResalePrice: 0,\n    unitsAvailableForConsumption: 0,\n    purchaseCount: 0,\n    favoriteCount: 520324,\n    offSaleDeadline: null,\n    collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n    totalQuantity: 0,\n    saleLocationType: \"ShopAndAllExperiences\",\n    hasResellers: false,\n  },\n  {\n    id: 2608538559,\n    itemType: \"Asset\",\n    assetType: 31,\n    name: \"Magma Fiend - Right Leg\",\n    description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n    productId: 427839098,\n    itemStatus: [],\n    itemRestrictions: [],\n    creatorHasVerifiedBadge: true,\n    creatorType: \"User\",\n    creatorTargetId: 1,\n    creatorName: \"Roblox\",\n    priceStatus: \"Off Sale\",\n    purchaseCount: 0,\n    favoriteCount: 9887,\n    offSaleDeadline: null,\n    saleLocationType: \"NotApplicable\",\n    isOffSale: true,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 429,\n      itemType: \"Bundle\",\n      bundleType: 1,\n      name: \"Magma Fiend\",\n      description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n      productId: 7219806593957530,\n      itemStatus: [],\n      itemRestrictions: [],\n      creatorHasVerifiedBadge: true,\n      creatorType: \"User\",\n      creatorTargetId: 1,\n      creatorName: \"Roblox\",\n      price: 300,\n      lowestPrice: 300,\n      lowestResalePrice: 0,\n      unitsAvailableForConsumption: 0,\n      purchaseCount: 0,\n      favoriteCount: 520324,\n      offSaleDeadline: null,\n      collectibleItemId: \"e036077b-ed8d-4bf1-9193-4e64bbc86978\",\n      totalQuantity: 0,\n      saleLocationType: \"ShopAndAllExperiences\",\n      hasResellers: false,\n    },\n    {\n      id: 2608538559,\n      itemType: \"Asset\",\n      assetType: 31,\n      name: \"Magma Fiend - Right Leg\",\n      description: \"He's got hot blood, with a temperature of nine hundred and three.\",\n      productId: 427839098,\n      itemStatus: [],\n      itemRestrictions: [],\n      creatorHasVerifiedBadge: true,\n      creatorType: \"User\",\n      creatorTargetId: 1,\n      creatorName: \"Roblox\",\n      priceStatus: \"Off Sale\",\n      purchaseCount: 0,\n      favoriteCount: 9887,\n      offSaleDeadline: null,\n      saleLocationType: \"NotApplicable\",\n      isOffSale: true,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "assetIds",
            "type": "🤷",
            "description": "The IDs of the assets to get info about."
          },
          {
            "name": "bundleIds",
            "type": "🤷",
            "description": "The IDs of the bundles to get info about."
          }
        ]
      }
    },
    "develop": {
      "gameTemplates": {
        "description": "Gets a page of templates that can be used to start off making games",
        "tags": {
          "endpoint": "GET /v1/gametemplates",
          "example": "const { data: templates } = await ClassicDevelopApi.gameTemplates();",
          "exampleData": "[\n  {\n    gameTemplateType: \"Generic\",\n    hasTutorials: false,\n    universe: {\n      id: 28220420,\n      name: \"Baseplate\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 95206881,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2013-11-01T08:47:14.070Z\",\n      updated: \"2023-05-02T22:03:01.107Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Generic\",\n    hasTutorials: false,\n    universe: {\n      id: 2464612126,\n      name: \"Classic Baseplate\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 6560363541,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2021-03-24T00:56:45.957Z\",\n      updated: \"2021-04-16T18:55:13.820Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Generic\",\n    hasTutorials: false,\n    universe: {\n      id: 28223770,\n      name: \"Flat Terrain\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 95206192,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2013-11-01T08:47:18.013Z\",\n      updated: \"2023-05-02T22:17:58.570Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Gameplay\",\n    hasTutorials: false,\n    universe: {\n      id: 6106389365,\n      name: \"Laser Tag\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 17823019220,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2024-06-11T21:29:12.993Z\",\n      updated: \"2024-06-20T16:58:40.577Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Gameplay\",\n    hasTutorials: false,\n    universe: {\n      id: 6106388692,\n      name: \"FPS System\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 17823017290,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2024-06-11T21:28:57.433Z\",\n      updated: \"2024-06-20T16:58:54.493Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Gameplay\",\n    hasTutorials: false,\n    universe: {\n      id: 5557500170,\n      name: \"Racing\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 16078915506,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2024-01-22T19:47:42.920Z\",\n      updated: \"2024-01-29T17:39:18.837Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: true,\n    universe: {\n      id: 202770430,\n      name: \"Village\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 520390648,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2016-10-10T21:32:42.780Z\",\n      updated: \"2023-05-03T23:39:56.663Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: true,\n    universe: {\n      id: 93411794,\n      name: \"Castle\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 203810088,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2015-01-14T21:46:11.363Z\",\n      updated: \"2023-05-03T23:46:03.850Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: false,\n    universe: {\n      id: 138962641,\n      name: \"Suburban\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 366130569,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2016-02-20T00:02:36.483Z\",\n      updated: \"2023-05-03T23:45:29.983Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: true,\n    universe: {\n      id: 107387509,\n      name: \"Pirate Island\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 264719325,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2015-07-01T22:54:38.927Z\",\n      updated: \"2023-05-03T23:49:39.753Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Gameplay\",\n    hasTutorials: false,\n    universe: {\n      id: 93412282,\n      name: \"Obby\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 203812057,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2015-01-14T21:51:25.830Z\",\n      updated: \"2023-05-03T23:50:57.623Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: true,\n    universe: {\n      id: 142606178,\n      name: \"Starting Place\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 379736082,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2016-03-09T19:04:30.723Z\",\n      updated: \"2023-05-04T00:09:23.643Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Gameplay\",\n    hasTutorials: false,\n    universe: {\n      id: 115791780,\n      name: \"Line Runner\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 301530843,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2015-09-28T22:16:52.420Z\",\n      updated: \"2023-05-04T00:10:55.837Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: false,\n    universe: {\n      id: 3760683948,\n      name: \"Concert\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 10275826693,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2022-07-19T00:42:50.713Z\",\n      updated: \"2023-05-03T23:14:32.480Z\",\n    },\n  },\n  {\n    gameTemplateType: \"Theme\",\n    hasTutorials: false,\n    universe: {\n      id: 4594822820,\n      name: \"Modern City\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 13165709401,\n      isActive: true,\n      privacyType: \"Public\",\n      creatorType: \"User\",\n      creatorTargetId: 998796,\n      creatorName: \"Templates\",\n      created: \"2023-04-17T18:33:52.930Z\",\n      updated: \"2023-04-17T23:24:03.373Z\",\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      gameTemplateType: \"Generic\",\n      hasTutorials: false,\n      universe: {\n        id: 28220420,\n        name: \"Baseplate\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 95206881,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2013-11-01T08:47:14.07Z\",\n        updated: \"2023-05-02T22:03:01.107Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Generic\",\n      hasTutorials: false,\n      universe: {\n        id: 2464612126,\n        name: \"Classic Baseplate\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 6560363541,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2021-03-24T00:56:45.957Z\",\n        updated: \"2021-04-16T18:55:13.82Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Generic\",\n      hasTutorials: false,\n      universe: {\n        id: 28223770,\n        name: \"Flat Terrain\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 95206192,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2013-11-01T08:47:18.013Z\",\n        updated: \"2023-05-02T22:17:58.57Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Gameplay\",\n      hasTutorials: false,\n      universe: {\n        id: 6106389365,\n        name: \"Laser Tag\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 17823019220,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2024-06-11T21:29:12.993Z\",\n        updated: \"2024-06-20T16:58:40.577Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Gameplay\",\n      hasTutorials: false,\n      universe: {\n        id: 6106388692,\n        name: \"FPS System\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 17823017290,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2024-06-11T21:28:57.433Z\",\n        updated: \"2024-06-20T16:58:54.493Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Gameplay\",\n      hasTutorials: false,\n      universe: {\n        id: 5557500170,\n        name: \"Racing\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 16078915506,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2024-01-22T19:47:42.92Z\",\n        updated: \"2024-01-29T17:39:18.837Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: true,\n      universe: {\n        id: 202770430,\n        name: \"Village\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 520390648,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2016-10-10T21:32:42.78Z\",\n        updated: \"2023-05-03T23:39:56.663Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: true,\n      universe: {\n        id: 93411794,\n        name: \"Castle\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 203810088,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2015-01-14T21:46:11.363Z\",\n        updated: \"2023-05-03T23:46:03.85Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: false,\n      universe: {\n        id: 138962641,\n        name: \"Suburban\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 366130569,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2016-02-20T00:02:36.483Z\",\n        updated: \"2023-05-03T23:45:29.983Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: true,\n      universe: {\n        id: 107387509,\n        name: \"Pirate Island\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 264719325,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2015-07-01T22:54:38.927Z\",\n        updated: \"2023-05-03T23:49:39.753Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Gameplay\",\n      hasTutorials: false,\n      universe: {\n        id: 93412282,\n        name: \"Obby\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 203812057,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2015-01-14T21:51:25.83Z\",\n        updated: \"2023-05-03T23:50:57.623Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: true,\n      universe: {\n        id: 142606178,\n        name: \"Starting Place\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 379736082,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2016-03-09T19:04:30.723Z\",\n        updated: \"2023-05-04T00:09:23.643Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Gameplay\",\n      hasTutorials: false,\n      universe: {\n        id: 115791780,\n        name: \"Line Runner\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 301530843,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2015-09-28T22:16:52.42Z\",\n        updated: \"2023-05-04T00:10:55.837Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: false,\n      universe: {\n        id: 3760683948,\n        name: \"Concert\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 10275826693,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2022-07-19T00:42:50.713Z\",\n        updated: \"2023-05-03T23:14:32.48Z\",\n      },\n    },\n    {\n      gameTemplateType: \"Theme\",\n      hasTutorials: false,\n      universe: {\n        id: 4594822820,\n        name: \"Modern City\",\n        description: null,\n        isArchived: false,\n        rootPlaceId: 13165709401,\n        isActive: true,\n        privacyType: \"Public\",\n        creatorType: \"User\",\n        creatorTargetId: 998796,\n        creatorName: \"Templates\",\n        created: \"2023-04-17T18:33:52.93Z\",\n        updated: \"2023-04-17T23:24:03.373Z\",\n      },\n    },\n  ],\n}\n"
        },
        "params": []
      },
      "groupUniverses": {
        "description": "Gets a list of universes for the given group.",
        "tags": {
          "endpoint": "GET /v1/groups/{groupId}/universes",
          "example": "const { data: universes } = await ClassicDevelopApi.groupUniverses({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 1651554338,\n    name: \"Ninjas Unleashed: Legion\",\n    description: \"No secret projects here\\r\\nScriptor/Game Designer - NamelessGuy2005\\r\\nBuilder/Animator - Flaroh\\r\\n\",\n    isArchived: false,\n    rootPlaceId: 4857762148,\n    isActive: false,\n    privacyType: \"Private\",\n    creatorType: \"Group\",\n    creatorTargetId: 5850082,\n    creatorName: \"MightyPart Games\",\n    created: \"2020-04-04T13:17:08.120Z\",\n    updated: \"2020-04-20T15:37:55.803Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      id: 1651554338,\n      name: \"Ninjas Unleashed: Legion\",\n      description: \"No secret projects here\\r\\nScriptor/Game Designer - NamelessGuy2005\\r\\nBuilder/Animator - Flaroh\\r\\n\",\n      isArchived: false,\n      rootPlaceId: 4857762148,\n      isActive: false,\n      privacyType: \"Private\",\n      creatorType: \"Group\",\n      creatorTargetId: 5850082,\n      creatorName: \"MightyPart Games\",\n      created: \"2020-04-04T13:17:08.12Z\",\n      updated: \"2020-04-20T15:37:55.803Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to get universes from."
          },
          {
            "name": "isArchived?",
            "type": "boolean",
            "description": "Whether or not to return archived games."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order to sort the results in. Sorted by universeId."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "teamCreateActiveMembers": {
        "description": "List of users in the active Team Create session.",
        "tags": {
          "endpoint": "GET /v1/places/{placeId}/teamcreate/active_session/members",
          "example": "const { data: activeMembers } = await ClassicDevelopApi.teamCreateActiveMembers({ placeId: 17718644108 });",
          "exampleData": "[{ id: 45348281, name: \"MightyPart\", displayName: \"Mighty\" }]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [{ id: 45348281, name: \"MightyPart\", displayName: \"Mighty\" }],\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to get active team create members from."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "teamCreateSettingsForUniverse": {
        "description": "Gets team create settings for a universe.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/teamcreate",
          "example": "const { data: settings } = await ClassicDevelopApi.teamCreateSettingsForUniverse({ universeId: 6069031486 });",
          "exampleData": "{ isEnabled: true }\n",
          "exampleRawBody": "{ isEnabled: true }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get team create settings for."
          }
        ]
      },
      "setTeamCreateSettingsForUniverse": {
        "description": "Updates team create settings for a universe.",
        "tags": {
          "endpoint": "PATCH /v1/universes/{universeId}/teamcreate",
          "example": "const { data: success } = await ClassicDevelopApi.setTeamCreateSettingsForUniverse({\n  universeId: 6069031486,\n  isEnabled: false,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to update team create settings for."
          },
          {
            "name": "isEnabled",
            "type": "boolean",
            "description": "If team create should be enabled."
          }
        ]
      },
      "teamCreateSettingsForUniverses": {
        "description": "Gets team create settings for many universes.",
        "tags": {
          "endpoint": "GET /v1/universes/multiget/teamcreate",
          "example": "const { data: settings } = await ClassicDevelopApi.teamCreateSettingsForUniverses({ universeIds: [6069031486] });",
          "exampleData": "{ \"6069031486\": { isEnabled: false } }\n",
          "exampleRawBody": "{ data: [{ id: 6069031486, isEnabled: false }] }\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The ID of the universe to get team create settings for."
          }
        ]
      },
      "teamCreateRemoveUsersAccessForUniverse": {
        "description": "Removes a users team create access.",
        "tags": {
          "endpoint": "DELETE /v1/universes/{universeId}/teamcreate/memberships",
          "example": "const { data: success } = await ClassicDevelopApi.teamCreateRemoveUsersAccessForUniverse({\n  universeId: 6069031486,\n  userId: 45348281,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to remove the users team create access from."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to remove team create access from."
          }
        ]
      },
      "pluginsInfo": {
        "description": "Gets plugin details by IDs.",
        "tags": {
          "endpoint": "GET /v1/plugins",
          "example": "const { data: pluginsInfo } = await ClassicDevelopApi.pluginsInfo({ pluginIds: [18407509477] });",
          "exampleData": "{\n  \"18407509477\": {\n    created: \"2024-07-09T10:44:37.523Z\",\n    updated: \"2024-07-09T10:44:37.523Z\",\n    name: \"PropertyLab [PRE-ALPHA V0.0.0]\",\n    description: \"A modernised plugin explorer for Roblox.\",\n    commentsEnabled: false,\n    versionId: 24376570646,\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 18407509477,\n      name: \"PropertyLab [PRE-ALPHA V0.0.0]\",\n      description: \"A modernised plugin explorer for Roblox.\",\n      commentsEnabled: false,\n      versionId: 24376570646,\n      created: \"2024-07-09T10:44:37.523Z\",\n      updated: \"2024-07-09T10:44:37.523Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "pluginIds",
            "type": "ArrayNonEmptyIfConst<PluginId>",
            "description": "The IDs of the plugins to get information about."
          }
        ]
      },
      "updatePlugin": {
        "description": "Updates a plugin.",
        "tags": {
          "endpoint": "PATCH /v1/plugins/{pluginId}",
          "example": "const { data: success } = await ClassicDevelopApi.updatePlugin({ pluginId: 18407509477, name: \"My New Plugin Name\" });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "pluginId",
            "type": "Identifier",
            "description": "The ID of the plugin to update."
          },
          {
            "name": "name?",
            "type": "string",
            "description": "The new name for the plugin."
          },
          {
            "name": "description?",
            "type": "string",
            "description": "The new description for the plugin."
          },
          {
            "name": "commentsEnabled?",
            "type": "boolean",
            "description": "If comments should be enabled for the plugin."
          }
        ]
      },
      "universeInfo": {
        "description": "Gets information about a universe.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}",
          "example": "const { data: universeInfo } = await ClassicDevelopApi.universeInfo({ universeId: 6069031486 });",
          "exampleData": "{\n  id: 6069031486,\n  name: \"MightyPart's Place: 06032024_1\",\n  description: null,\n  isArchived: false,\n  rootPlaceId: 17718644108,\n  isActive: false,\n  privacyType: \"Private\",\n  creatorType: \"User\",\n  creatorTargetId: 45348281,\n  creatorName: \"MightyPart\",\n  created: \"2024-06-03T09:42:56.270Z\",\n  updated: \"2024-06-03T09:42:56.270Z\",\n}\n",
          "exampleRawBody": "{\n  id: 6069031486,\n  name: \"MightyPart's Place: 06032024_1\",\n  description: null,\n  isArchived: false,\n  rootPlaceId: 17718644108,\n  isActive: false,\n  privacyType: \"Private\",\n  creatorType: \"User\",\n  creatorTargetId: 45348281,\n  creatorName: \"MightyPart\",\n  created: \"2024-06-03T09:42:56.27Z\",\n  updated: \"2024-06-03T09:42:56.27Z\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get information for."
          }
        ]
      },
      "authenticatedUserPermissionsForUniverse": {
        "description": "Returns a list of permissions related to a specific universe for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/permissions",
          "example": "const { data: permissions } = await ClassicDevelopApi.authenticatedUserPermissionsForUniverse({\n  universeId: 6069031486,\n});",
          "exampleData": "{ canManage: true, canCloudEdit: true }\n",
          "exampleRawBody": "{ canManage: true, canCloudEdit: true }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get permissions for."
          }
        ]
      },
      "universePlaces": {
        "description": "Gets a list of places for the specified universe.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/places",
          "example": "const { data } = await ClassicDevelopApi.universePlaces({ universeId: 6026274246 });",
          "exampleData": "[\n  {\n    id: 11969698031,\n    universeId: 6026274246,\n    name: \"MightyPart's Place Number: 140\",\n    description: \"\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      id: 11969698031,\n      universeId: 6026274246,\n      name: \"MightyPart's Place Number: 140\",\n      description: \"\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to get places for."
          },
          {
            "name": "isUniverseCreation?",
            "type": "boolean",
            "description": "Returns only new universe creations."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "universesInfo": {
        "description": "Gets information about multiple universes.",
        "tags": {
          "endpoint": "GET /v1/universes/multiget",
          "example": "const { data: universesInfo } = await ClassicDevelopApi.universesInfo({ universeIds: [6069031486] });",
          "exampleData": "{\n  \"6069031486\": {\n    created: \"2024-06-03T09:42:56.270Z\",\n    updated: \"2024-06-03T09:42:56.270Z\",\n    name: \"MightyPart's Place: 06032024_1\",\n    description: null,\n    isArchived: false,\n    rootPlaceId: 17718644108,\n    isActive: false,\n    privacyType: \"Private\",\n    creatorType: \"User\",\n    creatorTargetId: 45348281,\n    creatorName: \"MightyPart\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 6069031486,\n      name: \"MightyPart's Place: 06032024_1\",\n      description: null,\n      isArchived: false,\n      rootPlaceId: 17718644108,\n      isActive: false,\n      privacyType: \"Private\",\n      creatorType: \"User\",\n      creatorTargetId: 45348281,\n      creatorName: \"MightyPart\",\n      created: \"2024-06-03T09:42:56.27Z\",\n      updated: \"2024-06-03T09:42:56.27Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "🤷",
            "description": "The IDs of the universes to get information for."
          }
        ]
      },
      "authenticatedUserPermissionsForUniverses": {
        "description": "Returns a list of permissions related to specific universes for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/universes/multiget/permissions",
          "example": "const { data: permissions } = await ClassicDevelopApi.authenticatedUserPermissionsForUniverses({\n  universeIds: [6069031486],\n});",
          "exampleData": "{ \"6069031486\": { canManage: true, canCloudEdit: true } }\n",
          "exampleRawBody": "{ data: [{ universeId: 6069031486, canManage: true, canCloudEdit: true }] }\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The IDs of the universes to get permissions for."
          }
        ]
      },
      "universeConfiguration": {
        "description": "Gets the configuration for a universe owned by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/configuration",
          "example": "const { data: config } = await ClassicDevelopApi.universeConfiguration({ universeId: 6069031486 });",
          "exampleData": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  isMeshTextureApiAccessAllowed: false,\n  id: 6069031486,\n  name: \"MightyPart's Place: 06032024_1\",\n  universeAvatarType: \"MorphToR15\",\n  universeScaleType: \"AllScales\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeBodyType: \"Standard\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\", \"Phone\", \"Tablet\", \"VR\"],\n  isForSale: false,\n  price: 0,\n  isStudioAccessToApisAllowed: false,\n  privacyType: \"Private\",\n}\n",
          "exampleRawBody": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  isMeshTextureApiAccessAllowed: false,\n  id: 6069031486,\n  name: \"MightyPart's Place: 06032024_1\",\n  universeAvatarType: \"MorphToR15\",\n  universeScaleType: \"AllScales\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeBodyType: \"Standard\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\", \"Phone\", \"Tablet\", \"VR\"],\n  isForSale: false,\n  price: 0,\n  isStudioAccessToApisAllowed: false,\n  privacyType: \"Private\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to get the configuration for."
          }
        ]
      },
      "updateUniverseConfiguration_V1": {
        "description": "Updates the configuration for a universe owned by the authenticated user.",
        "tags": {
          "endpoint": "PATCH /v1/universes/{universeId}/configuration",
          "example": "const { data: updatedConfig } = await ClassicDevelopApi.updateUniverseConfiguration_V1({\n  universeId: 5638577595,\n  playableDevices: [\"Computer\"],\n  avatarType: \"PlayerChoice\",\n});",
          "exampleData": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  isMeshTextureApiAccessAllowed: true,\n  id: 5638577595,\n  name: \"Terrain Gen Tech Demo\",\n  universeAvatarType: \"PlayerChoice\",\n  universeScaleType: \"AllScales\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeBodyType: \"Standard\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\"],\n  isForSale: false,\n  price: 0,\n  isStudioAccessToApisAllowed: false,\n  privacyType: \"Public\",\n}\n",
          "exampleRawBody": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  isMeshTextureApiAccessAllowed: true,\n  id: 5638577595,\n  name: \"Terrain Gen Tech Demo\",\n  universeAvatarType: \"PlayerChoice\",\n  universeScaleType: \"AllScales\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeBodyType: \"Standard\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\"],\n  isForSale: false,\n  price: 0,\n  isStudioAccessToApisAllowed: false,\n  privacyType: \"Public\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "🤷",
            "description": "The ID of the universe to set configuration for."
          },
          {
            "name": "name",
            "type": "🤷",
            "description": "The new name for the universe."
          },
          {
            "name": "avatarType",
            "type": "🤷",
            "description": "The new avatarType for the universe."
          },
          {
            "name": "scaleType",
            "type": "🤷",
            "description": "The new scaleType for the universe."
          },
          {
            "name": "animationType",
            "type": "🤷",
            "description": "The new animationType for the universe."
          },
          {
            "name": "collisionType",
            "type": "🤷",
            "description": "The new collisionType for the universe."
          },
          {
            "name": "bodyType",
            "type": "🤷",
            "description": "The new bodyType for the universe."
          },
          {
            "name": "jointPositioningType",
            "type": "🤷",
            "description": "The new jointPositioningType for the universe."
          },
          {
            "name": "isArchived",
            "type": "🤷",
            "description": "If the universe is to be archived."
          },
          {
            "name": "isFriendsOnly",
            "type": "🤷",
            "description": "If the universe is to be for friends only."
          },
          {
            "name": "genre",
            "type": "🤷",
            "description": "The new genre for the universe."
          },
          {
            "name": "playableDevices",
            "type": "🤷",
            "description": "The allowed devices the universe can be played on."
          },
          {
            "name": "isMeshTextureApiAccessAllowed",
            "type": "🤷",
            "description": "If mesh and texture apis can be used for this universe."
          },
          {
            "name": "isForSale",
            "type": "🤷",
            "description": "If the universe is for sale."
          },
          {
            "name": "price",
            "type": "🤷",
            "description": "The price of the universe."
          }
        ]
      },
      "vipServerConfigurationForUniverse": {
        "description": "Gets the configuration for vip servers of a universe owned by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/configuration/vip-servers",
          "example": "const { data: config } = await ClassicDevelopApi.vipServerConfigurationForUniverse({ universeId: 5638577595 });",
          "exampleData": "{\n  isEnabled: false,\n  price: null,\n  activeServersCount: 0,\n  activeSubscriptionsCount: 0,\n}\n",
          "exampleRawBody": "{\n  isEnabled: false,\n  price: null,\n  activeServersCount: 0,\n  activeSubscriptionsCount: 0,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get the vip servers configuration from."
          }
        ]
      },
      "authenticatedUserGroupsCanManage": {
        "description": "Lists groups that the authenticated user can manage.",
        "tags": {
          "endpoint": "GET /v1/user/groups/canmanage",
          "example": "const { data: groupsCanManage } = await ClassicDevelopApi.authenticatedUserGroupsCanManage();",
          "exampleData": "[{ id: 5850082, name: \"MightyPart Games\" }]\n",
          "exampleRawBody": "{ data: [{ id: 5850082, name: \"MightyPart Games\" }] }\n"
        },
        "params": []
      },
      "authenticatedUserGroupsCanManageGamesOrItems": {
        "description": "Lists groups that the authenticated user can manage.",
        "tags": {
          "endpoint": "GET /v1/user/groups/canmanage",
          "example": "const { data: groupsCanManage } = await ClassicDevelopApi.authenticatedUserGroupsCanManageGamesOrItems();",
          "exampleData": "[{ id: 5850082, name: \"MightyPart Games\" }]\n",
          "exampleRawBody": "{ data: [{ id: 5850082, name: \"MightyPart Games\" }] }\n"
        },
        "params": []
      },
      "authenticatedUserUniverses": {
        "description": "Gets a list of universes for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/user/universes",
          "example": "const { data: universes } = await ClassicDevelopApi.universesForGroup({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 43387735,\n    name: \"parrrty's Place Number: 2\",\n    description: \"parrrty's Place\",\n    isArchived: false,\n    rootPlaceId: 122862800,\n    isActive: false,\n    privacyType: \"Private\",\n    creatorType: \"User\",\n    creatorTargetId: 45348281,\n    creatorName: \"MightyPart\",\n    created: \"2013-11-01T13:47:47.813Z\",\n    updated: \"2019-04-04T13:32:49.633Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      id: 43387735,\n      name: \"parrrty's Place Number: 2\",\n      description: \"parrrty's Place\",\n      isArchived: false,\n      rootPlaceId: 122862800,\n      isActive: false,\n      privacyType: \"Private\",\n      creatorType: \"User\",\n      creatorTargetId: 45348281,\n      creatorName: \"MightyPart\",\n      created: \"2013-11-01T13:47:47.813Z\",\n      updated: \"2019-04-04T13:32:49.633Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "isArchived?",
            "type": "boolean",
            "description": "Whether or not to return archived games."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order to sort the results in. Sorted by universeId."
          }
        ]
      },
      "updatePlaceConfiguration_V1": {
        "description": "Updates the configuration for a place owned by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/places/{placeId}",
          "example": "const { data: updatedPlace } = await ClassicDevelopApi.updatePlaceConfiguration({\n  placeId: 16349154726,\n  name: \"New name\",\n});",
          "exampleData": "{\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n}\n",
          "exampleRawBody": "{\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to update the configuration for."
          },
          {
            "name": "name?",
            "type": "Name",
            "description": "The name for the place."
          },
          {
            "name": "description?",
            "type": "Description",
            "description": "The description for the place."
          }
        ]
      },
      "placeConfiguration": {
        "description": "Gets the configuration for a place owned by the authenticated user.",
        "tags": {
          "endpoint": "GET /v2/places/{placeId}",
          "example": "const { data: config } = await ClassicDevelopApi.placeConfiguration({ placeId: 16349154726 });",
          "exampleData": "{\n  maxPlayerCount: 50,\n  socialSlotType: \"Automatic\",\n  customSocialSlotsCount: 15,\n  allowCopying: false,\n  currentSavedVersion: 1537,\n  isAllGenresAllowed: true,\n  allowedGearTypes: [],\n  maxPlayersAllowed: 700,\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n  isRootPlace: true,\n}\n",
          "exampleRawBody": "{\n  maxPlayerCount: 50,\n  socialSlotType: \"Automatic\",\n  customSocialSlotsCount: 15,\n  allowCopying: false,\n  currentSavedVersion: 1537,\n  isAllGenresAllowed: true,\n  allowedGearTypes: [],\n  maxPlayersAllowed: 700,\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n  isRootPlace: true,\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to get the configuration from."
          }
        ]
      },
      "updatePlaceConfiguration_V2": {
        "description": "Updates the configuration for a place owned by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/places/{placeId}",
          "example": "const { data: updatedConfig } = await ClassicDevelopApi.updatePlaceConfiguration_V2({\n  placeId: 16349154726,\n  allowCopying: false,\n});",
          "exampleData": "{\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n}\n",
          "exampleRawBody": "{\n  id: 16349154726,\n  universeId: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "PlaceId",
            "description": "The ID of the place to update the configuration for."
          },
          {
            "name": "name?",
            "type": "Name",
            "description": "The name for the place."
          },
          {
            "name": "description?",
            "type": "Description",
            "description": "The description for the place."
          }
        ]
      },
      "updateUniverseConfiguration_V2": {
        "description": "Updates the configuration for a universe owned by the authenticated user.",
        "tags": {
          "endpoint": "PATCH /v2/universes/${universeId}/configuration",
          "example": "const { data: universe } = await ClassicDevelopApi.updateUniverseConfiguration_V2({\n  universeId: 5638577595,\n  playableDevices: [\"Computer\"],\n  avatarType: \"PlayerChoice\",\n});",
          "exampleData": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  optInRegions: [],\n  isMeshTextureApiAccessAllowed: true,\n  id: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n  universeAvatarType: \"PlayerChoice\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\"],\n  isForSale: false,\n  price: 0,\n  universeAvatarMinScales: {\n    height: 0.9,\n    width: 0.7,\n    head: 0.95,\n    depth: 0,\n    proportion: 0,\n    bodyType: 0,\n  },\n  universeAvatarMaxScales: {\n    height: 1.05,\n    width: 1,\n    head: 1,\n    depth: 0,\n    proportion: 1,\n    bodyType: 1,\n  },\n  studioAccessToApisAllowed: false,\n  universeAvatarAssetOverrides: [],\n  permissions: {\n    isThirdPartyTeleportAllowed: false,\n    isThirdPartyAssetAllowed: false,\n    isThirdPartyPurchaseAllowed: false,\n  },\n}\n",
          "exampleRawBody": "{\n  allowPrivateServers: false,\n  privateServerPrice: null,\n  optInRegions: [],\n  isMeshTextureApiAccessAllowed: true,\n  id: 5638577595,\n  name: \"New name!\",\n  description: \"\",\n  universeAvatarType: \"PlayerChoice\",\n  universeAnimationType: \"PlayerChoice\",\n  universeCollisionType: \"OuterBox\",\n  universeJointPositioningType: \"ArtistIntent\",\n  isArchived: false,\n  isFriendsOnly: false,\n  genre: \"All\",\n  playableDevices: [\"Computer\"],\n  isForSale: false,\n  price: 0,\n  universeAvatarAssetOverrides: [],\n  universeAvatarMinScales: {\n    height: 0.9,\n    width: 0.7,\n    head: 0.95,\n    depth: 0,\n    proportion: 0,\n    bodyType: 0,\n  },\n  universeAvatarMaxScales: {\n    height: 1.05,\n    width: 1,\n    head: 1,\n    depth: 0,\n    proportion: 1,\n    bodyType: 1,\n  },\n  studioAccessToApisAllowed: false,\n  permissions: {\n    IsThirdPartyTeleportAllowed: false,\n    IsThirdPartyAssetAllowed: false,\n    IsThirdPartyPurchaseAllowed: false,\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "🤷",
            "description": "The ID of the universe to set configuration for."
          },
          {
            "name": "allowPrivateServers",
            "type": "🤷",
            "description": "If private servers are allowed for the universe."
          },
          {
            "name": "privateServerPrice",
            "type": "🤷",
            "description": "The price of private servers."
          },
          {
            "name": "name",
            "type": "🤷",
            "description": "The new name for the universe."
          },
          {
            "name": "description",
            "type": "🤷",
            "description": "The universes description."
          },
          {
            "name": "avatarType",
            "type": "🤷",
            "description": "The new avatarType for the universe."
          },
          {
            "name": "animationType",
            "type": "🤷",
            "description": "The new animationType for the universe."
          },
          {
            "name": "collisionType",
            "type": "🤷",
            "description": "The new collisionType for the universe."
          },
          {
            "name": "bodyType",
            "type": "🤷",
            "description": "The new bodyType for the universe."
          },
          {
            "name": "jointPositioningType",
            "type": "🤷",
            "description": "The new jointPositioningType for the universe."
          },
          {
            "name": "isArchived",
            "type": "🤷",
            "description": "If the universe is to be archived."
          },
          {
            "name": "isFriendsOnly",
            "type": "🤷",
            "description": "If the universe is to be for friends only."
          },
          {
            "name": "genre",
            "type": "🤷",
            "description": "The new genre for the universe."
          },
          {
            "name": "playableDevices",
            "type": "🤷",
            "description": "The allowed devices the universe can be played on."
          },
          {
            "name": "avatarAssetOverrides",
            "type": "🤷",
            "description": "The overrides for avatar assets."
          },
          {
            "name": "avatarMinScales",
            "type": "🤷",
            "description": "The min scales allowed for avatars."
          },
          {
            "name": "avatarMaxScales",
            "type": "🤷",
            "description": "The max scales allowed for avatars."
          },
          {
            "name": "studioAccessToApisAllowed",
            "type": "🤷",
            "description": "If studio is allowed to access apis."
          },
          {
            "name": "isThirdPartyTeleportAllowed",
            "type": "🤷",
            "description": "If third party teleports are allowed."
          },
          {
            "name": "isThirdPartyAssetAllowed",
            "type": "🤷",
            "description": "if third party assets are allowed."
          },
          {
            "name": "isThirdPartyPurchaseAllowed",
            "type": "🤷",
            "description": "If third party purchases are allowed."
          },
          {
            "name": "isMeshTextureApiAccessAllowed",
            "type": "🤷",
            "description": "If mesh and texture apis can be used for this universe."
          },
          {
            "name": "isForSale",
            "type": "🤷",
            "description": "If the universe is for sale."
          },
          {
            "name": "price",
            "type": "🤷",
            "description": "The price of the universe."
          }
        ]
      },
      "closeTeamTestSession": {
        "description": "Close a game instance that is being used for team testing.",
        "tags": {
          "endpoint": "DELETE /v2/teamtest/{placeId}",
          "example": "const { data: success } = await ClassicDevelopApi.closeTeamTestSession({\n  placeId: 16349154726,\n  jobId: \"0e6f3d93-a4aa-44ab-b3b7-9169ddc1d9a1\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to close team test session for."
          },
          {
            "name": "jobId",
            "type": "string",
            "description": "The ID of the game instance to close."
          }
        ]
      }
    },
    "developerProducts": {
      "developerProductInfo": {
        "description": "Gets information about a particular developer product.",
        "tags": {
          "endpoint": "GET /v1/developer-products/{developerProductId}",
          "example": "const { data: product } = await ClassicDeveloperProductsApi.developerProductInfo({ developerProductId: 3848620 });",
          "exampleData": "{\n  productId: 995087849,\n  productTypeId: 4,\n  isPublicDomain: false,\n  isForSale: true,\n  priceInRobux: 95,\n  premiumPriceInRobux: null,\n  robloxProductId: null,\n  targetId: 3848620,\n  assetTypeId: null,\n  creatorId: 1536374574,\n  assetGenres: 0,\n  assetCategories: 0,\n  affiliateFeePercentage: null,\n  isNew: false,\n  created: \"2020-05-29T11:49:09.08Z\",\n  updated: \"2024-07-22T05:33:16.827Z\",\n}\n",
          "exampleRawBody": "{\n  id: 995087849,\n  productTypeId: 4,\n  isPublicDomain: false,\n  isForSale: true,\n  priceInRobux: 95,\n  premiumPriceInRobux: null,\n  robloxProductId: null,\n  targetId: 3848620,\n  assetTypeId: null,\n  creatorId: 1536374574,\n  assetGenres: 0,\n  assetCategories: 0,\n  affiliateFeePercentage: null,\n  isNew: false,\n  created: \"2020-05-29T11:49:09.08Z\",\n  updated: \"2024-07-22T05:33:16.827Z\",\n}\n"
        },
        "params": [
          {
            "name": "developerProductId",
            "type": "DeveloperProductId",
            "description": "The ID (not product ID) of the developer product."
          }
        ]
      },
      "developerProductsForUniverse": {
        "description": "Gets developer products for a particular universe.",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/developerproducts",
          "example": "const { data: products } = await ClassicDeveloperProductsApi.developerProductsForUniverse({ universeId: 1685831367 });",
          "exampleData": "[\n  {\n    id: 3616380,\n    name: \"Buy $100 CamperCoins\",\n    description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922956503,\n  },\n  {\n    id: 3616418,\n    name: \"Buy $1000 CamperCoins\",\n    description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922970743,\n  },\n  {\n    id: 3616413,\n    name: \"Buy $500 CamperCoins\",\n    description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922969199,\n  },\n  {\n    id: 3616425,\n    name: \"CamperCoins\",\n    description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 18760547825,\n  },\n  {\n    id: 3848620,\n    name: \"Starterpackk\",\n    description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 5106354357,\n  },\n]\n",
          "exampleRawBody": "[\n  {\n    id: 3616380,\n    name: \"Buy $100 CamperCoins\",\n    Description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922956503,\n  },\n  {\n    id: 3616418,\n    name: \"Buy $1000 CamperCoins\",\n    Description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922970743,\n  },\n  {\n    id: 3616413,\n    name: \"Buy $500 CamperCoins\",\n    Description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 4922969199,\n  },\n  {\n    id: 3616425,\n    name: \"CamperCoins\",\n    Description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 18760547825,\n  },\n  {\n    id: 3848620,\n    name: \"Starterpackk\",\n    Description: null,\n    shopId: 1685930453,\n    iconImageAssetId: 5106354357,\n  },\n]\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get developer products from."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results per request."
          },
          {
            "name": "pageNumber?",
            "type": "number",
            "description": "The number for the previous or next page."
          }
        ]
      },
      "updateDeveloperProduct": {
        "description": "Updates a developer product",
        "tags": {
          "endpoint": "GET /v1/universes/{universeId}/developerproducts/{developerProductId}/update",
          "example": "const { data: success } = await ClassicDeveloperProductsApi.updateDeveloperProduct({\n  universeId: 1685831367,\n  developerProductId: 975462435,\n  name: \"CamperCoins\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to update a developer product in."
          },
          {
            "name": "developerProductId",
            "type": "Identifier",
            "description": "The ID of the developer product to update."
          },
          {
            "name": "name?",
            "type": "string",
            "description": "The new name for the developer product."
          },
          {
            "name": "description?",
            "type": "string",
            "description": "The new description for the developer product."
          },
          {
            "name": "priceInRobux?",
            "type": "number",
            "description": "The new price in robux for the developer product."
          }
        ]
      },
      "updateDeveloperProductIcon": {
        "description": "Updates a developer product's icon.",
        "tags": {
          "endpoint": "POST /v1/developer-products/{developerProductId}/image",
          "example": "const {\n  data,\n  response: { body },\n} = await ClassicDeveloperProductsApi.updateDeveloperProductIcon({\n  developerProductId: 975462435,\n  icon: \"./developerProductIcon.png\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ imageAssetId: 18760547825 }\n"
        },
        "params": [
          {
            "name": "developerProductId",
            "type": "Identifier",
            "description": "The ID of the developer product to update icon for."
          },
          {
            "name": "icon",
            "type": "string | File",
            "description": "The new icon for the developer product."
          }
        ]
      },
      "createDeveloperProduct": {
        "description": "Creates a developer product.",
        "tags": {
          "endpoint": "POST /v1/universes/{universeId}/developerproducts",
          "example": "const { data: product } = await ClassicDeveloperProductsApi.createDeveloperProduct({\n  universeId: 1685831367,\n  name: \"50 Coins\",\n  description: \"Lorem Ipsum\",\n  priceInRobux: 50,\n});",
          "exampleData": "{\n  id: 60558911,\n  name: \"50 Coins\",\n  description: \"Lorem Ipsum\",\n  shopId: 1685930453,\n  iconImageAssetId: null,\n}\n",
          "exampleRawBody": "{\n  id: 60558911,\n  name: \"50 Coins\",\n  Description: \"Lorem Ipsum\",\n  shopId: 1685930453,\n  iconImageAssetId: null,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to create a developer product in."
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name for the developer product."
          },
          {
            "name": "description",
            "type": "string",
            "description": "The description for the developer product."
          },
          {
            "name": "priceInRobux",
            "type": "number",
            "description": "The price in robux for the developer product."
          }
        ]
      },
      "developerProductCreatorDetails": {
        "description": "Gets details for the creator about a developer product.",
        "tags": {
          "endpoint": "GET /v1/developer-products/{developerProductId}/creator-details",
          "example": "const { data: productCreatorDetails } = await ClassicDeveloperProductsApi.developerProductCreatorDetails({\n  developerProductProductId: 995087849,\n});",
          "exampleData": "{\n  displayName: \"Starterpackk\",\n  displayDescription: null,\n  displayIconImageAssetId: 5106354357,\n  priceInformation: {\n    defaultPriceInRobux: 95,\n    isInActivePriceOptimizationExperiment: false,\n  },\n  targetId: 3848620,\n  productType: \"Developer Product\",\n  assetId: 0,\n  productId: 995087849,\n  name: \"Starterpackk\",\n  description: null,\n  assetTypeId: 0,\n  creator: { id: 0, name: null, creatorType: null, creatorTargetId: 0 },\n  iconImageAssetId: 5106354357,\n  created: \"2020-05-29T11:49:09.08Z\",\n  updated: \"2024-07-22T05:33:16.827Z\",\n  priceInRobux: null,\n  premiumPriceInRobux: null,\n  priceInTickets: null,\n  isNew: false,\n  isForSale: true,\n  isPublicDomain: false,\n  isLimited: false,\n  isLimitedUnique: false,\n  remaining: null,\n  sales: null,\n  minimumMembershipLevel: 0,\n}\n",
          "exampleRawBody": "{\n  DisplayName: \"Starterpackk\",\n  DisplayDescription: null,\n  DisplayIconImageAssetId: 5106354357,\n  PriceInformation: {\n    defaultPriceInRobux: 95,\n    isInActivePriceOptimizationExperiment: false,\n  },\n  TargetId: 3848620,\n  ProductType: \"Developer Product\",\n  AssetId: 0,\n  ProductId: 995087849,\n  Name: \"Starterpackk\",\n  Description: null,\n  AssetTypeId: 0,\n  Creator: { Id: 0, Name: null, CreatorType: null, CreatorTargetId: 0 },\n  IconImageAssetId: 5106354357,\n  Created: \"2020-05-29T11:49:09.08Z\",\n  Updated: \"2024-07-22T05:33:16.827Z\",\n  PriceInRobux: null,\n  PremiumPriceInRobux: null,\n  PriceInTickets: null,\n  IsNew: false,\n  IsForSale: true,\n  IsPublicDomain: false,\n  IsLimited: false,\n  IsLimitedUnique: false,\n  Remaining: null,\n  Sales: null,\n  MinimumMembershipLevel: 0,\n}\n"
        },
        "params": [
          {
            "name": "developerProductId",
            "type": "🤷",
            "description": "The Product-ID (not ID) of the develoepr product to get creator details for."
          }
        ]
      }
    },
    "economy": {
      "assetResaleData": {
        "description": "Gets resale data for a particular asset.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/resale-data",
          "example": "const { data: resaleData } = await ClassicEconomyApi.assetResaleData({ assetId: 1365767 });",
          "exampleData": "{\n  assetStock: null,\n  sales: 11412,\n  numberRemaining: null,\n  recentAveragePrice: 261565,\n  originalPrice: null,\n  priceDataPoints: [{ value: 271997, date: \"2024-07-30T00:00:00Z\" }],\n  volumeDataPoints: [{ value: 2, date: \"2024-07-30T00:00:00Z\" }],\n}\n",
          "exampleRawBody": "{\n  assetStock: null,\n  sales: 11412,\n  numberRemaining: null,\n  recentAveragePrice: 261565,\n  originalPrice: null,\n  priceDataPoints: [{ value: 271997, date: \"2024-07-30T00:00:00Z\" }],\n  volumeDataPoints: [{ value: 2, date: \"2024-07-30T00:00:00Z\" }],\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to get resale data for."
          }
        ]
      },
      "assetResellers": {
        "description": "Gets resellers for a particular asset.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/resellers",
          "example": "const { data: resellers } = await ClassicEconomyApi.assetResellers({ assetId: 1365767 });",
          "exampleData": "[\n  {\n    userAssetId: 482809968,\n    seller: {\n      hasVerifiedBadge: false,\n      id: 4159620298,\n      type: \"User\",\n      name: \"AnimatedObjects\",\n    },\n    price: 280000,\n    serialNumber: null,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJzdGFydEluZGV4IjoxMCwiZGlzY3JpbWluYXRvciI6ImFzc2V0SWQ6MTM2NTc2NyIsImNvdW50IjoxMH0KYTlmMDVlNGMxZGYwMDMwMjAwOWQ5ODFjMzk5MTY2OWJmNDU1MTljNDQ2OWEzZTZmMGI2NzE0NTgwOWE4NWQzZQ==\",\n  data: [\n    {\n      userAssetId: 482809968,\n      seller: {\n        hasVerifiedBadge: false,\n        id: 4159620298,\n        type: \"User\",\n        name: \"AnimatedObjects\",\n      },\n      price: 280000,\n      serialNumber: null,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to get resellers for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authedUserAssetResellableCopies": {
        "description": "Gets resellable copies of an asset that the authenticated user owns.",
        "tags": {
          "endpoint": "GET /v1/assets/{assetId}/users/{userId}/resellable-copies",
          "example": "const { data: resellableCopies } = await ClassicEconomyApi.authedUserAssetResellableCopies({\n  userId: 45348281,\n  assetId: 3798248888,\n});",
          "exampleData": "[\n  {\n    userAssetId: 45867931761,\n    seller: {\n      hasVerifiedBadge: false,\n      id: 45348281,\n      type: \"User\",\n      name: \"MightyPart\",\n    },\n    price: null,\n    serialNumber: null,\n    isOnHold: false,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      userAssetId: 45867931761,\n      seller: {\n        hasVerifiedBadge: false,\n        id: 45348281,\n        type: \"User\",\n        name: \"MightyPart\",\n      },\n      price: null,\n      serialNumber: null,\n      isOnHold: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the authenticated user."
          },
          {
            "name": "assetId",
            "type": "Identifier",
            "description": "The ID of the asset to get resellable copies for."
          }
        ]
      },
      "assetResaleTaxRate": {
        "description": "Gets asset resale related metadata",
        "tags": {
          "endpoint": "GET /v1/resale-tax-rate",
          "example": "const { data: taxRate } = await ClassicEconomyApi.assetResaleTaxRate();",
          "exampleData": "{ taxRate: 0.3, minimumFee: 1 }\n",
          "exampleRawBody": "{ taxRate: 0.3, minimumFee: 1 }\n"
        },
        "params": []
      },
      "authedUserDevExCashOutInfo": {
        "description": "Gets info data about whether the authenticated user can make a developer exchange cashout request.",
        "tags": {
          "endpoint": "GET /v1/developer-exchange/info",
          "example": "const { data: cashOutInfo } = await ClassicEconomyApi.authedUserDevExCashOutInfo();",
          "exampleData": "{\n  hasCurrencyOperationError: false,\n  currencyOperationErrorMessage: \"\",\n  showOnlyExchangeRates: true,\n  emailIsVerified: true,\n  isImbursementBlacklistUser: false,\n  canProceedToCashout: false,\n  showProgressBar: false,\n  percentRobux: 1,\n  minRobuxToCashOut: 30000,\n  maxRobuxCanCashOut: 20000000000,\n  lastImbursementStatus: null,\n  lastImbursementSubmissionDate: null,\n  conversionPercent: 0.0035,\n}\n",
          "exampleRawBody": "{\n  hasCurrencyOperationError: false,\n  currencyOperationErrorMessage: \"\",\n  showOnlyExchangeRates: true,\n  emailIsVerified: true,\n  isImbursementBlacklistUser: false,\n  canProceedToCashout: false,\n  showProgressBar: false,\n  percentRobux: 1,\n  minRobuxToCashOut: 30000,\n  maxRobuxCanCashOut: 20000000000,\n  lastImbursementStatus: null,\n  lastImbursementSubmissionDate: null,\n  conversionPercent: 0.0035,\n}\n"
        },
        "params": []
      },
      "groupCanAddFunds": {
        "description": "Checks if a group can have funds added to it.",
        "tags": {
          "endpoint": "GET /v1/groups/${groupId}/addfunds/allowed",
          "example": "const { data: canAddFunds } = await ClassicEconomyApi.groupCanAddFunds({ groupId: 5850082 });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to check if funds can be added to."
          }
        ]
      },
      "groupLatestAddedFundsData": {
        "description": "Checks if a group can have funds added to it.",
        "tags": {
          "endpoint": "GET /v1/groups/${groupId}/addfunds/allowed",
          "example": "const { data: fundsData } = await ClassicEconomyApi.groupLatestAddedFundsData({ groupId: 5850082 });",
          "exampleData": "{ transactionDate: null, rateLimitInDays: 30 }\n",
          "exampleRawBody": "{ transactionDate: null, rateLimitInDays: 30 }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to check if funds can be added to."
          }
        ]
      },
      "groupCurrency": {
        "description": "Gets currency for a particular group.",
        "tags": {
          "endpoint": "GET /v1/groups/{groupId}/currency",
          "example": "const { data: currency } = await ClassicEconomyApi.groupCurrency({ groupId: 5850082 });",
          "exampleData": "{ robux: 0 }\n",
          "exampleRawBody": "{ robux: 0 }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to get currency for."
          }
        ]
      },
      "authedUserCurrency": {
        "description": "Gets currency for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/user/currency",
          "example": "const { data: currency } = await ClassicEconomyApi.authedUserCurrency();",
          "exampleData": "{ robux: 0 }\n",
          "exampleRawBody": "{ robux: 0 }\n"
        },
        "params": []
      },
      "groupRevenueSummary": {
        "description": "Gets the revenue summary for a particular group.",
        "tags": {
          "endpoint": "GET /v1/groups/{groupId}/revenue/summary/{timeFrame}",
          "example": "const { data: summary } = await ClassicEconomyApi.groupRevenueSummary({ groupId: 5850082, timeFrame: \"Day\" });",
          "exampleData": "{\n  recurringRobuxStipend: 0,\n  itemSaleRobux: 0,\n  purchasedRobux: 0,\n  tradeSystemRobux: 0,\n  pendingRobux: 0,\n  groupPayoutRobux: 0,\n  individualToGroupRobux: 0,\n  premiumPayouts: 0,\n  groupPremiumPayouts: 0,\n  adjustmentRobux: 0,\n  immersiveAdPayouts: 0,\n  subscriptionPayouts: 0,\n  subscriptionClawbacks: 0,\n  isShowImmersiveAdPayoutSummaryOnZeroEnabled: false,\n  commissionRobux: 0,\n  publishingAdvanceRebates: 0,\n}\n",
          "exampleRawBody": "{\n  recurringRobuxStipend: 0,\n  itemSaleRobux: 0,\n  purchasedRobux: 0,\n  tradeSystemRobux: 0,\n  pendingRobux: 0,\n  groupPayoutRobux: 0,\n  individualToGroupRobux: 0,\n  premiumPayouts: 0,\n  groupPremiumPayouts: 0,\n  adjustmentRobux: 0,\n  immersiveAdPayouts: 0,\n  subscriptionPayouts: 0,\n  subscriptionClawbacks: 0,\n  isShowImmersiveAdPayoutSummaryOnZeroEnabled: false,\n  commissionRobux: 0,\n  publishingAdvanceRebates: 0,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to get the revenue summary for."
          },
          {
            "name": "timeFrame",
            "type": "\"Day\" | \"Week\" | \"Month\" | \"Year\"",
            "description": "The timeframe of the summary to get."
          }
        ]
      },
      "groupPayoutsUserEligibility": {
        "description": "Gets the group payout eligibility for a group of users.",
        "tags": {
          "endpoint": "GET /v1/groups/{groupId}/users-payout-eligibility",
          "example": "const { data: eligibility } = await ClassicEconomyApi.groupPayoutsUserEligibility({\n  groupId: 14941564,\n  userIds: [1412728377],\n});",
          "exampleData": "{ \"1412728377\": \"Eligible\" }\n",
          "exampleRawBody": "{ usersGroupPayoutEligibility: { \"1412728377\": \"Eligible\" } }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group."
          },
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The userIds to check for payout eligibility."
          }
        ]
      },
      "groupTransactionHistory": {
        "description": "Gets transaction history for a particular group.",
        "tags": {
          "endpoint": "GET /v2/group/${groupId}/transactions",
          "example": "const { data: transactions } = await ClassicEconomyApi.groupTransactionHistory({\n  groupId: 5850082,\n  transactionType: \"Sale\",\n});",
          "exampleData": "[\n  {\n    id: 14289110391,\n    idHash: \"L1HiwSO1f1e68Xh1d50b91\",\n    created: \"2022-07-09T21:35:43.013Z\",\n    isPending: false,\n    agent: { id: 473747714, type: \"User\", name: \"LoremIpsum\" },\n    details: {\n      id: 1116381,\n      name: \"Buy 100 Coins\",\n      type: \"DeveloperProduct\",\n      place: {\n        placeId: 1121711941,\n        universeId: 8681831361,\n        name: \"LoremIpsumGame\",\n      },\n    },\n    currency: { amount: 0, type: \"Robux\" },\n    purchaseToken: null,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJrZXkiOjEwLCJzb3J0T3JkZXIiOiJBc2MiLCJwYWdpbmdEaXJlY3Rpb24iOiJGb3J3YXJkIiwicGFnZU51bWJlciI6MiwiZGlzY3JpbWluYXRvciI6Imdyb3VwSWQ6NTg1MDA4MnRyYW5zYWN0aW9uVHlwZTpTYWxlIiwiY291bnQiOjEwfQpiYzljYmU0OTFiNjlmNTBmZDBiMGM3YzJmZTVlN2RkMGNlZjY5ZTQ4ZTRiODViZDNiMzBlZGM0NDNiZDMxMmU0\",\n  data: [\n    {\n      id: 14289110391,\n      idHash: \"L1HiwSO1f1e68Xh1d50b91\",\n      created: \"2022-07-09T21:35:43.013Z\",\n      isPending: false,\n      agent: { id: 473747714, type: \"User\", name: \"LoremIpsum\" },\n      details: {\n        id: 1116381,\n        name: \"Buy 100 Coins\",\n        type: \"DeveloperProduct\",\n        place: {\n          placeId: 1121711941,\n          universeId: 8681831361,\n          name: \"LoremIpsumGame\",\n        },\n      },\n      currency: { amount: 0, type: \"Robux\" },\n      purchaseToken: null,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to get transaction history for."
          },
          {
            "name": "transactionType",
            "type": "Type",
            "description": "The transaction type to get."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authedUserEconomyMetadata": {
        "description": "Gets economy metadata for the authenticated user.",
        "tags": {
          "endpoint": "GET /v2/metadata",
          "example": "const { data: metadata } = await ClassicEconomyApi.authedUserEconomyMetadata();",
          "exampleData": "{\n  isMarketPlaceEnabled: true,\n  isItemsXchangeEnabled: true,\n  isGroupSalesAmountTooltipEnabled: true,\n  isTransactionsRecordsDownloadEnabled: true,\n  transactionRecordsDownloadEarliestYearDiff: 2,\n  isCommissionRecordsDownloadEnabled: false,\n  isGroupCommissionsPageEnabled: true,\n  isPublishingAdvanceRebatePageEnabled: true,\n}\n",
          "exampleRawBody": "{\n  isMarketPlaceEnabled: true,\n  isItemsXchangeEnabled: true,\n  isGroupSalesAmountTooltipEnabled: true,\n  isTransactionsRecordsDownloadEnabled: true,\n  transactionRecordsDownloadEarliestYearDiff: 0,\n  isCommissionRecordsDownloadEnabled: true,\n  isGroupCommissionsPageEnabled: true,\n  isPublishingAdvanceRebatePageEnabled: true,\n}\n"
        },
        "params": []
      }
    },
    "friends": {
      "friendsMetadata": {
        "description": "Gets friends metadata.",
        "tags": {
          "endpoint": "GET /v1/metadata",
          "example": "const { data: metadata } = await ClassicFriendsApi.friendsMetadata();",
          "exampleData": "{\n  isFriendsFilterBarEnabled: true,\n  isFriendsPageSortExperimentEnabled: false,\n  isFriendsUserDataStoreCacheEnabled: true,\n  frequentFriendSortRollout: 0,\n  userName: null,\n  displayName: null,\n}\n",
          "exampleRawBody": "{\n  isFriendsFilterBarEnabled: true,\n  isFriendsPageSortExperimentEnabled: false,\n  isFriendsUserDataStoreCacheEnabled: true,\n  frequentFriendSortRollout: 0,\n  userName: null,\n  displayName: null,\n}\n"
        },
        "params": []
      },
      "authenticatedUserFriendsCount": {
        "description": "Gets the amount of friends the authenticated user has.",
        "tags": {
          "endpoint": "GET /v1/my/friends/count",
          "example": "const { data: metadata } = await ClassicFriendsApi.friendsMetadata();",
          "exampleData": "",
          "exampleRawBody": "{ count: 47 }\n"
        },
        "params": []
      },
      "authenticatedUserFriendRequests": {
        "description": "Gets friends requests sent to the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/my/friends/requests",
          "example": "const { data: requests } = await ClassicFriendsApi.authenticatedUserFriendRequests({ limit: 10 });",
          "exampleData": "[\n  {\n    friendRequest: {\n      sentAt: \"2024-03-24T02:25:33.095Z\",\n      senderId: 5635371081,\n      sourceUniverseId: 2549415383,\n      originSourceType: \"InGame\",\n      contactName: null,\n    },\n    mutualFriendsList: [],\n    hasVerifiedBadge: false,\n    description: \"\",\n    created: \"2024-03-04T15:20:32.033Z\",\n    isBanned: false,\n    externalAppDisplayName: null,\n    id: 5635371081,\n    name: \"loremIpsum\",\n    displayName: \"loremIpsum\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"638366615689560000-0_1_bcccef3d2c3547470ca9dc3072eedfec\",\n  data: [\n    {\n      friendRequest: {\n        sentAt: \"2024-03-24T02:25:33.095Z\",\n        senderId: 5635371081,\n        sourceUniverseId: 2549415383,\n        originSourceType: \"InGame\",\n        contactName: null,\n      },\n      mutualFriendsList: [],\n      hasVerifiedBadge: false,\n      description: \"\",\n      created: \"2024-03-04T15:20:32.033Z\",\n      isBanned: false,\n      externalAppDisplayName: null,\n      id: 5635371081,\n      name: \"loremIpsum\",\n      displayName: \"loremIpsum\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "limit?",
            "type": "10 | 18 | 25 | 50 | 100",
            "description": "The number of results to be returned per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authenticatedUserFriendRequestsCount": {
        "description": "Gets the amount of friend requests the authenticated user has.",
        "tags": {
          "endpoint": "GET /v1/user/friend-requests/count",
          "example": "const { data: requestsCount } = await ClassicFriendsApi.authenticatedUserFriendRequestsCount();",
          "exampleData": "",
          "exampleRawBody": "{ count: 82 }\n"
        },
        "params": []
      },
      "friendsList": {
        "description": "Gets friends for a specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends",
          "example": "const { data: friends } = await ClassicFriendsApi.friendsList({ userId: 45348281 });",
          "exampleData": "[\n  {\n    isOnline: true,\n    presenceType: 1,\n    isDeleted: false,\n    friendFrequentScore: 0,\n    friendFrequentRank: 1,\n    hasVerifiedBadge: false,\n    description: null,\n    created: \"0001-01-01T05:52:00Z\",\n    isBanned: false,\n    externalAppDisplayName: null,\n    id: 1999518862,\n    name: \"Ipsum\",\n    displayName: \"Lorem\",\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      isOnline: true,\n      presenceType: 1,\n      isDeleted: false,\n      friendFrequentScore: 0,\n      friendFrequentRank: 1,\n      hasVerifiedBadge: false,\n      description: null,\n      created: \"0001-01-01T05:52:00Z\",\n      isBanned: false,\n      externalAppDisplayName: null,\n      id: 1999518862,\n      name: \"Ipsum\",\n      displayName: \"Lorem\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get friends for."
          },
          {
            "name": "userSort?",
            "type": "FriendsUserSort",
            "description": "Specifies how to sort the returned friends."
          }
        ]
      },
      "friendsCount": {
        "description": "Gets friends count for a specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/count",
          "example": "const { data: count } = await ClassicFriendsApi.friendsCount({ userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": "{ count: 47 }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get friends for."
          }
        ]
      },
      "findFriends": {
        "description": "Gets a paginated list of all friends for the specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/find",
          "example": "const { data: friends } = await ClassicFriendsApi.userfollowersCount({ userId: 45348281 });",
          "exampleData": "[\n  { id: 2820974191, hasVerifiedBadge: false },\n  { id: 29992184, hasVerifiedBadge: true },\n]\n",
          "exampleRawBody": "{\n  PreviousCursor: null,\n  PageItems: [\n    { id: 2820974191, hasVerifiedBadge: false },\n    { id: 29992184, hasVerifiedBadge: true },\n  ],\n  NextCursor: \"MTk5OTIxODE2MiYxNzYxMjQwMTYmMg==\",\n  HasMore: null,\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get friends for."
          },
          {
            "name": "userSort?",
            "type": "FriendsUserSort",
            "description": "Specifies how to sort the returned friends."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results to be returned"
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "inactiveFriends": {
        "description": "Gets a list of all inactive friends for a specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/inactive",
          "example": "const { data: inactive } = await ClassicFriendsApi.inactiveFriends({ userId: 45348281 });",
          "exampleData": "[\n  {\n    isDeleted: false,\n    friendFrequentScore: 0,\n    friendFrequentRank: 201,\n    hasVerifiedBadge: false,\n    description: null,\n    created: \"0001-01-01T05:51:00.000Z\",\n    isBanned: false,\n    externalAppDisplayName: null,\n    id: 5275218436,\n    name: \"loremIpsum\",\n    displayName: \"LoremIpsum\",\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      isDeleted: false,\n      friendFrequentScore: 0,\n      friendFrequentRank: 201,\n      hasVerifiedBadge: false,\n      description: null,\n      created: \"0001-01-01T05:51:00.000Z\",\n      isBanned: false,\n      externalAppDisplayName: null,\n      id: 5275218436,\n      name: \"loremIpsum\",\n      displayName: \"LoremIpsum\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get inactive friends for."
          }
        ]
      },
      "onlineFriends": {
        "description": "Gets a list of all online friends for a specified user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/online",
          "example": "const { data: online } = await ClassicFriendsApi.onlineFriends({ userId: 45348281 });",
          "exampleData": "[\n  {\n    userPresence: {\n      lastLocation: \"Simulator Simulator X 99 360\",\n      placeId: 223715525,\n      rootPlaceId: 221718525,\n      gameInstanceId: \"acd149a6-d1ed-49d7-aa08-643d62cb3068\",\n      universeId: 93141687,\n      lastOnline: \"2024-05-20T14:34:40.820Z\",\n      userPresenceType: \"InGame\",\n      userLocationType: \"Game\",\n    },\n    id: 2966800574,\n    name: \"loremIpsum\",\n    displayName: \"LoremIpsum\",\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      userPresence: {\n        lastLocation: \"Simulator Simulator X 99 360\",\n        placeId: 223715525,\n        rootPlaceId: 221718525,\n        gameInstanceId: \"acd149a6-d1ed-49d7-aa08-643d62cb3068\",\n        universeId: 93141687,\n        lastOnline: \"2024-05-20T14:34:40.820Z\",\n        userPresenceType: \"InGame\",\n        userLocationType: \"Game\",\n      },\n      id: 2966800574,\n      name: \"loremIpsum\",\n      displayName: \"LoremIpsum\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get online friends for."
          },
          {
            "name": "userSort?",
            "type": "Exclude<FriendsUserSort, \"Alphabetical\">",
            "description": "Specifies how to sort the returned friends."
          }
        ]
      },
      "friendsSearch": {
        "description": "Search through a users friends list.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/search",
          "example": "const { data: searchedFriend } = await ClassicFriendsApi.friendsSearch({ userId: 45348281, query: \"b\" });",
          "exampleData": "[\n  { id: 2027974391, hasVerifiedBadge: false },\n  { id: 176144016, hasVerifiedBadge: false },\n  { id: 3116019601, hasVerifiedBadge: false },\n]\n",
          "exampleRawBody": "{\n  PreviousCursor: null,\n  PageItems: [\n    { id: 2027974391, hasVerifiedBadge: false },\n    { id: 176144016, hasVerifiedBadge: false },\n    { id: 3116019601, hasVerifiedBadge: false },\n  ],\n  NextCursor: null,\n  HasMore: null,\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get online friends for."
          },
          {
            "name": "query",
            "type": "string",
            "description": "The query to search for."
          },
          {
            "name": "userSort?",
            "type": "Exclude<FriendsUserSort, \"Alphabetical\">",
            "description": "Specifies how to sort the returned friends."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results to be returned per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "friendsStatuses": {
        "description": "Gets the friend statuses between a user and multiple related user ids.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/friends/search",
          "example": "const { data: statuses } = await ClassicFriendsApi.friendsStatuses({ userId: 45348281, relatedUserIds: [2655994471] });",
          "exampleData": "{ \"2655994471\": \"Friends\" }\n",
          "exampleRawBody": "{ data: [{ id: 2655994471, status: \"Friends\" }] }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get friends statuses for."
          },
          {
            "name": "relatedUserIds",
            "type": "ArrayNonEmptyIfConst<RelatedUserId>",
            "description": "An array of the related userIds to get friends statuses for."
          }
        ]
      },
      "authenticatedUserDeclineAllFriendRequests": {
        "description": "Declines all friend requests for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/user/friend-requests/decline-all",
          "example": "const { data: success } = await ClassicFriendsApi.authenticatedUserDeclineAllFriendRequests();",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": []
      },
      "authenticatedUserAcceptFriendRequest": {
        "description": "Accepts a friend request from a specific user for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/users/{userId}/accept-friend-request",
          "example": "const { data: success } = await ClassicFriendsApi.authenticatedUserAcceptFriendRequest({ userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to accept friend request from."
          }
        ]
      },
      "authenticatedUserDeclineFriendRequest": {
        "description": "Accepts a friend request from a specific user for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/users/{requesterUserId}/decline-friend-request",
          "example": "const { data: success } = await ClassicFriendsApi.authenticatedUserDeclineFriendRequest({\n  requesterUserId: 2655994471,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "requesterUserId",
            "type": "Identifier",
            "description": "The id of the user to decline friend request from."
          }
        ]
      },
      "authenticatedUserRequestFriendship": {
        "description": "Sends a friend request to a specific user.",
        "tags": {
          "endpoint": "REST /...",
          "example": "const { data: requestStatus } = await ClassicFriendsApi.authenticatedUserRequestFriendship({\n  userId: 2655994471,\n  originSourceType: \"UserProfile\",\n});",
          "exampleData": "{ success: true, isCaptchaRequired: false }\n",
          "exampleRawBody": "{ success: true, isCaptchaRequired: false }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to send a friend request to."
          },
          {
            "name": "originSourceType?",
            "type": "FriendshipOriginSourceType",
            "description": "Where the friend request originated from."
          }
        ]
      },
      "authenticatedUserUnfriend": {
        "description": "Removes a friend for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/users/{targetUserId}/unfriend",
          "example": "const { data: success } = await ClassicFriendsApi.authenticatedUserUnfriend({ userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "targetUserId",
            "type": "🤷",
            "description": "The id of the user to remove as friend."
          }
        ]
      },
      "userFollowers": {
        "description": "Gets the followers for a specific user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/followers",
          "example": "const { data: followersCount } = await ClassicFriendsApi.userfollowersCount({ userId: 45348281 });",
          "exampleData": "[\n  {\n    isDeleted: false,\n    friendFrequentScore: 0,\n    friendFrequentRank: 201,\n    hasVerifiedBadge: true,\n    description: null,\n    created: \"0001-01-01T05:51:00.000Z\",\n    isBanned: false,\n    externalAppDisplayName: null,\n    id: 156,\n    name: \"builderman\",\n    displayName: \"builderman\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"745831147_1_1e210d709f013f76846a9e2517aa7263\",\n  data: [\n    {\n      isDeleted: false,\n      friendFrequentScore: 0,\n      friendFrequentRank: 201,\n      hasVerifiedBadge: true,\n      description: null,\n      created: \"0001-01-01T05:51:00.000Z\",\n      isBanned: false,\n      externalAppDisplayName: null,\n      id: 156,\n      name: \"builderman\",\n      displayName: \"builderman\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get the followers for."
          },
          {
            "name": "limit?",
            "type": "10 | 18 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "userFollowersCount": {
        "description": "Gets the followers count for a specific user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/followers/count",
          "example": "const { data: followersCount } = await ClassicFriendsApi.userfollowersCount({ userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": "{ count: 510 }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get the follower count for."
          }
        ]
      },
      "userFollowings": {
        "description": "Gets the followings for a specific user.",
        "tags": {
          "endpoint": "REST /...",
          "example": "",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get followings for."
          },
          {
            "name": "limit",
            "type": "10 | 18 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "userFollowingsCount": {
        "description": "Gets the number of followings a user has.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/followings/count",
          "example": "const { data: followingsCount } = await ClassicFriendsApi.userFollowingsCount({ userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": "{ count: 337 }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get followings count for."
          }
        ]
      },
      "authenticatedUserFollowingsExist": {
        "description": "Returns whether or not the current user is following each userId in a list of userIds",
        "tags": {
          "endpoint": "POST /v1/user/following-exists",
          "example": "const { data: followings } = await ClassicFriendsApi.authenticatedUserFollowingsExist({ userIds: [2655994471] });",
          "exampleData": "{ \"2655994471\": { isFollowing: false, isFollowed: false } }\n",
          "exampleRawBody": "{\n  followings: [\n    { isFollowing: false, isFollowed: false, userId: 2655994471 },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The userIds to get following statuses for."
          }
        ]
      }
    },
    "gamePasses": {
      "gamePassInfo": {
        "description": "Gets information about a game pass.",
        "tags": {
          "endpoint": "GET /v1/game-passes/{gamePassId}/product-info",
          "example": "const { data: gamePassInfo } = await ClassicGamePassesApi.gamePassInfo({ gamePassId: 9260480 });",
          "exampleData": "",
          "exampleRawBody": "{\n  TargetId: 9260480,\n  ProductType: \"Game Pass\",\n  AssetId: 0,\n  ProductId: 979386303,\n  Name: \"Donate\",\n  Description: \"null\",\n  AssetTypeId: 0,\n  Creator: {\n    Id: 1536374574,\n    Name: \"MightyPart Games\",\n    CreatorType: \"Group\",\n    CreatorTargetId: 5850082,\n  },\n  IconImageAssetId: 5316458121,\n  Created: \"2020-05-01T15:05:21.543Z\",\n  Updated: \"2020-07-09T13:08:21.133Z\",\n  PriceInRobux: 15,\n  PriceInTickets: null,\n  Sales: 6,\n  IsNew: false,\n  IsForSale: true,\n  IsPublicDomain: false,\n  IsLimited: false,\n  IsLimitedUnique: false,\n  Remaining: null,\n  MinimumMembershipLevel: 0,\n}\n"
        },
        "params": [
          {
            "name": "gamePassId",
            "type": "GamePassId",
            "description": "The ID of the game pass to get information about."
          }
        ]
      },
      "gamePassesForUniverse": {
        "description": "Gets game passes for a particular universe.",
        "tags": {
          "endpoint": "GET /v1/game-passes/universes/{universeId}/creator",
          "example": "const { data: gamePasses } = await ClassicGamePassesApi.gamePassesForUniverse({ universeId: 1685831367, limit: 1 });",
          "exampleData": "[\n  {\n    gamePassId: 11546631,\n    name: \"Donate Pluss\",\n    description: \"nulll\",\n    isForSale: true,\n    iconAssetId: 18759297002,\n    placeId: 4922741943,\n    createdTimestamp: \"2020-09-01T00:15:17.79Z\",\n    updatedTimestamp: \"2024-08-02T00:43:10.541Z\",\n    priceInformation: {\n      defaultPriceInRobux: 250,\n      isInActivePriceOptimizationExperiment: false,\n      isInActiveDiscountCampaign: false,\n      discountPercentage: 0,\n    },\n    productId: 1084063256,\n  },\n]\n",
          "exampleRawBody": "{\n  gamePasses: [\n    {\n      gamePassId: 11546631,\n      name: \"Donate Pluss\",\n      description: \"nulll\",\n      isForSale: true,\n      iconAssetId: 18759297002,\n      placeId: 4922741943,\n      createdTimestamp: \"2020-09-01T00:15:17.79Z\",\n      updatedTimestamp: \"2024-08-02T00:43:10.541Z\",\n      priceInformation: {\n        defaultPriceInRobux: 250,\n        isInActivePriceOptimizationExperiment: false,\n        isInActiveDiscountCampaign: false,\n        discountPercentage: 0,\n      },\n      productId: 1084063256,\n    },\n  ],\n  cursor: \"id_2zwAAAXRHBJkezgCwMAc\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get game passes for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "updateGamePass": {
        "description": "Updates a game pass.",
        "tags": {
          "endpoint": "POST /v1/game-passes/{gamePassId}/details",
          "example": "const { data: success } = await ClassicGamePassesApi.updateGamePass({\n  gamePassId: 9260480,\n  name: \"Donate\",\n  icon: \"./gamePassIcon.png\",\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "gamePassId",
            "type": "Identifier",
            "description": "The ID of the game pass to update."
          },
          {
            "name": "name?",
            "type": "string",
            "description": "The new name for the game pass."
          },
          {
            "name": "description?",
            "type": "string",
            "description": "The new description for the game pass."
          },
          {
            "name": "icon?",
            "type": "string | File",
            "description": "The new icon for the game pass."
          },
          {
            "name": "price?",
            "type": "number",
            "description": "The new price for the game pass."
          },
          {
            "name": "isForSale?",
            "type": "boolean",
            "description": "If the game pass should be for sale."
          }
        ]
      },
      "createGamePass": {
        "description": "Creates a game pass.",
        "tags": {
          "endpoint": "POST /v1/game-passes",
          "example": "const { data: gamePassId } = await ClassicGamePassesApi.createGamePass({\n  universeId: 1685831367,\n  name: \"My Pass\",\n  description: \"Lorem Ipsum...\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ gamePassId: 810182288 }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get a game pass in."
          },
          {
            "name": "name",
            "type": "string",
            "description": "The name for the game pass."
          },
          {
            "name": "description",
            "type": "string",
            "description": "The description for the game pass."
          },
          {
            "name": "icon?",
            "type": "string | File",
            "description": "The icon for the game pass."
          }
        ]
      }
    },
    "games": {
      "universesInfo": {
        "description": "Gets a list of games info from universe ids.",
        "tags": {
          "endpoint": "GET /v1/games",
          "example": "const { data: games } = await ClassicGamesApi.universesInfo({ universeIds: [1685831367] });",
          "exampleData": "{\n  \"1685831367\": {\n    rootPlaceId: 4922741943,\n    name: \"RoCamping\",\n    description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n    sourceName: \"RoCamping\",\n    sourceDescription: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n    creator: {\n      id: 5850082,\n      name: \"MightyPart Games\",\n      type: \"Group\",\n      isRNVAccount: false,\n      hasVerifiedBadge: false,\n    },\n    price: null,\n    allowedGearGenres: [\"Adventure\"],\n    allowedGearCategories: [],\n    isGenreEnforced: true,\n    copyingAllowed: false,\n    playing: 0,\n    visits: 2718,\n    maxPlayers: 4,\n    created: \"2020-04-20T15:36:20.927Z\",\n    updated: \"2024-05-23T20:51:29.867Z\",\n    studioAccessToApisAllowed: false,\n    createVipServersAllowed: false,\n    universeAvatarType: \"MorphToR15\",\n    genre: \"Adventure\",\n    isAllGenre: false,\n    isFavoritedByUser: true,\n    favoritedCount: 97,\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 1685831367,\n      rootPlaceId: 4922741943,\n      name: \"RoCamping\",\n      description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n      sourceName: \"RoCamping\",\n      sourceDescription: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n      creator: {\n        id: 5850082,\n        name: \"MightyPart Games\",\n        type: \"Group\",\n        isRNVAccount: false,\n        hasVerifiedBadge: false,\n      },\n      price: null,\n      allowedGearGenres: [\"Adventure\"],\n      allowedGearCategories: [],\n      isGenreEnforced: true,\n      copyingAllowed: false,\n      playing: 0,\n      visits: 2718,\n      maxPlayers: 4,\n      created: \"2020-04-20T15:36:20.927Z\",\n      updated: \"2024-05-23T20:51:29.867Z\",\n      studioAccessToApisAllowed: false,\n      createVipServersAllowed: false,\n      universeAvatarType: \"MorphToR15\",\n      genre: \"Adventure\",\n      isAllGenre: false,\n      isFavoritedByUser: true,\n      favoritedCount: 97,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The IDs of the games to get information for."
          }
        ]
      },
      "universesProductInfo": {
        "description": "Gets product information for multiple games.",
        "tags": {
          "endpoint": "GET /v1/games/games-product-info",
          "example": "const { data: products } = await ClassicGamesApi.universesProductInfo({ universeIds: [1685831367] });",
          "exampleData": "{\n  \"1685831367\": {\n    isForSale: false,\n    productId: 0,\n    price: null,\n    sellerId: 1536374574,\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      universeId: 1685831367,\n      isForSale: false,\n      productId: 0,\n      price: null,\n      sellerId: 1536374574,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The IDs of the games to get product information for."
          }
        ]
      },
      "authedUserSpotlightedGames": {
        "description": "Gets games that should be spotlighted by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/games/list-spotlight",
          "example": "const { data: spotlightedGames } = await ClassicGamesApi.authedUserSpotlightedGames();",
          "exampleData": "[\n  {\n    spotlightType: \"RecommendedForYou\",\n    spotlightActionText: \"Recommended For You\",\n    spotlightTypeData: null,\n    gameInfo: {\n      creatorId: 61596111,\n      creatorName: \"LoremIpsum\",\n      creatorType: \"User\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 1128381,\n      totalDownVotes: 102161,\n      universeId: 1116885111,\n      name: \"Simulator Simulator\",\n      placeId: 1924121221,\n      playerCount: 161616,\n      imageToken: \"T_4921112121_61da\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n  },\n]\n",
          "exampleRawBody": "[\n  {\n    spotlightType: \"RecommendedForYou\",\n    spotlightActionText: \"Recommended For You\",\n    spotlightTypeData: null,\n    gameInfo: {\n      creatorId: 61596111,\n      creatorName: \"LoremIpsum\",\n      creatorType: \"User\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 1128381,\n      totalDownVotes: 102161,\n      universeId: 1116885111,\n      name: \"Simulator Simulator\",\n      placeId: 1924121221,\n      playerCount: 161616,\n      imageToken: \"T_4921112121_61da\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n  },\n]\n"
        },
        "params": []
      },
      "placesInfo": {
        "description": "Gets information for multiple places.",
        "tags": {
          "endpoint": "GET /v1/games/multiget-place-details",
          "example": "const { data: places } = await ClassicGamesApi.placesInfo({ placeIds: [4922741943] });",
          "exampleData": "{\n  \"4922741943\": {\n    name: \"RoCamping\",\n    description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n    sourceName: \"RoCamping\",\n    sourceDescription: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\",\n    url: \"https://www.roblox.com/games/4922741943/RoCamping\",\n    builder: \"MightyPart Games\",\n    builderId: 5850082,\n    hasVerifiedBadge: false,\n    isPlayable: true,\n    reasonProhibited: \"None\",\n    universeId: 1685831367,\n    universeRootPlaceId: 4922741943,\n    price: 0,\n    imageToken: \"T_4922741943_678b\",\n  },\n}\n",
          "exampleRawBody": "[\n  {\n    placeId: 4922741943,\n    name: \"RoCamping\",\n    description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n    sourceName: \"RoCamping\",\n    sourceDescription: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\",\n    url: \"https://www.roblox.com/games/4922741943/RoCamping\",\n    builder: \"MightyPart Games\",\n    builderId: 5850082,\n    hasVerifiedBadge: false,\n    isPlayable: true,\n    reasonProhibited: \"None\",\n    universeId: 1685831367,\n    universeRootPlaceId: 4922741943,\n    price: 0,\n    imageToken: \"T_4922741943_678b\",\n  },\n]\n"
        },
        "params": [
          {
            "name": "placeIds",
            "type": "ArrayNonEmptyIfConst<PlaceId>",
            "description": "The IDs of the places to get information for."
          }
        ]
      },
      "authedUserGamesPlayabilityStatuses": {
        "description": "Gets universes playability statuses for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/games/multiget-playability-status",
          "example": "const { data: playabilityStatuses } = await ClassicGamesApi.authedUserGamesPlayabilityStatuses({\n  universeIds: [1685831367],\n});",
          "exampleData": "{ \"1685831367\": { playabilityStatus: \"Playable\", isPlayable: true } }\n",
          "exampleRawBody": "[\n  {\n    playabilityStatus: \"Playable\",\n    isPlayable: true,\n    universeId: 1685831367,\n  },\n]\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The IDs of the universes to get playability statuses for."
          }
        ]
      },
      "recommendationsFromUniverse": {
        "description": "Get game recommendations based on a particular universe.",
        "tags": {
          "endpoint": "GET /v1/games/recommendations/game/{universeId}",
          "example": "const { data: recommendations } = await ClassicGamesApi.recommendationsFromUniverse({ universeId: 1685831367 });",
          "exampleData": "[\n  {\n    creatorId: 61648063,\n    creatorName: \"ItsMuneeeb\",\n    creatorType: \"User\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 1257869,\n    totalDownVotes: 116797,\n    universeId: 2711375305,\n    name: \"Catalog Avatar Creator\",\n    placeId: 7041939546,\n    playerCount: 25621,\n    imageToken: \"T_7041939546_4ca1\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n  {\n    creatorId: 15022320,\n    creatorName: \"Telanthric Development\",\n    creatorType: \"Group\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 1048903,\n    totalDownVotes: 143468,\n    universeId: 4778845442,\n    name: \"[🔥ABYSMAL MODE] Toilet Tower Defense\",\n    placeId: 13775256536,\n    playerCount: 43710,\n    imageToken: \"T_13775256536_16f1\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n  {\n    creatorId: 12836673,\n    creatorName: \"Wiggity.\",\n    creatorType: \"Group\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 6142327,\n    totalDownVotes: 419260,\n    universeId: 4777817887,\n    name: \"[TRADE] Blade Ball\",\n    placeId: 13772394625,\n    playerCount: 51902,\n    imageToken: \"T_13772394625_9ccc\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n  {\n    creatorId: 60596019,\n    creatorName: \"Wolfpaq\",\n    creatorType: \"User\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 5829113,\n    totalDownVotes: 902982,\n    universeId: 1686885941,\n    name: \"Brookhaven 🏡RP\",\n    placeId: 4924922222,\n    playerCount: 415192,\n    imageToken: \"T_4924922222_6555\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n  {\n    creatorId: 3959677,\n    creatorName: \"BIG Games Pets\",\n    creatorType: \"Group\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 2426474,\n    totalDownVotes: 92767,\n    universeId: 3317771874,\n    name: \"Pet Simulator 99! 🎲 RNG\",\n    placeId: 8737899170,\n    playerCount: 229718,\n    imageToken: \"T_8737899170_539c\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n  {\n    creatorId: 12013007,\n    creatorName: \"Yielding Arts\",\n    creatorType: \"Group\",\n    creatorHasVerifiedBadge: true,\n    totalUpVotes: 2469880,\n    totalDownVotes: 470017,\n    universeId: 3808081382,\n    name: \"[BOSS] The Strongest Battlegrounds\",\n    placeId: 10449761463,\n    playerCount: 172610,\n    imageToken: \"T_10449761463_f88a\",\n    isSponsored: false,\n    nativeAdData: \"\",\n    isShowSponsoredLabel: false,\n    price: null,\n    analyticsIdentifier: null,\n    gameDescription: \"\",\n    genre: \"\",\n    minimumAge: 0,\n    ageRecommendationDisplayName: \"\",\n  },\n]\n",
          "exampleRawBody": "{\n  games: [\n    {\n      creatorId: 61648063,\n      creatorName: \"ItsMuneeeb\",\n      creatorType: \"User\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 1257869,\n      totalDownVotes: 116797,\n      universeId: 2711375305,\n      name: \"Catalog Avatar Creator\",\n      placeId: 7041939546,\n      playerCount: 25621,\n      imageToken: \"T_7041939546_4ca1\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n    {\n      creatorId: 15022320,\n      creatorName: \"Telanthric Development\",\n      creatorType: \"Group\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 1048903,\n      totalDownVotes: 143468,\n      universeId: 4778845442,\n      name: \"[🔥ABYSMAL MODE] Toilet Tower Defense\",\n      placeId: 13775256536,\n      playerCount: 43710,\n      imageToken: \"T_13775256536_16f1\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n    {\n      creatorId: 12836673,\n      creatorName: \"Wiggity.\",\n      creatorType: \"Group\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 6142327,\n      totalDownVotes: 419260,\n      universeId: 4777817887,\n      name: \"[TRADE] Blade Ball\",\n      placeId: 13772394625,\n      playerCount: 51902,\n      imageToken: \"T_13772394625_9ccc\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n    {\n      creatorId: 60596019,\n      creatorName: \"Wolfpaq\",\n      creatorType: \"User\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 5829113,\n      totalDownVotes: 902982,\n      universeId: 1686885941,\n      name: \"Brookhaven 🏡RP\",\n      placeId: 4924922222,\n      playerCount: 415192,\n      imageToken: \"T_4924922222_6555\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n    {\n      creatorId: 3959677,\n      creatorName: \"BIG Games Pets\",\n      creatorType: \"Group\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 2426474,\n      totalDownVotes: 92767,\n      universeId: 3317771874,\n      name: \"Pet Simulator 99! 🎲 RNG\",\n      placeId: 8737899170,\n      playerCount: 229718,\n      imageToken: \"T_8737899170_539c\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n    {\n      creatorId: 12013007,\n      creatorName: \"Yielding Arts\",\n      creatorType: \"Group\",\n      creatorHasVerifiedBadge: true,\n      totalUpVotes: 2469880,\n      totalDownVotes: 470017,\n      universeId: 3808081382,\n      name: \"[BOSS] The Strongest Battlegrounds\",\n      placeId: 10449761463,\n      playerCount: 172610,\n      imageToken: \"T_10449761463_f88a\",\n      isSponsored: false,\n      nativeAdData: \"\",\n      isShowSponsoredLabel: false,\n      price: null,\n      analyticsIdentifier: null,\n      gameDescription: \"\",\n      genre: \"\",\n      minimumAge: 0,\n      ageRecommendationDisplayName: \"\",\n    },\n  ],\n  nextPaginationKey: \"startRowIndex_20,version_\",\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get recommendations for."
          },
          {
            "name": "truncatedResults?",
            "type": "boolean",
            "description": "Return truncated results."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results per request."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authedUserPrivateServersForPlace": {
        "description": "Gets a list of private server for a particular universe that the authenticated user can access.",
        "tags": {
          "endpoint": "GET /v1/games/{placeId}/private-servers",
          "example": "const { data: privateServers } = await ClassicGamesApi.authedUserPrivateServersForPlace({ placeId: 26838733 });",
          "exampleData": "[\n  {\n    maxPlayers: 10,\n    playerTokens: [],\n    players: [],\n    name: \"TAG GANG\",\n    vipServerId: 10262938,\n    owner: {\n      hasVerifiedBadge: false,\n      id: 45348281,\n      name: \"MightyPart\",\n      displayName: \"Mighty\",\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      maxPlayers: 10,\n      playerTokens: [],\n      players: [],\n      name: \"TAG GANG\",\n      vipServerId: 10262938,\n      owner: {\n        hasVerifiedBadge: false,\n        id: 45348281,\n        name: \"MightyPart\",\n        displayName: \"Mighty\",\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to get private servers for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "placeServerList": {
        "description": "Gets the server list for a place.",
        "tags": {
          "endpoint": "GET /v1/games/{placeId}/servers/{serverType}",
          "example": "const { data: servers } = await ClassicGamesApi.placeServerList({ placeId: 26838733, serverType: \"Public\" });",
          "exampleData": "[\n  {\n    id: \"1cf0594e-196a-469d-a9f8-ac0c7a1a0c89\",\n    maxPlayers: 10,\n    playing: 6,\n    playerTokens: [\n      \"7532A11338571C5B914711CECB920A9C\",\n      \"576940A121EC4A28EDF1A984FB4D40BA\",\n      \"4AC528DB8689F636EE495A31219B4156\",\n      \"DC41B4724EC46B0D561458B378C52A25\",\n      \"FB9F483ACD1B0C22A916F12F2B8C5EE5\",\n    ],\n    players: [],\n    fps: 59.942818,\n    ping: 82,\n  },\n  {\n    id: \"3a492d51-1b28-4f5b-92f5-ea7f8eb81a05\",\n    maxPlayers: 10,\n    playing: 4,\n    playerTokens: [\n      \"4FA1CB5B5D01574AB7E1A1AEFA683894\",\n      \"DE71FC497ACEA320A57B2E168AF851ED\",\n      \"0B9CB48166467EE29E89564A7A9CCB68\",\n      \"13FCCCF441B16EFF86C938D8440FB9F0\",\n    ],\n    players: [],\n    fps: 59.995846,\n    ping: 216,\n  },\n  {\n    id: \"3333da7e-8a94-464a-b749-9162404c3f71\",\n    maxPlayers: 10,\n    playing: 3,\n    playerTokens: [\n      \"D98666B566AD7834D20A02A7C4554E22\",\n      \"EB2D522809D8F87E41778ABEF349F305\",\n      \"97A0BA814C637D44F2A3E1A8AD190837\",\n    ],\n    players: [],\n    fps: 59.955658,\n    ping: 138,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      id: \"1cf0594e-196a-469d-a9f8-ac0c7a1a0c89\",\n      maxPlayers: 10,\n      playing: 6,\n      playerTokens: [\n        \"7532A11338571C5B914711CECB920A9C\",\n        \"576940A121EC4A28EDF1A984FB4D40BA\",\n        \"4AC528DB8689F636EE495A31219B4156\",\n        \"DC41B4724EC46B0D561458B378C52A25\",\n        \"FB9F483ACD1B0C22A916F12F2B8C5EE5\",\n      ],\n      players: [],\n      fps: 59.942818,\n      ping: 82,\n    },\n    {\n      id: \"3a492d51-1b28-4f5b-92f5-ea7f8eb81a05\",\n      maxPlayers: 10,\n      playing: 4,\n      playerTokens: [\n        \"4FA1CB5B5D01574AB7E1A1AEFA683894\",\n        \"DE71FC497ACEA320A57B2E168AF851ED\",\n        \"0B9CB48166467EE29E89564A7A9CCB68\",\n        \"13FCCCF441B16EFF86C938D8440FB9F0\",\n      ],\n      players: [],\n      fps: 59.995846,\n      ping: 216,\n    },\n    {\n      id: \"3333da7e-8a94-464a-b749-9162404c3f71\",\n      maxPlayers: 10,\n      playing: 3,\n      playerTokens: [\n        \"D98666B566AD7834D20A02A7C4554E22\",\n        \"EB2D522809D8F87E41778ABEF349F305\",\n        \"97A0BA814C637D44F2A3E1A8AD190837\",\n      ],\n      players: [],\n      fps: 59.955658,\n      ping: 138,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The ID of the place to get private servers for."
          },
          {
            "name": "serverType",
            "type": "\"Friends\" | \"Public\"",
            "description": "The type of servers to return."
          },
          {
            "name": "excludeFullGames?",
            "type": "boolean",
            "description": "If full games should be omitted from the response."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authedUserUniverseIsFavorited": {
        "description": "Gets the favorited status between the authenticated user and a particular universe",
        "tags": {
          "endpoint": "GET /v1/games/{universeId}/favorites",
          "example": "const { data: favoritedStatus } = await ClassicGamesApi.authedUserUniverseIsFavorited({ universeId: 1685831367 });",
          "exampleData": "",
          "exampleRawBody": "{ isFavorited: true }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get favorited status for."
          }
        ]
      },
      "authedUserUniverseSetFavorite": {
        "description": "Sets the favorited status for a particular universe for the authenticated user.",
        "tags": {
          "endpoint": "POST /v1/games/{universeId}/favorites",
          "example": "const { data: newStatus } = await ClassicGamesApi.authedUserUniverseSetFavorite({\n  universeId: 1685831367,\n  status: true,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to set favorited status for."
          },
          {
            "name": "status",
            "type": "boolean",
            "description": "The new status for the favorite."
          }
        ]
      },
      "universeFavoritesCount": {
        "description": "Gets favorites count for a particular universe.",
        "tags": {
          "endpoint": "GET /v1/games/{universeId}/favorites/count",
          "example": "const { data: favoritesCount } = await ClassicGamesApi.universeFavoritesCount({ universeId: 1685831367 });",
          "exampleData": "",
          "exampleRawBody": "{ favoritesCount: 0 }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get favorites count for."
          }
        ]
      },
      "universeGamePasses": {
        "description": "Gets game passes for a particular universe.",
        "tags": {
          "endpoint": "GET /v1/games/{universeId}/game-passes",
          "example": "const { data: gamePasses } = await ClassicGamesApi.universeGamePasses({ universeId: 1685831367 });",
          "exampleData": "[\n  {\n    id: 9063647,\n    name: \"Campers Club\",\n    displayName: \"Campers Club\",\n    productId: 975542678,\n    price: 350,\n    sellerName: \"MightyPart Games\",\n    sellerId: 1536374574,\n    isOwned: true,\n  },\n  {\n    id: 9260419,\n    name: \"Support Us\",\n    displayName: \"Support Us\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: false,\n  },\n  {\n    id: 9260480,\n    name: \"Donate\",\n    displayName: \"Donate\",\n    productId: 979386303,\n    price: 15,\n    sellerName: \"MightyPart Games\",\n    sellerId: 1536374574,\n    isOwned: true,\n  },\n  {\n    id: 9820606,\n    name: \"Starterpack\",\n    displayName: \"Starterpack\",\n    productId: 995094227,\n    price: 100,\n    sellerName: \"MightyPart Games\",\n    sellerId: 1536374574,\n    isOwned: true,\n  },\n  {\n    id: 11546631,\n    name: \"Donate Plusss\",\n    displayName: \"Donate Plusss\",\n    productId: 1084063256,\n    price: 250,\n    sellerName: \"MightyPart Games\",\n    sellerId: 1536374574,\n    isOwned: false,\n  },\n  {\n    id: 880904271,\n    name: \"Name!!!\",\n    displayName: \"Name!!!\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: true,\n  },\n  {\n    id: 880843288,\n    name: \"Name!!!1\",\n    displayName: \"Name!!!1\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: true,\n  },\n  {\n    id: 880933261,\n    name: \"name!\",\n    displayName: \"name!\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: true,\n  },\n  {\n    id: 880882288,\n    name: \"My Pass\",\n    displayName: \"My Pass\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: true,\n  },\n  {\n    id: 880670566,\n    name: \"My Pass\",\n    displayName: \"My Pass\",\n    productId: null,\n    price: null,\n    sellerName: \"MightyPart Games\",\n    sellerId: null,\n    isOwned: true,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: \"id_2zwAAAXGZdoHHzgCKTN8\",\n  nextPageCursor: null,\n  data: [\n    {\n      id: 9063647,\n      name: \"Campers Club\",\n      displayName: \"Campers Club\",\n      productId: 975542678,\n      price: 350,\n      sellerName: \"MightyPart Games\",\n      sellerId: 1536374574,\n      isOwned: true,\n    },\n    {\n      id: 9260419,\n      name: \"Support Us\",\n      displayName: \"Support Us\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: false,\n    },\n    {\n      id: 9260480,\n      name: \"Donate\",\n      displayName: \"Donate\",\n      productId: 979386303,\n      price: 15,\n      sellerName: \"MightyPart Games\",\n      sellerId: 1536374574,\n      isOwned: true,\n    },\n    {\n      id: 9820606,\n      name: \"Starterpack\",\n      displayName: \"Starterpack\",\n      productId: 995094227,\n      price: 100,\n      sellerName: \"MightyPart Games\",\n      sellerId: 1536374574,\n      isOwned: true,\n    },\n    {\n      id: 11546631,\n      name: \"Donate Plusss\",\n      displayName: \"Donate Plusss\",\n      productId: 1084063256,\n      price: 250,\n      sellerName: \"MightyPart Games\",\n      sellerId: 1536374574,\n      isOwned: false,\n    },\n    {\n      id: 880904271,\n      name: \"Name!!!\",\n      displayName: \"Name!!!\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: true,\n    },\n    {\n      id: 880843288,\n      name: \"Name!!!1\",\n      displayName: \"Name!!!1\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: true,\n    },\n    {\n      id: 880933261,\n      name: \"name!\",\n      displayName: \"name!\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: true,\n    },\n    {\n      id: 880882288,\n      name: \"My Pass\",\n      displayName: \"My Pass\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: true,\n    },\n    {\n      id: 880670566,\n      name: \"My Pass\",\n      displayName: \"My Pass\",\n      productId: null,\n      price: null,\n      sellerName: \"MightyPart Games\",\n      sellerId: null,\n      isOwned: true,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get game passes for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authedUserUniverseVoteStatus": {
        "description": "Gets the authenticated users vote status for a particular universe.",
        "tags": {
          "endpoint": "GET /v1/games/{universeId}/votes/user",
          "example": "const { data: voteStatus } = await ClassicGamesApi.authedUserUniverseVoteStatus({ universeId: 1685831367 });",
          "exampleData": "{ canVote: false, userVote: true, reasonForNotVoteable: \"PlayGame\" }\n",
          "exampleRawBody": "{ canVote: false, userVote: true, reasonForNotVoteable: \"PlayGame\" }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get vote status for."
          }
        ]
      },
      "universesVoteStatus": {
        "description": "Gets a list of vote statuses for multiple universes.",
        "tags": {
          "endpoint": "GET /v1/games/votes",
          "example": "const { data: voteStatuses } = await ClassicGamesApi.universesVoteStatus({ universeIds: [1685831367] });",
          "exampleData": "{ \"1685831367\": { upVotes: 78, downVotes: 14 } }\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The IDs of the universes to get vote statuses for. Cannot exceed a maximum of 100 IDs."
          }
        ]
      },
      "authedUserSetUniverseUpvote": {
        "description": "Sets the upvote status for a particular universe for the authenticated user.",
        "tags": {
          "endpoint": "PATCH /v1/games/${universeId}/user-votes",
          "example": "const { data: success } = await ClassicGamesApi.authedUserSetUniverseUpvote({ universeId: 1685831367, upvote: true });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to upvote."
          },
          {
            "name": "upvote",
            "type": "boolean",
            "description": "If the universe is to be upvoted."
          }
        ]
      },
      "vipServersAllowedForUniverse": {
        "description": "Gets information about particular private servers.",
        "tags": {
          "endpoint": "GET /v1/private-servers",
          "example": "const { data: vipServersAllowed } = await ClassicGamesApi.vipServersAllowedForUniverse({ universeId: 1685831367 });",
          "exampleData": "",
          "exampleRawBody": "{ privateServersEnabled: true }\n"
        },
        "params": [
          {
            "name": "privateServerIds",
            "type": "🤷",
            "description": "The IDs of the private servers to get info for."
          }
        ]
      },
      "authedUserCanUserBeInvitedToVipServer": {
        "description": "Sees if a particular user can be invited to a vip server by the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/vip-server/can-invite/{userId}",
          "example": "const { data: canInviteData } = await ClassicGamesApi.authedUserCanUserBeInvitedToVipServer({ userId: 12345 });",
          "exampleData": "{\n  canInvite: false,\n  doesOwnerPrivacyRestrictJoins: false,\n  inviteResponseType: 4,\n}\n",
          "exampleRawBody": "{\n  canInvite: false,\n  doesOwnerPrivacyRestrictJoins: false,\n  inviteResponseType: 4,\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to see if they are allowed to recieve an invite to a vip server."
          }
        ]
      },
      "vipServerInfo": {
        "description": "Gets information about a particular vip server.",
        "tags": {
          "endpoint": "GET /v1/vip-servers/{vipServerId}",
          "example": "const { data: serverInfo } = await ClassicGamesApi.vipServerInfo({ vipServerId: 1630945839 });",
          "exampleData": "{\n  id: 1630945839,\n  name: \"Testing\",\n  game: {\n    id: 6430220996,\n    name: \"Get Id\",\n    rootPlace: { id: 18980972074, name: \"Get Id\" },\n  },\n  joinCode: \"70420354791950165689950670608627\",\n  active: true,\n  subscription: {\n    active: false,\n    expired: false,\n    expirationDate: \"2024-09-17T15:49:02.8879762Z\",\n    price: null,\n    canRenew: false,\n    hasInsufficientFunds: false,\n    hasRecurringProfile: true,\n    hasPriceChanged: true,\n  },\n  permissions: {\n    clanAllowed: false,\n    enemyClanId: null,\n    friendsAllowed: false,\n    users: [],\n  },\n  voiceSettings: { enabled: false },\n  link: \"https://www.roblox.com/games/18980972074?privateServerLinkCode=70420354791950165689950670608627\",\n}\n",
          "exampleRawBody": "{\n  id: 1630945839,\n  name: \"Testing\",\n  game: {\n    id: 6430220996,\n    name: \"Get Id\",\n    rootPlace: { id: 18980972074, name: \"Get Id\" },\n  },\n  joinCode: \"70420354791950165689950670608627\",\n  active: true,\n  subscription: {\n    active: false,\n    expired: false,\n    expirationDate: \"2024-09-17T15:49:02.8879762Z\",\n    price: null,\n    canRenew: false,\n    hasInsufficientFunds: false,\n    hasRecurringProfile: true,\n    hasPriceChanged: true,\n  },\n  permissions: {\n    clanAllowed: false,\n    enemyClanId: null,\n    friendsAllowed: false,\n    users: [],\n  },\n  voiceSettings: { enabled: false },\n  link: \"https://www.roblox.com/games/18980972074?privateServerLinkCode=70420354791950165689950670608627\",\n}\n"
        },
        "params": [
          {
            "name": "vipServerId",
            "type": "VipServerId",
            "description": "The ID of the vip server to get info for."
          }
        ]
      },
      "updateVipServer": {
        "description": "Updates a vip server.",
        "tags": {
          "endpoint": "PATCH /v1/vip-servers/{vipServerId}",
          "example": "const { data: serverInfo } = await ClassicGamesApi.updateVipServer({ vipServerId: 1630945839, name: \"New Name\" });",
          "exampleData": "{\n  id: 1630945839,\n  name: \"New Name\",\n  game: {\n    id: 6430220996,\n    name: \"Get Id\",\n    rootPlace: { id: 18980972074, name: \"Get Id\" },\n  },\n  joinCode: \"70420354791950165689950670608627\",\n  active: true,\n  subscription: {\n    active: false,\n    expired: false,\n    expirationDate: \"2024-09-17T15:49:02.8879762Z\",\n    price: null,\n    canRenew: false,\n    hasInsufficientFunds: false,\n    hasRecurringProfile: true,\n    hasPriceChanged: true,\n  },\n  permissions: {\n    clanAllowed: false,\n    enemyClanId: null,\n    friendsAllowed: false,\n    users: [],\n  },\n  voiceSettings: { enabled: false },\n  link: \"https://www.roblox.com/games/18980972074?privateServerLinkCode=70420354791950165689950670608627\",\n}\n",
          "exampleRawBody": "{\n  id: 1630945839,\n  name: \"New Name\",\n  game: {\n    id: 6430220996,\n    name: \"Get Id\",\n    rootPlace: { id: 18980972074, name: \"Get Id\" },\n  },\n  joinCode: \"70420354791950165689950670608627\",\n  active: true,\n  subscription: {\n    active: false,\n    expired: false,\n    expirationDate: \"2024-09-17T15:49:02.8879762Z\",\n    price: null,\n    canRenew: false,\n    hasInsufficientFunds: false,\n    hasRecurringProfile: true,\n    hasPriceChanged: true,\n  },\n  permissions: {\n    clanAllowed: false,\n    enemyClanId: null,\n    friendsAllowed: false,\n    users: [],\n  },\n  voiceSettings: { enabled: false },\n  link: \"https://www.roblox.com/games/18980972074?privateServerLinkCode=70420354791950165689950670608627\",\n}\n"
        },
        "params": [
          {
            "name": "vipServerId",
            "type": "VipServerId",
            "description": "The ID of the vip server to update."
          },
          {
            "name": "name?",
            "type": "Name",
            "description": "The new name for the vip server."
          },
          {
            "name": "newJoinCode?",
            "type": "boolean",
            "description": "If the join code should be regenerated."
          },
          {
            "name": "active?",
            "type": "Active",
            "description": "If the vip server should be active."
          }
        ]
      },
      "updateVipServerVoiceSettings": {
        "description": "Updates voice settings for a vip server.",
        "tags": {
          "endpoint": "PATCH /v1/vip-servers/{vipServerId}/voicesettings",
          "example": "const { data: serverInfo } = await ClassicGamesApi.updateVipServerVoiceSettings({\n  vipServerId: 1630945839,\n  enabled: true,\n});",
          "exampleData": "{ enabled: true }\n",
          "exampleRawBody": "{ enabled: true }\n"
        },
        "params": [
          {
            "name": "vipServerId",
            "type": "Identifier",
            "description": "The ID of the vip server to update voice settings for."
          },
          {
            "name": "enabled",
            "type": "boolean",
            "description": "If voice settings should be enabled."
          }
        ]
      },
      "universeMedia": {
        "description": "Gets media for a particular universe.",
        "tags": {
          "endpoint": "GET /v2/games/{universeId}/media",
          "example": "const { data: media } = await ClassicGamesApi.universeMedia({ universeId: 1685831367 });",
          "exampleData": "[\n  {\n    assetTypeId: 1,\n    assetType: \"Image\",\n    imageId: 5130624799,\n    videoHash: null,\n    videoTitle: null,\n    approved: true,\n    altText: null,\n  },\n  {\n    assetTypeId: 1,\n    assetType: \"Image\",\n    imageId: 5030792576,\n    videoHash: null,\n    videoTitle: null,\n    approved: true,\n    altText: null,\n  },\n  {\n    assetTypeId: 1,\n    assetType: \"Image\",\n    imageId: 5030792559,\n    videoHash: null,\n    videoTitle: null,\n    approved: true,\n    altText: null,\n  },\n  {\n    assetTypeId: 1,\n    assetType: \"Image\",\n    imageId: 5055393500,\n    videoHash: null,\n    videoTitle: null,\n    approved: true,\n    altText: null,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      assetTypeId: 1,\n      assetType: \"Image\",\n      imageId: 5130624799,\n      videoHash: null,\n      videoTitle: null,\n      approved: true,\n      altText: null,\n    },\n    {\n      assetTypeId: 1,\n      assetType: \"Image\",\n      imageId: 5030792576,\n      videoHash: null,\n      videoTitle: null,\n      approved: true,\n      altText: null,\n    },\n    {\n      assetTypeId: 1,\n      assetType: \"Image\",\n      imageId: 5030792559,\n      videoHash: null,\n      videoTitle: null,\n      approved: true,\n      altText: null,\n    },\n    {\n      assetTypeId: 1,\n      assetType: \"Image\",\n      imageId: 5055393500,\n      videoHash: null,\n      videoTitle: null,\n      approved: true,\n      altText: null,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The ID of the universe to get media for."
          }
        ]
      },
      "groupGames": {
        "description": "Gets games made by a particular group.",
        "tags": {
          "endpoint": "GET /v2/groups/{groupId}/games",
          "example": "const { data: games } = await ClassicGamesApi.groupGames({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 2721703342,\n    name: \"RoCamping 2\",\n    description: null,\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 7061026197, type: \"Place\" },\n    created: \"2021-07-07T18:50:52.77Z\",\n    updated: \"2021-10-09T15:01:02.147Z\",\n    placeVisits: 189,\n  },\n  {\n    id: 2148864919,\n    name: \"Nomadic\",\n    description: null,\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 5967892302, type: \"Place\" },\n    created: \"2020-11-17T18:17:58.37Z\",\n    updated: \"2020-11-17T18:18:01.38Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 1864457335,\n    name: \"RoCamping but it's 100 players\",\n    description: \"NOTE: This is a meme game, we don't really update this game\\r\\n\\r\\nALSO NOTE: I sure it'll be chaotic if you play in a full server.\\r\\n\\r\\nRoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\",\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 5323662969, type: \"Place\" },\n    created: \"2020-07-10T14:59:42.607Z\",\n    updated: \"2020-07-11T01:02:53.91Z\",\n    placeVisits: 1,\n  },\n  {\n    id: 1840468091,\n    name: \"RO-FACTOR\",\n    description: null,\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 5255036322, type: \"Place\" },\n    created: \"2020-06-29T16:57:48.19Z\",\n    updated: \"2021-10-09T15:00:45.08Z\",\n    placeVisits: 109,\n  },\n  {\n    id: 1685831367,\n    name: \"RoCamping\",\n    description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 4922741943, type: \"Place\" },\n    created: \"2020-04-20T20:36:21.117Z\",\n    updated: \"2022-05-27T16:36:40.1Z\",\n    placeVisits: 2721,\n  },\n  {\n    id: 1651554338,\n    name: \"Ninjas Unleashed: Legion\",\n    description: \"No secret projects here\\r\\nScriptor/Game Designer - NamelessGuy2005\\r\\nBuilder/Animator - Flaroh\\r\\n\",\n    creator: { id: 5850082, type: \"Group\" },\n    rootPlace: { id: 4857762148, type: \"Place\" },\n    created: \"2020-04-04T13:17:08.12Z\",\n    updated: \"2020-04-20T15:37:55.803Z\",\n    placeVisits: 16,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: \"0_2_f7e8a87d65742375fdea66bbd6c77728\",\n  nextPageCursor: null,\n  data: [\n    {\n      id: 2721703342,\n      name: \"RoCamping 2\",\n      description: null,\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 7061026197, type: \"Place\" },\n      created: \"2021-07-07T18:50:52.77Z\",\n      updated: \"2021-10-09T15:01:02.147Z\",\n      placeVisits: 189,\n    },\n    {\n      id: 2148864919,\n      name: \"Nomadic\",\n      description: null,\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 5967892302, type: \"Place\" },\n      created: \"2020-11-17T18:17:58.37Z\",\n      updated: \"2020-11-17T18:18:01.38Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 1864457335,\n      name: \"RoCamping but it's 100 players\",\n      description: \"NOTE: This is a meme game, we don't really update this game\\r\\n\\r\\nALSO NOTE: I sure it'll be chaotic if you play in a full server.\\r\\n\\r\\nRoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\",\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 5323662969, type: \"Place\" },\n      created: \"2020-07-10T14:59:42.607Z\",\n      updated: \"2020-07-11T01:02:53.91Z\",\n      placeVisits: 1,\n    },\n    {\n      id: 1840468091,\n      name: \"RO-FACTOR\",\n      description: null,\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 5255036322, type: \"Place\" },\n      created: \"2020-06-29T16:57:48.19Z\",\n      updated: \"2021-10-09T15:00:45.08Z\",\n      placeVisits: 109,\n    },\n    {\n      id: 1685831367,\n      name: \"RoCamping\",\n      description: \"RoCamping is a fun adventure game where the end-goal is to create the best camp ever. Gather resources, chop down trees, go down caves and much more! Start your journey today!\\r\\n\\r\\nNOTE: RoCamping is still in BETA so expect there to be glitches, if you find a glitch then don't hesitate to join our group and report it there.\\r\\n\\r\\nCurrent Version: BETA v3,0\\r\\n\\r\\nalvinblox\",\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 4922741943, type: \"Place\" },\n      created: \"2020-04-20T20:36:21.117Z\",\n      updated: \"2022-05-27T16:36:40.1Z\",\n      placeVisits: 2721,\n    },\n    {\n      id: 1651554338,\n      name: \"Ninjas Unleashed: Legion\",\n      description: \"No secret projects here\\r\\nScriptor/Game Designer - NamelessGuy2005\\r\\nBuilder/Animator - Flaroh\\r\\n\",\n      creator: { id: 5850082, type: \"Group\" },\n      rootPlace: { id: 4857762148, type: \"Place\" },\n      created: \"2020-04-04T13:17:08.12Z\",\n      updated: \"2020-04-20T15:37:55.803Z\",\n      placeVisits: 16,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to get games for."
          },
          {
            "name": "accessFilter?",
            "type": "1 | 2 | 4",
            "description": "Filters the returned games by an access filter."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results per request."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "userGames": {
        "description": "Gets a list of games made by a specific user.",
        "tags": {
          "endpoint": "GET /v2/users/{userId}/games",
          "example": "const { data: games } = await ClassicGamesApi.userGames({ userId: 45348281 });",
          "exampleData": "[\n  {\n    id: 6430220996,\n    name: \"Get Id\",\n    description: \"\",\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 18980972074, type: \"Place\" },\n    created: \"2024-08-17T12:47:01.458Z\",\n    updated: \"2024-08-17T12:48:42.181Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 6041794959,\n    name: \"Octree Terrain\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 17642363611, type: \"Place\" },\n    created: \"2024-05-28T03:10:40.847Z\",\n    updated: \"2024-08-14T09:24:03.800Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 5638577595,\n    name: \"New name!\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 16349154726, type: \"Place\" },\n    created: \"2024-02-13T02:39:58.590Z\",\n    updated: \"2024-07-17T23:48:51.577Z\",\n    placeVisits: 7,\n  },\n  {\n    id: 5587129688,\n    name: \"InventorySystem\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 16175332793, type: \"Place\" },\n    created: \"2024-01-30T14:49:01.037Z\",\n    updated: \"2024-01-30T14:58:18.877Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 5529979812,\n    name: \"ChunkLoader\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 15995287896, type: \"Place\" },\n    created: \"2024-01-15T16:42:51.047Z\",\n    updated: \"2024-01-16T17:27:36.540Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 5411380627,\n    name: \"Tiny Glade Recreation\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 15666536580, type: \"Place\" },\n    created: \"2023-12-17T19:16:33.380Z\",\n    updated: \"2023-12-19T19:00:58.817Z\",\n    placeVisits: 6,\n  },\n  {\n    id: 5243131845,\n    name: \"Test Game\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 15208361152, type: \"Place\" },\n    created: \"2023-10-29T16:03:43.603Z\",\n    updated: \"2023-10-29T16:04:15.920Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 5097539509,\n    name: \"DatastoreTest1\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 14790444893, type: \"Place\" },\n    created: \"2023-09-16T10:55:13.767Z\",\n    updated: \"2023-09-19T09:51:54.117Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 5076006380,\n    name: \"DynamicTerrain\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 14724555168, type: \"Place\" },\n    created: \"2023-09-09T06:54:43.173Z\",\n    updated: \"2023-09-20T19:28:02.660Z\",\n    placeVisits: 0,\n  },\n  {\n    id: 4621449053,\n    name: \"TerrainGen15\",\n    description: null,\n    creator: { id: 45348281, type: \"User\" },\n    rootPlace: { id: 13257759048, type: \"Place\" },\n    created: \"2023-04-26T12:48:16.137Z\",\n    updated: \"2023-05-20T21:33:10.770Z\",\n    placeVisits: 0,\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"10_1_7a425d1039a04d17a68f267f83ee3d41\",\n  data: [\n    {\n      id: 6430220996,\n      name: \"Get Id\",\n      description: \"\",\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 18980972074, type: \"Place\" },\n      created: \"2024-08-17T12:47:01.4582503Z\",\n      updated: \"2024-08-17T12:48:42.1812674Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 6041794959,\n      name: \"Octree Terrain\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 17642363611, type: \"Place\" },\n      created: \"2024-05-28T03:10:40.847Z\",\n      updated: \"2024-08-14T09:24:03.8Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 5638577595,\n      name: \"New name!\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 16349154726, type: \"Place\" },\n      created: \"2024-02-13T02:39:58.59Z\",\n      updated: \"2024-07-17T23:48:51.577Z\",\n      placeVisits: 7,\n    },\n    {\n      id: 5587129688,\n      name: \"InventorySystem\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 16175332793, type: \"Place\" },\n      created: \"2024-01-30T14:49:01.037Z\",\n      updated: \"2024-01-30T14:58:18.877Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 5529979812,\n      name: \"ChunkLoader\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 15995287896, type: \"Place\" },\n      created: \"2024-01-15T16:42:51.047Z\",\n      updated: \"2024-01-16T17:27:36.54Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 5411380627,\n      name: \"Tiny Glade Recreation\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 15666536580, type: \"Place\" },\n      created: \"2023-12-17T19:16:33.38Z\",\n      updated: \"2023-12-19T19:00:58.817Z\",\n      placeVisits: 6,\n    },\n    {\n      id: 5243131845,\n      name: \"Test Game\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 15208361152, type: \"Place\" },\n      created: \"2023-10-29T16:03:43.603Z\",\n      updated: \"2023-10-29T16:04:15.92Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 5097539509,\n      name: \"DatastoreTest1\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 14790444893, type: \"Place\" },\n      created: \"2023-09-16T10:55:13.767Z\",\n      updated: \"2023-09-19T09:51:54.117Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 5076006380,\n      name: \"DynamicTerrain\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 14724555168, type: \"Place\" },\n      created: \"2023-09-09T06:54:43.173Z\",\n      updated: \"2023-09-20T19:28:02.66Z\",\n      placeVisits: 0,\n    },\n    {\n      id: 4621449053,\n      name: \"TerrainGen15\",\n      description: null,\n      creator: { id: 45348281, type: \"User\" },\n      rootPlace: { id: 13257759048, type: \"Place\" },\n      created: \"2023-04-26T12:48:16.137Z\",\n      updated: \"2023-05-20T21:33:10.77Z\",\n      placeVisits: 0,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get games for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50",
            "description": "The maximum amount of games to return."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted it."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "the paging cursor for the previous or next page."
          }
        ]
      }
    },
    "groups": {
      "featuredEvent": {
        "description": "Gets the featured event for a group.",
        "tags": {
          "endpoint": "GET /v1/featured-content/event",
          "example": "const { data: eventId } = await ClassicGroupsApi.featuredEvent({ groupId: 15842838 });",
          "exampleData": "",
          "exampleRawBody": "{\n  groupId: 15842838,\n  contentType: \"event\",\n  contentId: \"6533473338141704368\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to get the event for."
          }
        ]
      },
      "setFeaturedEvent": {
        "description": "Sets a featured event for a group.",
        "tags": {
          "endpoint": "POST /v1/featured-content/event",
          "example": "const { data: eventId } = await ClassicGroupsApi.setFeaturedEvent({\n  groupId: 15842838,\n  eventId: \"5904751593700196492\",\n});",
          "exampleData": "",
          "exampleRawBody": "{\n  groupId: 15842838,\n  contentType: \"event\",\n  contentId: \"6533473338141704368\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to set the event for."
          },
          {
            "name": "eventId",
            "type": "EventId",
            "description": "The ID of the event to set."
          }
        ]
      },
      "removeFeaturedEvent": {
        "description": "Removes a featured event for a group.",
        "tags": {
          "endpoint": "POST /v1/featured-content/event",
          "example": "const { data: success } = await ClassicGroupsApi.removeFeaturedEvent({\n  groupId: 15842838,\n  eventId: \"5904751593700196492\",\n});",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The ID of the group to remove the event from."
          },
          {
            "name": "eventId",
            "type": "EventId",
            "description": "The ID of the event to remove."
          }
        ]
      },
      "groupInfo": {
        "description": "Gets information about a group.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/{groupId}",
          "tags": "[ \"?Cookie\" ]",
          "example": "const { data: groupInfo } = await ClassicGroupsApi.groupInfo({ groupId: 5850082 });",
          "exampleData": "{\n  id: 5850082,\n  name: \"MightyPart Games\",\n  description: \"Lorem ipsum dolor sit amet consectetur adipiscing elit.\",\n  owner: {\n    hasVerifiedBadge: false,\n    userId: 45348281,\n    username: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n  shout: null,\n  memberCount: 102,\n  isBuildersClubOnly: false,\n  publicEntryAllowed: true,\n  hasVerifiedBadge: false,\n}\n",
          "exampleRawBody": "{\n  id: 5850082,\n  name: \"MightyPart Games\",\n  description: \"Lorem ipsum dolor sit amet consectetur adipiscing elit.\",\n  owner: {\n    hasVerifiedBadge: false,\n    userId: 45348281,\n    username: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n  shout: null,\n  memberCount: 102,\n  isBuildersClubOnly: false,\n  publicEntryAllowed: true,\n  hasVerifiedBadge: false,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group."
          }
        ]
      },
      "groupAuditLogs": {
        "description": "Gets audit log entries for a group.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/{groupId}/audit-log",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: auditLog } = await ClassicGroupsApi.groupAuditLogs({ groupId: 5850082 });",
          "exampleData": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      actor: {\n        user: {\n          hasVerifiedBadge: false,\n          userId: 45348281,\n          username: \"MightyPart\",\n          displayName: \"MightyPart\",\n        },\n        role: {\n          id: 38353811,\n          name: \"NamelessGuy2005 - Scriptor\",\n          rank: 255,\n        },\n      },\n      actionType: \"Accept Ally Request\",\n      description: {\n        TargetGroupId: 6333562,\n        TargetGroupName: \"Mine Ways Talk Show\",\n      },\n      created: \"2020-05-18T12:06:34Z\",\n    },\n    {\n      actor: {\n        user: {\n          hasVerifiedBadge: false,\n          userId: 45348281,\n          username: \"MightyPart\",\n          displayName: \"MightyPart\",\n        },\n        role: {\n          id: 38353811,\n          name: \"NamelessGuy2005 - Scriptor\",\n          rank: 255,\n        },\n      },\n      actionType: \"Accept Ally Request\",\n      description: {\n        TargetGroupId: 5257567,\n        TargetGroupName: \"The X1 Team\",\n      },\n      created: \"2020-05-13T13:52:57Z\",\n    },\n    {\n      actor: {\n        user: {\n          hasVerifiedBadge: false,\n          userId: 45348281,\n          username: \"MightyPart\",\n          displayName: \"MightyPart\",\n        },\n        role: {\n          id: 38353811,\n          name: \"NamelessGuy2005 - Scriptor\",\n          rank: 255,\n        },\n      },\n      actionType: \"Accept Ally Request\",\n      description: {\n        TargetGroupId: 5894486,\n        TargetGroupName: \"Sky-Blox Studio\",\n      },\n      created: \"2020-05-13T13:52:56Z\",\n    },\n  ],\n}\n",
          "exampleRawBody": "[\n  {\n    actor: {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      role: {\n        id: 38353811,\n        name: \"NamelessGuy2005 - Scriptor\",\n        rank: 255,\n      },\n    },\n    actionType: \"AcceptAllyRequest\",\n    description: {\n      targetGroupId: 6333562,\n      targetGroupName: \"Mine Ways Talk Show\",\n    },\n    created: \"2020-05-18T12:06:34Z\",\n  },\n  {\n    actor: {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      role: {\n        id: 38353811,\n        name: \"NamelessGuy2005 - Scriptor\",\n        rank: 255,\n      },\n    },\n    actionType: \"AcceptAllyRequest\",\n    description: {\n      targetGroupId: 5257567,\n      targetGroupName: \"The X1 Team\",\n    },\n    created: \"2020-05-13T13:52:57Z\",\n  },\n  {\n    actor: {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      role: {\n        id: 38353811,\n        name: \"NamelessGuy2005 - Scriptor\",\n        rank: 255,\n      },\n    },\n    actionType: \"AcceptAllyRequest\",\n    description: {\n      targetGroupId: 5894486,\n      targetGroupName: \"Sky-Blox Studio\",\n    },\n    created: \"2020-05-13T13:52:56Z\",\n  },\n]\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "actionType?",
            "type": "GroupAuditLogActionType",
            "description": "The action to filter the audit logs by. (no filter will be applied if actionType is undefined)."
          },
          {
            "name": "userId?",
            "type": "Identifier",
            "description": "Filter for specific user by their id."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "groupNameHistory": {
        "description": "Gets name history of a group.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/{groupId}/name-history",
          "example": "const { data: nameHistory } = await ClassicGroupsApi.groupNameHistory({ groupId: 5850082 });",
          "exampleData": "[{ name: \"Nameless Game Studio\", created: \"2022-01-06T00:01:47.193Z\" }]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    { name: \"Nameless Game Studio\", created: \"2022-01-06T00:01:47.193Z\" },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "groupSettings": {
        "description": "Gets settings for a group.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/{groupId}/settings",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: settings } = await ClassicGroupsApi.groupSettings({ groupId: 5850082 });",
          "exampleData": "{\n  isApprovalRequired: true,\n  isBuildersClubRequired: false,\n  areEnemiesAllowed: true,\n  areGroupFundsVisible: false,\n  areGroupGamesVisible: true,\n  isGroupNameChangeEnabled: true,\n}\n",
          "exampleRawBody": "{\n  isApprovalRequired: true,\n  isBuildersClubRequired: false,\n  areEnemiesAllowed: true,\n  areGroupFundsVisible: false,\n  areGroupGamesVisible: true,\n  isGroupNameChangeEnabled: true,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to get settings for."
          }
        ]
      },
      "setGroupSettings": {
        "description": "Sets settings for a group.",
        "tags": {
          "category": "Groups",
          "endpoint": "PATCH /v1/groups/{groupId}/settings",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.setGroupSettings({\n  groupId: 5850082,\n  newSettings: {\n    isApprovalRequired: true,\n    isBuildersClubRequired: false,\n    areEnemiesAllowed: true,\n    areGroupFundsVisible: false,\n    areGroupGamesVisible: true,\n    isGroupNameChangeEnabled: true,\n  },\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "newSettings",
            "type": "GroupSettingsData",
            "description": "The new settings for the group."
          }
        ]
      },
      "groupsConfigMetadata": {
        "description": "Gets groups configuration metadata.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/configuration/metadata",
          "example": "const { data: configMetadata } = await ClassicGroupsApi.groupsConfigMetadata();",
          "exampleData": "{\n  groupConfiguration: {\n    nameMaxLength: 50,\n    descriptionMaxLength: 1000,\n    iconMaxFileSizeMb: 20,\n    cost: 100,\n    isUsingTwoStepWebviewComponent: true,\n  },\n  recurringPayoutsConfiguration: { maxPayoutPartners: 20 },\n  roleConfiguration: {\n    nameMaxLength: 100,\n    descriptionMaxLength: 1000,\n    limit: 40,\n    cost: 25,\n    minRank: 0,\n    maxRank: 255,\n  },\n  groupNameChangeConfiguration: {\n    cost: 100,\n    cooldownInDays: 90,\n    ownershipCooldownInDays: 90,\n  },\n  isPremiumPayoutsEnabled: true,\n  isDefaultEmblemPolicyEnabled: true,\n}\n",
          "exampleRawBody": "{\n  groupConfiguration: {\n    nameMaxLength: 50,\n    descriptionMaxLength: 1000,\n    iconMaxFileSizeMb: 20,\n    cost: 100,\n    isUsingTwoStepWebviewComponent: true,\n  },\n  recurringPayoutsConfiguration: { maxPayoutPartners: 20 },\n  roleConfiguration: {\n    nameMaxLength: 100,\n    descriptionMaxLength: 1000,\n    limit: 40,\n    cost: 25,\n    minRank: 0,\n    maxRank: 255,\n  },\n  groupNameChangeConfiguration: {\n    cost: 100,\n    cooldownInDays: 90,\n    ownershipCooldownInDays: 90,\n  },\n  isPremiumPayoutsEnabled: true,\n  isDefaultEmblemPolicyEnabled: true,\n}\n"
        },
        "params": []
      },
      "groupsMetadata": {
        "description": "Gets groups metadata.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/metadata",
          "example": "const { data: metadata } = await ClassicGroupsApi.groupsMetadata();",
          "exampleData": "{\n  groupLimit: 100,\n  currentGroupCount: 57,\n  groupStatusMaxLength: 255,\n  groupPostMaxLength: 500,\n  isGroupWallNotificationsEnabled: false,\n  groupWallNotificationsSubscribeIntervalInMilliseconds: 60000,\n  areProfileGroupsHidden: false,\n  isGroupDetailsPolicyEnabled: true,\n  showPreviousGroupNames: true,\n}\n",
          "exampleRawBody": "{\n  groupLimit: 100,\n  currentGroupCount: 57,\n  groupStatusMaxLength: 255,\n  groupPostMaxLength: 500,\n  isGroupWallNotificationsEnabled: false,\n  groupWallNotificationsSubscribeIntervalInMilliseconds: 60000,\n  areProfileGroupsHidden: false,\n  isGroupDetailsPolicyEnabled: true,\n  showPreviousGroupNames: true,\n}\n"
        },
        "params": []
      },
      "groupsPolicyInfo": {
        "description": "Gets group policy info used for compliance.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v1/groups/policies",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: policyInfo } = await ClassicGroupsApi.groupsPolicyInfo({ groupIds: [5850082] });",
          "exampleData": "{ \"5850082\": { canViewGroup: true } }\n",
          "exampleRawBody": "{ groups: [{ canViewGroup: true, groupId: 5850082 }] }\n"
        },
        "params": [
          {
            "name": "groupIds",
            "type": "ArrayNonEmptyIfConst<GroupId>",
            "description": "the ids of groups to get policy info for."
          }
        ]
      },
      "setGroupDescription": {
        "description": "Sets group description.",
        "tags": {
          "category": "Groups",
          "endpoint": "PATCH /v1/groups/{groupId}/description",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: newDescription } = await ClassicGroupsApi.setGroupDescription({\n  groupId: 5850082,\n  newDescription: \"Hello World!\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ newDescription: \"Hello World!\" }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to set the description for."
          },
          {
            "name": "newDescription",
            "type": "NewDescription",
            "description": "The content of the new description."
          }
        ]
      },
      "setGroupShout": {
        "description": "Sets group shout (status).",
        "tags": {
          "category": "Groups",
          "endpoint": "PATCH /v1/groups/{groupId}/status",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: newShout } = await ClassicGroupsApi.setGroupShout({ groupId: 5850082, newShout: \"Hello World!\" });",
          "exampleData": "{\n  body: \"Hello World!\",\n  poster: {\n    hasVerifiedBadge: false,\n    userId: 45348281,\n    username: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n  created: \"2020-03-31T18:36:51.607Z\",\n  updated: \"2023-09-15T16:21:00.272Z\",\n}\n",
          "exampleRawBody": "{\n  body: \"Hello World!\",\n  poster: {\n    hasVerifiedBadge: false,\n    userId: 45348281,\n    username: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n  created: \"2020-03-31T18:36:51.607Z\",\n  updated: \"2023-09-15T16:21:00.272Z\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to set the shout for."
          },
          {
            "name": "message",
            "type": "🤷",
            "description": "The content of the new shout."
          }
        ]
      },
      "setGroupIcon": {
        "description": "Sets group icon.",
        "tags": {
          "category": "Groups",
          "endpoint": "PATCH /v1/groups/{groupId}/status",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.setGroupIcon({ groupId: 5850082, newIcon: \"./newGroupIcon.png\" });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to set the icon for."
          },
          {
            "name": "newIcon",
            "type": "string | File",
            "description": "The new icon for the group."
          }
        ]
      },
      "batchDeclineGroupJoinRequests": {
        "description": "Batch declines join requests.",
        "tags": {
          "category": "Membership",
          "endpoint": "DELETE /v1/groups/{groupId}/join-requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.batchDeclineGroupJoinRequests({\n  groupId: 5850082,\n  userIds: [2655994471],\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to batch decline join requests for."
          },
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<Identifier>",
            "description": "The ids of the user to decline."
          }
        ]
      },
      "groupJoinRequests": {
        "description": "gets join requests.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/groups/{groupId}/join-requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: joinRequests } = await ClassicGroupsApi.groupJoinRequests({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    requester: {\n      hasVerifiedBadge: false,\n      userId: 2655994471,\n      username: \"MightyPartJr\",\n      displayName: \"MightyPartJr\",\n    },\n    created: \"2023-09-12T09:35:49.287Z\",\n  },\n]\n",
          "exampleRawBody": "[\n  {\n    requester: {\n      hasVerifiedBadge: false,\n      userId: 2655994471,\n      username: \"MightyPartJr\",\n      displayName: \"MightyPartJr\",\n    },\n    created: \"2023-09-12T09:35:49.287Z\",\n  },\n]\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to get join requests for."
          },
          {
            "name": "limit?",
            "type": "10|25|50|100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "batchAcceptGroupJoinRequests": {
        "description": "Batch accepts join requests.",
        "tags": {
          "category": "Membership",
          "endpoint": "POST /v1/groups/{groupId}/join-requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.batchAcceptGroupJoinRequests({\n  groupId: 5850082,\n  userIds: [2655994471],\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to batch accepts join requests for."
          },
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<Identifier>",
            "description": "The ids of the user to accept."
          }
        ]
      },
      "declineGroupJoinRequest": {
        "description": "Declines a join request.",
        "tags": {
          "category": "Membership",
          "endpoint": "DELETE /v1/groups/{groupId}/join-requests/users/${userId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.declineGroupJoinRequest({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to decline a join request for."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to decline."
          }
        ]
      },
      "groupJoinRequestInfo": {
        "description": "Gets a join request for a user.",
        "tags": {
          "category": "Membership",
          "endpoint": "DELETE /v1/groups/{groupId}/join-requests/users/${userId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: joinRequest } = await ClassicGroupsApi.groupJoinRequestInfo({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "{\n  requester: {\n    hasVerifiedBadge: false,\n    userId: 2655994471,\n    username: \"MightyPartJr\",\n    displayName: \"MightyPartJr\",\n  },\n  created: \"2023-09-12T11:31:18.933Z\",\n}\n",
          "exampleRawBody": "{\n  requester: {\n    hasVerifiedBadge: false,\n    userId: 2655994471,\n    username: \"MightyPartJr\",\n    displayName: \"MightyPartJr\",\n  },\n  created: \"2023-09-12T11:31:18.933Z\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user."
          }
        ]
      },
      "acceptGroupJoinRequest": {
        "description": "Accepts a join request.",
        "tags": {
          "category": "Membership",
          "endpoint": "POST /v1/groups/{groupId}/join-requests/users/${userId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.acceptGroupJoinRequest({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to accept a join request for."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to accept."
          }
        ]
      },
      "authenticatedUserGroupMembershipInfo": {
        "description": "Gets group membership info for the currently authenticated user.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/groups/{groupId}/membership",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: membershipInfo } = await ClassicGroupsApi.authenticatedUserGroupMembershipInfo({ groupId: 5850082 });",
          "exampleData": "{\n  groupId: 5850082,\n  isPrimary: false,\n  isPendingJoin: false,\n  userRole: {\n    user: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    role: { id: 38353811, name: \"NamelessGuy2005 - Scriptor\", rank: 255 },\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: true,\n      deleteFromWall: true,\n      viewStatus: true,\n      postToStatus: true,\n    },\n    groupMembershipPermissions: {\n      changeRank: true,\n      inviteMembers: true,\n      removeMembers: true,\n    },\n    groupManagementPermissions: {\n      manageRelationships: true,\n      manageClan: true,\n      viewAuditLogs: true,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: true,\n      advertiseGroup: true,\n      createItems: true,\n      manageItems: true,\n      addGroupPlaces: true,\n      manageGroupGames: true,\n      viewGroupPayouts: true,\n      viewAnalytics: true,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: true,\n      administerCloudAuthentication: true,\n    },\n  },\n  areGroupGamesVisible: true,\n  areGroupFundsVisible: false,\n  areEnemiesAllowed: true,\n  canConfigure: true,\n}\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  isPrimary: false,\n  isPendingJoin: false,\n  userRole: {\n    user: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    role: { id: 38353811, name: \"NamelessGuy2005 - Scriptor\", rank: 255 },\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: true,\n      deleteFromWall: true,\n      viewStatus: true,\n      postToStatus: true,\n    },\n    groupMembershipPermissions: {\n      changeRank: true,\n      inviteMembers: true,\n      removeMembers: true,\n    },\n    groupManagementPermissions: {\n      manageRelationships: true,\n      manageClan: true,\n      viewAuditLogs: true,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: true,\n      advertiseGroup: true,\n      createItems: true,\n      manageItems: true,\n      addGroupPlaces: true,\n      manageGroupGames: true,\n      viewGroupPayouts: true,\n      viewAnalytics: true,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: true,\n      administerCloudAuthentication: true,\n    },\n  },\n  areGroupGamesVisible: true,\n  areGroupFundsVisible: false,\n  areEnemiesAllowed: true,\n  canConfigure: true,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get membership info for."
          }
        ]
      },
      "groupRoles": {
        "description": "Gets all roles in a group.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/groups/{groupId}/roles",
          "example": "const { data: roles } = await ClassicGroupsApi.groupRoles({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 38353814,\n    name: \"Guest\",\n    description: \"A non-group member.\",\n    rank: 0,\n    memberCount: 0,\n  },\n  {\n    id: 38353811,\n    name: \"Owner\",\n    description: \"\",\n    rank: 255,\n    memberCount: 1,\n  },\n]\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  roles: [\n    {\n      id: 38353814,\n      name: \"Guest\",\n      description: \"A non-group member.\",\n      rank: 0,\n      memberCount: 0,\n    },\n    {\n      id: 38353811,\n      name: \"Owner\",\n      description: \"\",\n      rank: 255,\n      memberCount: 1,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group to get roles for."
          }
        ]
      },
      "groupMembersWithRole": {
        "description": "Gets group members that have a specified role.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/groups/{groupId}/roles/{roleSetId}/users",
          "example": "const { data: membersWithRole } = await ClassicGroupsApi.groupMembersWithRole({\n  groupId: 5850082,\n  roleSetId: 38353811,\n});",
          "exampleData": "[\n  {\n    hasVerifiedBadge: false,\n    userId: 45348281,\n    username: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [\n    {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "roleSetId",
            "type": "Identifier",
            "description": "The id of the role."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "groupMembers": {
        "description": "Gets a page of members of a group.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/groups/{groupId}/users",
          "example": "const { data: members } = await ClassicGroupsApi.groupMembers({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    user: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    role: { id: 38353811, name: \"NamelessGuy2005 - Scriptor\", rank: 255 },\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"3023291639_1_8ba111cfa4097b6dd27d851a15353a1f\",\n  data: [\n    {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      role: {\n        id: 38353811,\n        name: \"NamelessGuy2005 - Scriptor\",\n        rank: 255,\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authenticatedUserPendingGroups": {
        "description": "Gets groups that the authenticated user has requested to join.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/user/groups/pending",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: pendingGroups } = await ClassicGroupsApi.authenticatedUserPendingGroups();",
          "exampleData": "[\n  {\n    id: 5850082,\n    name: \"lorem ipsum\",\n    description: \"\",\n    owner: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    shout: null,\n    isBuildersClubOnly: false,\n    publicEntryAllowed: false,\n    hasVerifiedBadge: false,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 5850082,\n      name: \"lorem ipsum\",\n      description: \"\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: false,\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n"
        },
        "params": []
      },
      "groupsThatUsersFriendsAreIn": {
        "description": "Gets a list of all groups the specified users' friends are in.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/users/{userId}/friends/groups/roles",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: groupsThatUsersFriendsAreIn } = await ClassicGroupsApi.groupsThatUsersFriendsAreIn({ userId: 45348281 });",
          "exampleData": "[\n  {\n    user: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    groups: [\n      {\n        group: {\n          id: 5850082,\n          name: \"Lorem ipsum\",\n          description: \"Lorem ipsum dolor sit amet.\",\n          owner: {\n            hasVerifiedBadge: false,\n            userId: 45348281,\n            username: \"MightyPart\",\n            displayName: \"MightyPart\",\n          },\n          shout: null,\n          isBuildersClubOnly: false,\n          publicEntryAllowed: true,\n          hasVerifiedBadge: false,\n        },\n        role: { id: 45348281, name: \"MightyPart\", rank: 1 },\n      },\n    ],\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      groups: [\n        {\n          group: {\n            id: 5850082,\n            name: \"Lorem ipsum\",\n            description: \"Lorem ipsum dolor sit amet.\",\n            owner: {\n              hasVerifiedBadge: false,\n              userId: 45348281,\n              username: \"MightyPart\",\n              displayName: \"MightyPart\",\n            },\n            shout: null,\n            isBuildersClubOnly: false,\n            publicEntryAllowed: true,\n            hasVerifiedBadge: false,\n          },\n          role: { id: 45348281, name: \"MightyPart\", rank: 1 },\n        },\n      ],\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get friends groups for."
          }
        ]
      },
      "allGroupRolesForUser_V1": {
        "description": "Gets a list of all roles for every group that the specified user is in.",
        "tags": {
          "category": "Membership",
          "endpoint": "GET /v1/users/{userId}/groups/roles",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: allRoles } = await ClassicGroupsApi.allGroupRolesForUser_V1({ userId: 45348281 });",
          "exampleData": "[\n  {\n    group: {\n      id: 5855434,\n      name: \"MightyPart Games\",\n      description: \"Lorem ipsum dolor sit amet...\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      memberCount: 102,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: true,\n      hasVerifiedBadge: false,\n    },\n    role: { id: 5855434, name: \"MightyPart\", rank: 1 },\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      group: {\n        id: 5855434,\n        name: \"MightyPart Games\",\n        description: \"Lorem ipsum dolor sit amet...\",\n        owner: {\n          hasVerifiedBadge: false,\n          userId: 45348281,\n          username: \"MightyPart\",\n          displayName: \"MightyPart\",\n        },\n        shout: null,\n        memberCount: 102,\n        isBuildersClubOnly: false,\n        publicEntryAllowed: true,\n        hasVerifiedBadge: false,\n      },\n      role: { id: 5855434, name: \"MightyPart\", rank: 1 },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get roles for."
          }
        ]
      },
      "removeGroupMember": {
        "description": "Removes a user from a group.",
        "tags": {
          "category": "Membership",
          "endpoint": "DELETE /v1/groups/{groupId}/users/{userId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.removeGroupMember({ groupId: 5850082, userId: 2655994471 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to remove the user from."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to be removed."
          }
        ]
      },
      "updateGroupMemberRole": {
        "description": "Changes a members' role in a group.",
        "tags": {
          "category": "Membership",
          "endpoint": "PATCH /v1/groups/{groupId}/users/{userId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.updateGroupMemberRole({\n  groupId: 5850082,\n  userId: 2655994471,\n  roleId: 38354760,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group"
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to change role for."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The id of the role."
          }
        ]
      },
      "groupPayoutRestrictionsInfo": {
        "description": "Gets values indicating if the specified group can use payout features.",
        "tags": {
          "category": "Revenue",
          "endpoint": "GET /v1/groups/{groupId}/payout-restriction",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: payoutRestrictions } = await ClassicGroupsApi.groupPayoutRestrictionsInfo({ groupId: 5850082 });",
          "exampleData": "{ canUseRecurringPayout: true, canUseOneTimePayout: true }\n",
          "exampleRawBody": "{ canUseRecurringPayout: true, canUseOneTimePayout: true }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          }
        ]
      },
      "groupPayoutsInfo": {
        "description": "Gets a list of the group payout percentages.",
        "tags": {
          "category": "Revenue",
          "endpoint": "GET /v1/groups/{groupId}/payouts",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: payouts } = await ClassicGroupsApi.groupPayoutsInfo({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    user: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    percentage: 50,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      percentage: 50,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          }
        ]
      },
      "groupRelationships": {
        "description": "Gets a group's relationships.",
        "tags": {
          "category": "Relationships",
          "endpoint": "GET /v1/groups/{groupId}/relationships/{groupRelationshipType}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: relationships } = await ClassicGroupsApi.groupRelationships({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  maxRows: 1,\n});",
          "exampleData": "{\n  groupId: 5850082,\n  relationshipType: \"Allies\",\n  totalGroupCount: 2,\n  relatedGroups: [\n    {\n      id: 50,\n      name: \"Lorem Ipsum\",\n      description: \"Hello World\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      memberCount: 38,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: true,\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  relationshipType: \"Allies\",\n  totalGroupCount: 2,\n  relatedGroups: [\n    {\n      id: 50,\n      name: \"Lorem Ipsum\",\n      description: \"Hello World\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      memberCount: 38,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: true,\n      hasVerifiedBadge: false,\n    },\n  ],\n  nextRowIndex: 1,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The group relationship type, \"Enemies\" or \"Allies\"."
          },
          {
            "name": "maxRows?",
            "type": "number",
            "description": "The maximum number of rows for the page request, should be at least 1."
          },
          {
            "name": "startRowIndex?",
            "type": "number",
            "description": "The start index of the page request."
          }
        ]
      },
      "batchDeclineGroupRelationshipRequests": {
        "description": "Batch declines relationship requests.",
        "tags": {
          "category": "Relationships",
          "endpoint": "DELETE /v1/groups/{groupId}/relationships/{groupRelationshipType}/requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.batchDeclineGroupRelationshipRequests({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  groupIds: [15842838],\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to batch decline relationship requests for."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to batch decline for."
          },
          {
            "name": "groupIds",
            "type": "Identifier[]",
            "description": "The ids of the groups to decline."
          }
        ]
      },
      "groupRelationshipRequests": {
        "description": "Gets relationship requests.",
        "tags": {
          "category": "Relationships",
          "endpoint": "GET /v1/groups/{groupId}/relationships/{groupRelationshipType}/requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: relationshipRequests, cursors } = await ClassicGroupsApi.groupRelationshipRequests({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  maxRows: 1,\n});",
          "exampleData": "{\n  groupId: 5850082,\n  relationshipType: \"Allies\",\n  totalGroupCount: 2,\n  relatedGroups: [\n    {\n      id: 50,\n      name: \"Lorem Ipsum\",\n      description: \"Hello World\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      memberCount: 38,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: true,\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  relationshipType: \"Allies\",\n  totalGroupCount: 2,\n  relatedGroups: [\n    {\n      id: 50,\n      name: \"Lorem Ipsum\",\n      description: \"Hello World\",\n      owner: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      shout: null,\n      memberCount: 38,\n      isBuildersClubOnly: false,\n      publicEntryAllowed: true,\n      hasVerifiedBadge: false,\n    },\n  ],\n  nextRowIndex: 1,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The group relationship type, \"Enemies\" or \"Allies\"."
          },
          {
            "name": "maxRows?",
            "type": "number",
            "description": "The maximum number of rows for the page request, should be at least 1."
          },
          {
            "name": "startRowIndex?",
            "type": "number",
            "description": "The start index of the page request."
          }
        ]
      },
      "batchAcceptGroupRelationshipRequests": {
        "description": "Batch accepts relationship requests.",
        "tags": {
          "category": "Relationships",
          "endpoint": "POST /v1/groups/{groupId}/relationships/{groupRelationshipType}/requests",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.batchAcceptGroupRelationshipRequests({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  groupIds: [15842838],\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to batch accept relationship requests for."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to batch accept for."
          },
          {
            "name": "groupIds",
            "type": "Identifier[]",
            "description": "The ids of the groups to accept."
          }
        ]
      },
      "removeGroupRelationship": {
        "description": "Removes an already existing group relationship",
        "tags": {
          "category": "Relationships",
          "endpoint": "POST /v1/groups/{groupId}/relationships/{groupRelationshipType}/{relatedGroupId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.removeGroupRelationship({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  relatedGroupId: 3843784,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to remove the relationship from."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to remove."
          },
          {
            "name": "relatedGroupId",
            "type": "Identifier",
            "description": "The id of the group to remove."
          }
        ]
      },
      "requestGroupRelationship": {
        "description": "Sends a group relationship request to a group.",
        "tags": {
          "category": "Relationships",
          "endpoint": "POST /v1/groups/{groupId}/relationships/{groupRelationshipType}/{relatedGroupId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.requestGroupRelationship({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  relatedGroupId: 3843784,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to send a request for."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to request."
          },
          {
            "name": "relatedGroupId",
            "type": "Identifier",
            "description": "The id of the group to request a relationship with."
          }
        ]
      },
      "declineGroupRelationshipRequest": {
        "description": "Declines a group relationship request.",
        "tags": {
          "category": "Relationships",
          "endpoint": "DELETE /v1/groups/{groupId}/relationships/{groupRelationshipType}/requests/{relatedGroupId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.declineGroupRelationshipRequest({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  relatedGroupId: 3843784,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to decline for."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to decline."
          },
          {
            "name": "relatedGroupId",
            "type": "Identifier",
            "description": "The id of the group to decline a relationship with."
          }
        ]
      },
      "acceptGroupRelationshipRequest": {
        "description": "Accepts a group relationship request.",
        "tags": {
          "category": "Relationships",
          "endpoint": "POST /v1/groups/{groupId}/relationships/{groupRelationshipType}/requests/{relatedGroupId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.acceptGroupRelationshipRequest({\n  groupId: 5850082,\n  groupRelationshipType: \"Allies\",\n  relatedGroupId: 3843784,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to accept for."
          },
          {
            "name": "groupRelationshipType",
            "type": "GroupRelationshipType",
            "description": "The type of group relationship to accept."
          },
          {
            "name": "relatedGroupId",
            "type": "Identifier",
            "description": "The id of the group to accept a relationship with."
          }
        ]
      },
      "groupPermissionsForRole": {
        "description": "Gets permissions for a role in a group.",
        "tags": {
          "category": "Permissions",
          "endpoint": "GET /v1/groups/{groupId}/roles/{roleSetId}/permissions",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: rolePerms } = await ClassicGroupsApi.groupPermissionsForRole({ groupId: 5850082, roleSetId: 38353814 });",
          "exampleData": "{\n  groupId: 5850082,\n  role: {\n    id: 38353814,\n    name: \"Guest\",\n    description: \"A non-group member.\",\n    rank: 0,\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: false,\n      deleteFromWall: false,\n      viewStatus: false,\n      postToStatus: false,\n    },\n    groupMembershipPermissions: {\n      changeRank: false,\n      inviteMembers: false,\n      removeMembers: false,\n    },\n    groupManagementPermissions: {\n      manageRelationships: false,\n      manageClan: false,\n      viewAuditLogs: false,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: false,\n      advertiseGroup: false,\n      createItems: false,\n      manageItems: false,\n      addGroupPlaces: false,\n      manageGroupGames: false,\n      viewGroupPayouts: false,\n      viewAnalytics: false,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: false,\n      administerCloudAuthentication: false,\n    },\n  },\n}\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  role: {\n    id: 38353814,\n    name: \"Guest\",\n    description: \"A non-group member.\",\n    rank: 0,\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: false,\n      deleteFromWall: false,\n      viewStatus: false,\n      postToStatus: false,\n    },\n    groupMembershipPermissions: {\n      changeRank: false,\n      inviteMembers: false,\n      removeMembers: false,\n    },\n    groupManagementPermissions: {\n      manageRelationships: false,\n      manageClan: false,\n      viewAuditLogs: false,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: false,\n      advertiseGroup: false,\n      createItems: false,\n      manageItems: false,\n      addGroupPlaces: false,\n      manageGroupGames: false,\n      viewGroupPayouts: false,\n      viewAnalytics: false,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: false,\n      administerCloudAuthentication: false,\n    },\n  },\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group."
          },
          {
            "name": "roleSetId",
            "type": "RoleSetId",
            "description": "The id of the role to get permissions for."
          }
        ]
      },
      "setGroupRolePermissions": {
        "description": "Sets permissions for a role in a group.",
        "tags": {
          "category": "Permissions",
          "endpoint": "PATCH /v1/groups/{groupId}/roles/{roleSetId}/permissions",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.setGroupRolePermissions({\n  groupId: 5850082,\n  roleSetId: 38353813,\n  permissions: { viewStatus: true },\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group."
          },
          {
            "name": "roleSetId",
            "type": "RoleSetId",
            "description": "The id of the role to set permissions for."
          },
          {
            "name": "permissions",
            "type": "GroupRolePermissions",
            "description": "An object of permissions to set."
          }
        ]
      },
      "groupGuestRolePermissions": {
        "description": "Gets permissions for the guest role of a group.",
        "tags": {
          "category": "Permissions",
          "endpoint": "GET /v1/groups/{groupId}/roles/guest/permissions",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: rolePerms } = await ClassicGroupsApi.groupGuestRolePermissions({ groupId: 5850082 });",
          "exampleData": "{\n  groupId: 5850082,\n  role: {\n    id: 38353814,\n    name: \"Guest\",\n    description: \"A non-group member.\",\n    rank: 0,\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: false,\n      deleteFromWall: false,\n      viewStatus: false,\n      postToStatus: false,\n    },\n    groupMembershipPermissions: {\n      changeRank: false,\n      inviteMembers: false,\n      removeMembers: false,\n    },\n    groupManagementPermissions: {\n      manageRelationships: false,\n      manageClan: false,\n      viewAuditLogs: false,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: false,\n      advertiseGroup: false,\n      createItems: false,\n      manageItems: false,\n      addGroupPlaces: false,\n      manageGroupGames: false,\n      viewGroupPayouts: false,\n      viewAnalytics: false,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: false,\n      administerCloudAuthentication: false,\n    },\n  },\n}\n",
          "exampleRawBody": "{\n  groupId: 5850082,\n  role: {\n    id: 38353814,\n    name: \"Guest\",\n    description: \"A non-group member.\",\n    rank: 0,\n  },\n  permissions: {\n    groupPostsPermissions: {\n      viewWall: true,\n      postToWall: false,\n      deleteFromWall: false,\n      viewStatus: false,\n      postToStatus: false,\n    },\n    groupMembershipPermissions: {\n      changeRank: false,\n      inviteMembers: false,\n      removeMembers: false,\n    },\n    groupManagementPermissions: {\n      manageRelationships: false,\n      manageClan: false,\n      viewAuditLogs: false,\n    },\n    groupEconomyPermissions: {\n      spendGroupFunds: false,\n      advertiseGroup: false,\n      createItems: false,\n      manageItems: false,\n      addGroupPlaces: false,\n      manageGroupGames: false,\n      viewGroupPayouts: false,\n      viewAnalytics: false,\n    },\n    groupOpenCloudPermissions: {\n      useCloudAuthentication: false,\n      administerCloudAuthentication: false,\n    },\n  },\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group."
          }
        ]
      },
      "groupPermissionsForAllRoles": {
        "description": "Gets permissions for all roles in a group.",
        "tags": {
          "category": "Permissions",
          "endpoint": "GET /v1/groups/{groupId}/roles/permissions",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: allPerms } = await ClassicGroupsApi.groupPermissionsForAllRoles({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    groupId: 5850082,\n    role: {\n      id: 38353814,\n      name: \"Guest\",\n      description: \"A non-group member.\",\n      rank: 0,\n    },\n    permissions: {\n      groupPostsPermissions: {\n        viewWall: true,\n        postToWall: false,\n        deleteFromWall: false,\n        viewStatus: false,\n        postToStatus: false,\n      },\n      groupMembershipPermissions: {\n        changeRank: false,\n        inviteMembers: false,\n        removeMembers: false,\n      },\n      groupManagementPermissions: {\n        manageRelationships: false,\n        manageClan: false,\n        viewAuditLogs: false,\n      },\n      groupEconomyPermissions: {\n        spendGroupFunds: false,\n        advertiseGroup: false,\n        createItems: false,\n        manageItems: false,\n        addGroupPlaces: false,\n        manageGroupGames: false,\n        viewGroupPayouts: false,\n        viewAnalytics: false,\n      },\n      groupOpenCloudPermissions: {\n        useCloudAuthentication: false,\n        administerCloudAuthentication: false,\n      },\n    },\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      groupId: 5850082,\n      role: {\n        id: 38353814,\n        name: \"Guest\",\n        description: \"A non-group member.\",\n        rank: 0,\n      },\n      permissions: {\n        groupPostsPermissions: {\n          viewWall: true,\n          postToWall: false,\n          deleteFromWall: false,\n          viewStatus: false,\n          postToStatus: false,\n        },\n        groupMembershipPermissions: {\n          changeRank: false,\n          inviteMembers: false,\n          removeMembers: false,\n        },\n        groupManagementPermissions: {\n          manageRelationships: false,\n          manageClan: false,\n          viewAuditLogs: false,\n        },\n        groupEconomyPermissions: {\n          spendGroupFunds: false,\n          advertiseGroup: false,\n          createItems: false,\n          manageItems: false,\n          addGroupPlaces: false,\n          manageGroupGames: false,\n          viewGroupPayouts: false,\n          viewAnalytics: false,\n        },\n        groupOpenCloudPermissions: {\n          useCloudAuthentication: false,\n          administerCloudAuthentication: false,\n        },\n      },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The id of the group."
          }
        ]
      },
      "groupSocialLinks": {
        "description": "Gets socials links for a group.",
        "tags": {
          "category": "Social Links",
          "endpoint": "GET /v1/groups/{groupId}/social-links",
          "tags": "[ \"?Cookie\" ]",
          "example": "const { rawBody: socials } = await ClassicGroupsApi.groupSocialLinks(5850082);",
          "exampleData": "[\n  {\n    id: 3412774,\n    type: \"Discord\",\n    url: \"https://discord.gg/4hDH5s52a\",\n    title: \"Support Server\",\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 3412774,\n      type: \"Discord\",\n      url: \"https://discord.gg/4hDH5s52a\",\n      title: \"Support Server\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to get social links for."
          }
        ]
      },
      "addGroupSocialLink": {
        "description": "Adds a new social link to a group.",
        "tags": {
          "category": "Social Links",
          "endpoint": "POST /v1/groups/{groupId}/social-links",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: addedSocial } = await ClassicGroupsApi.addGroupSocialLink({\n  groupId: 5850082,\n  newSocial: {\n    type: \"Twitch\",\n    title: \"Follow My Twitch\",\n    url: \"twitch.tv/fooBar\",\n  },\n});",
          "exampleData": "{\n  id: 10791942,\n  type: \"Twitch\",\n  url: \"https://twitch.tv/fooBar\",\n  title: \"Follow My Twitch\",\n}\n",
          "exampleRawBody": "{\n  id: 10791942,\n  type: \"Twitch\",\n  url: \"https://twitch.tv/fooBar\",\n  title: \"Follow My Twitch\",\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to add a social link to."
          },
          {
            "name": "request",
            "type": "🤷",
            "description": "The social link request data."
          }
        ]
      },
      "removeGroupSocialLink": {
        "description": "Removes an existing social link from a group.",
        "tags": {
          "category": "Social Links",
          "endpoint": "DELETE /v1/groups/{groupId}/social-links/{socialLinkId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.removeGroupSocialLink({ groupId: 5850082, socialLinkId: 10792025 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to add a social link to."
          },
          {
            "name": "socialLinkId",
            "type": "Identifier",
            "description": "The id of the social link to remove."
          }
        ]
      },
      "updateGroupSocialLink": {
        "description": "Updates an existing social link.",
        "tags": {
          "category": "Social Links",
          "endpoint": "PATCH /v1/groups/{groupId}/social-links/{socialLinkId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: updatedSocial } = await ClassicGroupsApi.updateGroupSocialLink({\n  groupId: 5850082,\n  socialLinkId: addedSocial.id,\n  newSocial: {\n    type: \"Twitch\",\n    title: \"Follow My Twitch lol\",\n    url: \"https://twitch.tv/fooBar\",\n  },\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to add a social link to."
          },
          {
            "name": "newSocial",
            "type": "NewSocial",
            "description": "The social link request data."
          }
        ]
      },
      "groupWallPosts_V1": {
        "description": "Gets a list of group wall posts.",
        "tags": {
          "category": "Wall",
          "endpoint": "GET /v1/groups/{groupId}/wall/posts",
          "tags": "[ \"?Cookie\" ]",
          "example": "const { data: wallPosts } = await ClassicGroupsApi.groupWallPosts_V1({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 2727146317,\n    poster: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    body: \"Lorem Ipsum dolor sit amet...\",\n    created: \"2022-11-24T15:31:28.157Z\",\n    updated: \"2022-11-24T15:31:28.157Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"2550358523_1_75917f56fab75bb02bd9d16be933b95a\",\n  data: [\n    {\n      id: 2727146317,\n      poster: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      body: \"Lorem Ipsum dolor sit amet...\",\n      created: \"2022-11-24T15:31:28.157Z\",\n      updated: \"2022-11-24T15:31:28.157Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to get wall posts for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "authenticatedUserSubscribeToGroupWallNotificationEvents": {
        "description": "(THIS ENDPOINT PROBABLY DOESN'T WORK). Subscribes the authenticated user to notifications of group wall events.",
        "tags": {
          "category": "Wall",
          "endpoint": "GET /v1/groups/{groupId}/wall/posts/subscribe",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data } = await ClassicGroupsApi.authenticatedUserSubscribeToGroupWallNotificationEvents({ groupId: 5850082 });"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          }
        ]
      },
      "removeGroupWallPost": {
        "description": "Removes a group wall post.",
        "tags": {
          "category": "Wall",
          "endpoint": "GET /v1/groups/{groupId}/wall/posts/{wallPostId}",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.removeGroupWallPost({ groupId: 5850082, wallPostId: 2727146317 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "wallPostId",
            "type": "Identifier",
            "description": "The id of the wall post to be removed."
          }
        ]
      },
      "removeAllGroupWallPostsMadeByUser": {
        "description": "Removes all group wall posts made by a specific user.",
        "tags": {
          "category": "Wall",
          "endpoint": "GET /v1/groups/{groupId}/wall/users/{userId}/posts",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: success } = await ClassicGroupsApi.removeAllGroupWallPostsMadeByUser({\n  groupId: 5850082,\n  userId: 45348281,\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user."
          }
        ]
      },
      "groupSearch": {
        "description": "Search for groups by keyword.",
        "tags": {
          "category": "Group Search",
          "endpoint": "GET /v1/groups/search",
          "example": "const { data: results } = await ClassicGroupsApi.groupSearch({\n  keyword: \"MightyPart Games\",\n  prioritizeExactMatch: true,\n});",
          "exampleData": "[\n  {\n    id: 5850082,\n    name: \"MightyPart Games\",\n    description: \"Welcome to my amazing group\",\n    memberCount: 102,\n    previousName: \"Nameless Game Studio\",\n    publicEntryAllowed: true,\n    created: \"2020-03-29T18:15:20.1Z\",\n    updated: '\"2023-09-14T06:34:36.243Z\"',\n    hasVerifiedBadge: false,\n  },\n]\n",
          "exampleRawBody": "{\n  keyword: \"MightyPart Games\",\n  previousPageCursor: null,\n  nextPageCursor: \"eyJzdGFydEluZGV4IjoxMCwiZGlzY3JpbWluYXRvciI6ImtleXdvcmQ6TWlnaHR5UGFydCBHYW1lcyIsImNvdW50IjoxMH0KOTIwMGU5MzQwMTBlM2IzOTBlNmU3M2E3MzJkNzhhYzRkZjU1ZGM2ZGEwNWUwMDRjMmM1ZmRmZDlhMzk3YjRhNA==\",\n  data: [\n    {\n      id: 5850082,\n      name: \"MightyPart Games\",\n      description: \"Welcome to my amazing group\",\n      memberCount: 102,\n      previousName: \"Nameless Game Studio\",\n      publicEntryAllowed: true,\n      created: \"2020-03-29T18:15:20.1Z\",\n      updated: '\"2023-09-14T06:34:36.243Z\"',\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "keyword",
            "type": "string",
            "description": "The keyword or phrase to use as the search parameter."
          },
          {
            "name": "prioritizeExactMatch?",
            "type": "boolean",
            "description": "Whether or not to prioritize the exact match for the keyword."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "groupLookupSearch": {
        "description": "Search for groups by keyword.",
        "tags": {
          "category": "Group Search",
          "endpoint": "GET /v1/groups/search/lookup",
          "example": "const { data: results } = await ClassicGroupsApi.groupLookupSearch({ groupName: \"MightyPart Games\" });",
          "exampleData": "[\n  {\n    id: 5850082,\n    name: \"MightyPart Games\",\n    memberCount: 102,\n    hasVerifiedBadge: false,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 5850082,\n      name: \"MightyPart Games\",\n      memberCount: 102,\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupName",
            "type": "string",
            "description": "The name of the group to lookup."
          }
        ]
      },
      "groupSearchMetadata": {
        "description": "Gets suggested groups and other miscellaneous information needed for the group/join page like flags.",
        "tags": {
          "category": "Group Search",
          "endpoint": "GET /v1/groups/search/metadata",
          "example": "const { data: searchMetadata } = await ClassicGroupsApi.groupSearchMetadata();",
          "exampleData": "{\n  suggestedGroupKeywords: [\n    \"Experience Studios\",\n    \"Building\",\n    \"Roleplaying\",\n    \"Fan\",\n  ],\n  showFriendsGroupsSort: true,\n}\n",
          "exampleRawBody": "{\n  SuggestedGroupKeywords: [\n    \"Experience Studios\",\n    \"Building\",\n    \"Roleplaying\",\n    \"Fan\",\n  ],\n  ShowFriendsGroupsSort: true,\n}\n"
        },
        "params": []
      },
      "groupRolesFromIds": {
        "description": "Gets a list of roles from role ids.",
        "tags": {
          "category": "Roles",
          "endpoint": "GET /v1/roles",
          "example": "const { data: roles } = await ClassicGroupsApi.groupRolesFromIds({ roleIds: [38353811] });",
          "exampleData": "{\n  \"38353811\": {\n    groupId: 5850082,\n    name: \"NamelessGuy2005 - Scriptor\",\n    rank: 255,\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      groupId: 5850082,\n      id: 38353811,\n      name: \"NamelessGuy2005 - Scriptor\",\n      rank: 255,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "roleIds",
            "type": "ArrayNonEmptyIfConst<RoleId>",
            "description": "The ids of roles to get."
          }
        ]
      },
      "primaryGroupForUser": {
        "description": "Gets a user's primary group.",
        "tags": {
          "category": "Primary Group",
          "endpoint": "GET /v1/users/{userId}/groups/primary/role",
          "example": "const { data: primaryGroup } = await ClassicGroupsApi.primaryGroupForUser({ userId: 45348281 });",
          "exampleData": "{\n  group: {\n    id: 5850082,\n    name: \"MightyPart Games\",\n    description: \"Welcome to my amazing group\",\n    owner: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    shout: null,\n    isBuildersClubOnly: false,\n    publicEntryAllowed: true,\n    hasVerifiedBadge: false,\n  },\n  role: { id: 38353811, name: \"NamelessGuy2005 - Scriptor\", rank: 255 },\n}\n",
          "exampleRawBody": "{\n  group: {\n    id: 5850082,\n    name: \"MightyPart Games\",\n    description: \"Welcome to my amazing group\",\n    owner: {\n      hasVerifiedBadge: false,\n      userId: 45348281,\n      username: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    shout: null,\n    isBuildersClubOnly: false,\n    publicEntryAllowed: true,\n    hasVerifiedBadge: false,\n  },\n  role: { id: 38353811, name: \"NamelessGuy2005 - Scriptor\", rank: 255 },\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get the primary group for."
          }
        ]
      },
      "authenticatedUserRemovePrimaryGroup": {
        "description": "Removes the authenticated user's primary group.",
        "tags": {
          "category": "Primary Group",
          "endpoint": "DELETE /v1/user/groups/primary",
          "example": "const { data: success } = await ClassicGroupsApi.authenticatedUserRemovePrimaryGroup();",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": []
      },
      "authenticatedUserSetPrimaryGroup": {
        "description": "Sets the authenticated user's primary group.",
        "tags": {
          "category": "Primary Group",
          "endpoint": "POST /v1/user/groups/primary",
          "example": "const { data: success } = await ClassicGroupsApi.authenticatedUserSetPrimaryGroup({ groupId: 5850082 });",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to set as the primary group."
          }
        ]
      },
      "updateGroupRoleSet": {
        "description": "Updates an existing role set.",
        "tags": {
          "category": "Role Sets",
          "endpoint": "PATCH /v1/groups/{groupId}/rolesets/{roleSetId}",
          "example": "const { data: updatedRole } = await ClassicGroupsApi.updateGroupRoleSet({\n  groupId: 5850082,\n  roleSetId: 38353813,\n  newData: {\n    name: \"Mighty Member\",\n    description: \"A regular group member.\",\n    rank: 2,\n  },\n});",
          "exampleData": "{\n  id: 38353813,\n  name: \"Mighty Member\",\n  description: \"A regular group member.\",\n  rank: 2,\n  memberCount: 94,\n}\n",
          "exampleRawBody": "{\n  id: 38353813,\n  name: \"Mighty Member\",\n  description: \"A regular group member.\",\n  rank: 2,\n  memberCount: 94,\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group."
          },
          {
            "name": "roleSetId",
            "type": "Identifier",
            "description": "The id of the role to update."
          },
          {
            "name": "request",
            "type": "🤷",
            "description": "The updated information."
          }
        ]
      },
      "groupsInfo": {
        "description": "Gets information about multiple groups.",
        "tags": {
          "category": "Groups",
          "endpoint": "GET /v2/groups",
          "example": "const { data: groupsInfo } = await ClassicGroupsApi.groupsInfo({ groupIds: [5850082] });",
          "exampleData": "{\n  \"5850082\": {\n    name: \"MightyPart Games\",\n    description: \"Welcome to my amazing group\",\n    owner: { id: 45348281, type: \"User\" },\n    created: \"2020-03-29T18:15:20.100Z\",\n    hasVerifiedBadge: false,\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      id: 5850082,\n      name: \"MightyPart Games\",\n      description: \"Welcome to my amazing group\",\n      owner: { id: 45348281, type: \"User\" },\n      created: \"2020-03-29T18:15:20.1Z\",\n      hasVerifiedBadge: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupIds",
            "type": "GroupId[]",
            "description": "The id of the groups to get information for."
          }
        ]
      },
      "allGroupRolesForUser_v2": {
        "description": "Gets a list of all roles for every group that the specified user is in.",
        "tags": {
          "category": "Groups V2",
          "endpoint": "GET /v2/users/{userId}/groups/roles",
          "tags": "[ \"Cookie\" ]",
          "example": "const { data: groups } = await ClassicGroupsApi.allGroupRolesForUser_v2({ userId: 45348281 });",
          "exampleData": "[\n  {\n    group: {\n      id: 5850082,\n      name: \"MightyPart Games\",\n      memberCount: 108,\n      hasVerifiedBadge: false,\n    },\n    role: { id: 5850082, name: \"Mighty Member\", rank: 100 },\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      group: {\n        id: 5850082,\n        name: \"MightyPart Games\",\n        memberCount: 108,\n        hasVerifiedBadge: false,\n      },\n      role: { id: 5850082, name: \"Mighty Member\", rank: 100 },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get roles for."
          }
        ]
      },
      "groupWallPosts_V2": {
        "description": "Gets a list of group wall posts.",
        "tags": {
          "category": "Wall",
          "endpoint": "GET /v2/groups/{groupId}/wall/posts",
          "tags": "[ \"?Cookie\" ]",
          "example": "const { data: wallPosts } = await ClassicGroupsApi.groupWallPosts_V2({ groupId: 5850082 });",
          "exampleData": "[\n  {\n    id: 2724986278,\n    poster: {\n      user: {\n        hasVerifiedBadge: false,\n        userId: 45348281,\n        username: \"MightyPart\",\n        displayName: \"MightyPart\",\n      },\n      role: { id: 38353813, name: \"Mighty Member\", rank: 1 },\n    },\n    body: \"Lorem ipsum dolor sit amet.\",\n    created: \"2022-11-19T16:30:38.197Z\",\n    updated: \"2022-11-19T16:30:38.197Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"2549745135_1_00ad0f026ca1d251093fc548c366b7ea\",\n  data: [\n    {\n      id: 2724986278,\n      poster: {\n        user: {\n          hasVerifiedBadge: false,\n          userId: 45348281,\n          username: \"MightyPart\",\n          displayName: \"MightyPart\",\n        },\n        role: { id: 38353813, name: \"Mighty Member\", rank: 1 },\n      },\n      body: \"Lorem ipsum dolor sit amet.\",\n      created: \"2022-11-19T16:30:38.197Z\",\n      updated: \"2022-11-19T16:30:38.197Z\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "Identifier",
            "description": "The id of the group to get wall posts for."
          },
          {
            "name": "limit?",
            "type": "10 | 25 | 50 | 100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      }
    },
    "organizations": {
      "orgInfoForGroup": {
        "description": "Gets organization info for a group.",
        "tags": {
          "endpoint": "GET /v1/organizations",
          "example": "const { data: orgInfo } = await ClassicOrganizationsApi.orgInfoForGroup({ groupId: 15842838 });",
          "exampleData": "{ id: \"4244556007738484576\", groupId: \"15842838\" }\n",
          "exampleRawBody": "{ id: \"4244556007738484576\", groupId: \"15842838\" }\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to get organization info about."
          }
        ]
      },
      "orgRoles": {
        "description": "Gets a page of roles for an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/roles",
          "example": "const { data: roles } = await ClassicOrganizationsApi.orgRoles({ orgId: \"4244556007738484576\" });",
          "exampleData": "[\n  {\n    id: \"2011766837304130930\",\n    organizationId: \"4244556007738484576\",\n    name: \"New Role 7275\",\n    color: \"Green\",\n    updatedTime: \"2024-05-31T02:34:51.832Z\",\n  },\n  {\n    id: \"914257001913009232\",\n    organizationId: \"4244556007738484576\",\n    name: \"Developer\",\n    color: \"LightOrange\",\n    updatedTime: \"2024-05-31T01:24:02.823Z\",\n  },\n  {\n    id: \"3456593169348895666\",\n    organizationId: \"4244556007738484576\",\n    name: \"Tester\",\n    color: \"Teal\",\n    updatedTime: \"2024-05-31T01:24:02.827Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  roles: [\n    {\n      id: \"2011766837304130930\",\n      organizationId: \"4244556007738484576\",\n      name: \"New Role 7275\",\n      color: \"Green\",\n      updatedTime: \"2024-05-31T02:34:51.8329242Z\",\n    },\n    {\n      id: \"914257001913009232\",\n      organizationId: \"4244556007738484576\",\n      name: \"Developer\",\n      color: \"LightOrange\",\n      updatedTime: \"2024-05-31T01:24:02.8238408Z\",\n    },\n    {\n      id: \"3456593169348895666\",\n      organizationId: \"4244556007738484576\",\n      name: \"Tester\",\n      color: \"Teal\",\n      updatedTime: \"2024-05-31T01:24:02.8271342Z\",\n    },\n  ],\n  pageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to get roles for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of roles to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "orgRolePermissions": {
        "description": "Gets permissions for a specific role of an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/roles/{roleId}/permissions",
          "example": "const { data: perms } = await ClassicOrganizationsApi.orgRolePermissions({\n  orgId: \"4244556007738484576\",\n  roleId: \"2011766837304130930\",\n});",
          "exampleData": "[\n  { category: \"Organization\", operation: \"ManageMembers\", enabled: false },\n  { category: \"Organization\", operation: \"ManageRoles\", enabled: false },\n  { category: \"Organization\", operation: \"Configure\", enabled: false },\n  { category: \"Experience\", operation: \"Play\", enabled: false },\n  { category: \"Experience\", operation: \"Edit\", enabled: false },\n  { category: \"Experience\", operation: \"ViewAnalytics\", enabled: false },\n]\n",
          "exampleRawBody": "{\n  permissions: [\n    {\n      category: \"Organization\",\n      operation: \"ManageMembers\",\n      enabled: false,\n    },\n    { category: \"Organization\", operation: \"ManageRoles\", enabled: false },\n    { category: \"Organization\", operation: \"Configure\", enabled: false },\n    { category: \"Experience\", operation: \"Play\", enabled: false },\n    { category: \"Experience\", operation: \"Edit\", enabled: false },\n    { category: \"Experience\", operation: \"ViewAnalytics\", enabled: false },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to get a roles permissions for."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The ID of the role to get permissions for."
          }
        ]
      },
      "orgRoleMetadata": {
        "description": "Gets metadata for a specific role of an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/roles/{roleId}/metadata",
          "example": "const { data: metadata } = await ClassicOrganizationsApi.orgRoleMetadata({\n  orgId: \"4244556007738484576\",\n  roleId: \"914257001913009232\",\n});",
          "exampleData": "{\n  id: \"914257001913009232\",\n  organizationId: \"4244556007738484576\",\n  name: \"Developer\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T01:24:02.823Z\",\n}\n",
          "exampleRawBody": "{\n  id: \"914257001913009232\",\n  organizationId: \"4244556007738484576\",\n  name: \"Developer\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T01:24:02.823Z\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to get a roles metadata for."
          },
          {
            "name": "roleId",
            "type": "RoleId",
            "description": "The ID of the role to get metadata for."
          }
        ]
      },
      "overwriteOrgRolePermissions": {
        "description": "Overwrites permissions for a role of an organizations.",
        "tags": {
          "endpoint": "PATCH /v1/organizations/{orgId}/roles/{roleId}/permissions",
          "example": "const { data: success } = await ClassicOrganizationsApi.overwriteOrgRolePermissions({\n  orgId: \"4244556007738484576\",\n  roleId: \"4500991930780611394\",\n  newPermissions: {\n    manageMembers: true,\n    manageRoles: true,\n    configure: true,\n    play: true,\n    edit: true,\n    viewAnalytics: true,\n  },\n});",
          "exampleData": "",
          "exampleRawBody": "{ success: true }\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to overwrite a roles permissions in."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The ID of the group to overwrite permissions for."
          },
          {
            "name": "newPermissions",
            "type": "OverwriteOrgRolePermissions_NewPermissions",
            "description": "The new permissions to assign to the role."
          }
        ]
      },
      "orgRoleMembers": {
        "description": "Gets a page of members for a specific role in an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/roles/{roleId}/users",
          "example": "const { data: members } = await ClassicOrganizationsApi.orgRoleMembers({\n  orgId: \"4244556007738484576\",\n  roleId: \"4500991930780611394\",\n});",
          "exampleData": "[\n  {\n    userId: \"45348281\",\n    roles: [\n      {\n        id: \"4500991930780611394\",\n        organizationId: \"4244556007738484576\",\n        name: \"Orange\",\n        color: \"Orange\",\n        updatedTime: \"2024-05-31T03:13:24.753Z\",\n      },\n    ],\n  },\n]\n",
          "exampleRawBody": "{\n  users: [\n    {\n      userId: \"45348281\",\n      roles: [\n        {\n          id: \"4500991930780611394\",\n          organizationId: \"4244556007738484576\",\n          name: \"Orange\",\n          color: \"Orange\",\n          updatedTime: \"2024-05-31T03:13:24.7539993Z\",\n        },\n      ],\n    },\n  ],\n  pageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to get members for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of members to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "orgMembers": {
        "description": "Gets a page of members for an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/users",
          "example": "const { data: members } = await ClassicOrganizationsApi.orgMembers({ orgId: \"4244556007738484576\" });",
          "exampleData": "[\n  {\n    userId: \"45348281\",\n    roles: [\n      {\n        id: \"914257001913009232\",\n        organizationId: \"4244556007738484576\",\n        name: \"Developer\",\n        color: \"LightOrange\",\n        updatedTime: \"2024-05-31T01:24:02.823Z\",\n      },\n    ],\n  },\n]\n",
          "exampleRawBody": "{\n  users: [\n    {\n      userId: \"45348281\",\n      roles: [\n        {\n          id: \"914257001913009232\",\n          organizationId: \"4244556007738484576\",\n          name: \"Developer\",\n          color: \"LightOrange\",\n          updatedTime: \"2024-05-31T01:24:02.8238408Z\",\n        },\n      ],\n    },\n  ],\n  pageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to get members for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of members to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "orgInvitations": {
        "description": "Gets a page of members for an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/users",
          "example": "const { data: invitations } = await ClassicOrganizationsApi.orgInvitations({ orgId: \"4244556007738484576\" });",
          "exampleData": "[\n  {\n    id: \"7659171709868310756\",\n    organizationId: \"4244556007738484576\",\n    recipientUserId: \"2655994471\",\n    senderUserId: \"45348281\",\n    invitationStatusType: \"Open\",\n    updatedTime: \"2024-05-31T04:30:08.713Z\",\n  },\n]\n",
          "exampleRawBody": "{\n  invitations: [\n    {\n      id: \"7659171709868310756\",\n      organizationId: \"4244556007738484576\",\n      recipientUserId: \"2655994471\",\n      senderUserId: \"45348281\",\n      invitationStatusType: \"Open\",\n      updatedTime: \"2024-05-31T04:30:08.713Z\",\n    },\n  ],\n  pageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to get invitations for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maximum amount of roles to return."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "createOrgInvitation": {
        "description": "Invites a user to an organization.",
        "tags": {
          "endpoint": "POST /v1/organizations/{orgId}/invitations",
          "example": "const { data: inviteInfo } = await ClassicOrganizationsApi.createOrgInvitation({\n  orgId: \"4244556007738484576\",\n  userId: 2655994471,\n});",
          "exampleData": "[\n  {\n    userId: \"45348281\",\n    roles: [\n      {\n        id: \"914257001913009232\",\n        organizationId: \"4244556007738484576\",\n        name: \"Developer\",\n        color: \"LightOrange\",\n        updatedTime: \"2024-05-31T01:24:02.823Z\",\n      },\n    ],\n  },\n]\n",
          "exampleRawBody": "{\n  users: [\n    {\n      userId: \"45348281\",\n      roles: [\n        {\n          id: \"914257001913009232\",\n          organizationId: \"4244556007738484576\",\n          name: \"Developer\",\n          color: \"LightOrange\",\n          updatedTime: \"2024-05-31T01:24:02.8238408Z\",\n        },\n      ],\n    },\n  ],\n  pageToken: \"\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to invite a user to."
          },
          {
            "name": "userId",
            "type": "UserId",
            "description": "The ID of the user to invite to the organization."
          }
        ]
      },
      "removeOrgInvitation": {
        "description": "Invites a user to an organization.",
        "tags": {
          "endpoint": "DELETE /v1/organizations/{orgId}/invitations/{invitationId}",
          "example": "const { data: success } = await ClassicOrganizationsApi.removeOrgInvitation({\n  orgId: \"4244556007738484576\",\n  invitationId: \"2985153037232505065\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ success: true }\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to invite a user to."
          },
          {
            "name": "invitationId",
            "type": "Identifier",
            "description": "The ID of the invitation to remove."
          }
        ]
      },
      "orgMemberPermissions": {
        "description": "Gets permissions for a specific member of an organization.",
        "tags": {
          "endpoint": "GET /v1/organizations/{orgId}/users/{userId}/permissions",
          "example": "const { data: perms } = await ClassicOrganizationsApi.orgMemberPermissions({\n  orgId: \"4244556007738484576\",\n  userId: 45348281,\n});",
          "exampleData": "{\n  isOwner: true,\n  canConfigureOrganization: true,\n  canManageRoles: true,\n  canManageMembers: true,\n  canViewAnalytics: true,\n  canPlayExperiences: true,\n  canEditExperiences: true,\n}\n",
          "exampleRawBody": "{\n  isOwner: true,\n  canConfigureOrganization: true,\n  canManageRoles: true,\n  canManageMembers: true,\n  canViewAnalytics: true,\n  canPlayExperiences: true,\n  canEditExperiences: true,\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to get a users permissions for."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get permissions for."
          }
        ]
      },
      "giveRoleToOrgMember": {
        "description": "Gives a specifc role to an organization member.",
        "tags": {
          "endpoint": "POST /v1/organizations/{orgId}/users/{userId}/roles/{roleId}",
          "example": "const { data: success } = await ClassicOrganizationsApi.giveRoleToOrgMember({\n  orgId: \"4244556007738484576\",\n  userId: 45348281,\n  roleId: \"914257001913009232\",\n});",
          "exampleData": "{ success: true }\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to give a user a role in."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to give a role to."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The ID of the role to be given."
          }
        ]
      },
      "removeRoleFromOrgMember": {
        "description": "Removes a specifc role from an organization member.",
        "tags": {
          "endpoint": "DELETE /v1/organizations/{orgId}/users/{userId}/roles/{roleId}",
          "example": "const { data: success } = await ClassicOrganizationsApi.removeRoleFromOrgMember({\n  orgId: \"4244556007738484576\",\n  userId: 45348281,\n  roleId: \"914257001913009232\",\n});",
          "exampleData": "{ success: true }\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to give a user a role in."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to give a role to."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The ID of the role to be given."
          }
        ]
      },
      "createOrgRole": {
        "description": "Creates a role in a specific organization.",
        "tags": {
          "endpoint": "POST /v1/organizations/{orgId}/roles",
          "example": "const { data } = await ClassicOrganizationsApi.createOrgRole({\n  orgId: \"4244556007738484576\",\n  roleName: \"Admin\",\n  roleColor: \"LightOrange\",\n});",
          "exampleData": "{\n  id: \"4508567586590971666\",\n  organizationId: \"4244556007738484576\",\n  name: \"Admin\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T03:25:37.841Z\",\n}\n",
          "exampleRawBody": "{\n  id: \"4508567586590971666\",\n  organizationId: \"4244556007738484576\",\n  name: \"Admin\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T03:25:37.8410158Z\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to create a role in."
          },
          {
            "name": "roleName",
            "type": "RoleName",
            "description": "The name for the new role."
          },
          {
            "name": "roleColor",
            "type": "RoleColor",
            "description": "The color for the new role."
          }
        ]
      },
      "updateOrgRole": {
        "description": "Updates an existing role in a specific organization.",
        "tags": {
          "endpoint": "PATCH /v1/organizations/{orgId}/roles/{roleId}/metadata",
          "example": "const { data: updatedRoleInfo } = await ClassicOrganizationsApi.updateOrgRole({\n  orgId: \"4244556007738484576\",\n  roleId: \"517896615410563397\",\n  roleName: \"Admin\",\n  roleColor: \"LightOrange\",\n});",
          "exampleData": "{\n  id: \"4508567586590971666\",\n  organizationId: \"4244556007738484576\",\n  name: \"Admin\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T03:25:37.841Z\",\n}\n",
          "exampleRawBody": "{\n  id: \"4508567586590971666\",\n  organizationId: \"4244556007738484576\",\n  name: \"Admin\",\n  color: \"LightOrange\",\n  updatedTime: \"2024-05-31T03:25:37.8410158Z\",\n}\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "OrgId",
            "description": "The ID of the organization to update a role in."
          },
          {
            "name": "roleId",
            "type": "RoleId",
            "description": "The ID of the role to update."
          },
          {
            "name": "roleName",
            "type": "RoleName",
            "description": "The new name for the role."
          },
          {
            "name": "roleColor",
            "type": "RoleColor",
            "description": "The new color for the role."
          }
        ]
      },
      "deleteOrgRole": {
        "description": "Deletes a role from a specific organization.",
        "tags": {
          "endpoint": "DELETE /v1/organizations/{orgId}/roles/{roleId}",
          "example": "const { data: success } = await ClassicOrganizationsApi.deleteOrgRole({\n  orgId: \"4244556007738484576\",\n  roleId: \"3960412067952396265\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ success: true }\n"
        },
        "params": [
          {
            "name": "orgId",
            "type": "Identifier",
            "description": "The ID of the organization to delete a role from."
          },
          {
            "name": "roleId",
            "type": "Identifier",
            "description": "The ID of the role to be deleted."
          }
        ]
      }
    },
    "premiumFeatures": {
      "userHasPremium": {
        "description": "Returns true if the user currently has a Roblox Premium subscription.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/validate-membership",
          "example": "const { data: hasPremium } = await ClassicPremiumFeaturesApi.userHasPremium({ userId: 45348281 });",
          "exampleData": "",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get premium membership for."
          }
        ]
      },
      "userSubscriptions": {
        "description": "Gets a list of subscriptions for a user. NOTE: Can only get subscriptions for the authenticated user.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/subscriptions",
          "example": "const { data: subscriptions } = await ClassicPremiumFeaturesApi.userSubscriptions({ userId: 45348281 });",
          "exampleData": "{\n  subscriptionProductModel: {\n    premiumFeatureId: 505,\n    subscriptionTypeName: \"RobloxPremium450\",\n    robuxStipendAmount: 450,\n    isLifetime: false,\n    expiration: \"2024-08-15T15:04:28.326Z\",\n    renewal: \"2024-08-12T15:04:28.326Z\",\n    created: \"2014-02-14T16:20:38.117Z\",\n    purchasePlatform: \"isIosApp\",\n    subscriptionName: \"Roblox Premium 450\",\n  },\n}\n",
          "exampleRawBody": "{\n  subscriptionProductModel: {\n    premiumFeatureId: 505,\n    subscriptionTypeName: \"RobloxPremium450\",\n    robuxStipendAmount: 450,\n    isLifetime: false,\n    expiration: \"2024-08-15T15:04:28.326Z\",\n    renewal: \"2024-08-12T15:04:28.326Z\",\n    created: \"2014-02-14T16:20:38.117Z\",\n    purchasePlatform: \"isIosApp\",\n    subscriptionName: \"Roblox Premium 450\",\n  },\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The ID of the user to get subscriptions for."
          }
        ]
      }
    },
    "shareLinks": {
      "shareLinkInfo": {
        "description": "Gets information about a share link.",
        "tags": {
          "endpoint": "POST /v1/resolve-link",
          "example": "const { data: linkInfo } = await ClassicShareLinksApi.shareLinkInfo({\n  shareLinkId: \"0629f8e684039c4d800a1a03623e7a6f\",\n});",
          "exampleData": "{\n  experienceInviteData: null,\n  friendInviteData: null,\n  notificationExperienceInviteData: null,\n  profileLinkResolutionResponseData: null,\n  screenshotInviteData: null,\n  privateServerInviteData: {\n    status: \"Valid\",\n    ownerUserId: 45348281,\n    universeId: 6430220996,\n    privateServerId: 1630945839,\n    linkCode: \"67771413747491684286858666824242\",\n    placeId: 18980972074,\n  },\n  experienceDetailsInviteData: null,\n  avatarItemDetailsData: null,\n  contentPostData: null,\n  experienceAffiliateData: null,\n}\n",
          "exampleRawBody": "{\n  experienceInviteData: null,\n  friendInviteData: null,\n  notificationExperienceInviteData: null,\n  profileLinkResolutionResponseData: null,\n  screenshotInviteData: null,\n  privateServerInviteData: {\n    status: \"Valid\",\n    ownerUserId: 45348281,\n    universeId: 6430220996,\n    privateServerId: 1630945839,\n    linkCode: \"67771413747491684286858666824242\",\n    placeId: 18980972074,\n  },\n  experienceDetailsInviteData: null,\n  avatarItemDetailsData: null,\n  contentPostData: null,\n  experienceAffiliateData: null,\n}\n"
        },
        "params": [
          {
            "name": "shareLinkId",
            "type": "string",
            "description": "The ID (code) of the share link."
          }
        ]
      }
    },
    "subscriptions": {
      "createSubscription": {
        "description": "Creates a subscription for a specified universe.",
        "tags": {
          "endpoint": "POST /v1/experiences/{universeId}/experience-subscriptions",
          "example": "const { data } = await ClassicSubscriptionsApi.createSubscription({\n  universeId: 5795192361,\n  name: \"Cool Subscription\",\n  description: \"Lorem ipsum dolor sit amet.\",\n  type: \"Durable\",\n  price: \"$7.99\",\n});",
          "exampleData": "{\n  id: \"8517167288618319987\",\n  universeId: 5795192361,\n  shopId: 5795481121,\n  name: \"Cool Subscription\",\n  description: \"Lorem ipsum dolor sit amet.\",\n  imageAssetId: 0,\n  periodType: \"Monthly\",\n  developerSubscriptionProductType: \"Durable\",\n  productStatusType: 1,\n  initialActivationTimestampMs: null,\n  createdTimestampMs: 1713322834753,\n  updatedTimestampMs: 1713322834753,\n}\n",
          "exampleRawBody": "{\n  developerSubscription: {\n    id: \"8517167288618319987\",\n    universeId: 5795192361,\n    shopId: 5795481121,\n    name: \"Cool Subscription\",\n    description: \"Lorem ipsum dolor sit amet.\",\n    imageAssetId: 0,\n    periodType: 1,\n    developerSubscriptionProductType: 3,\n    productStatusType: 1,\n    initialActivationTimestampMs: null,\n    createdTimestampMs: 1713322834753,\n    updatedTimestampMs: 1713322834753,\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to create a subscription for."
          },
          {
            "name": "name",
            "type": "Name",
            "description": "The subscription name."
          },
          {
            "name": "description",
            "type": "Description",
            "description": "The subscription description."
          },
          {
            "name": "type",
            "type": "Type",
            "description": "The subscription type."
          },
          {
            "name": "price",
            "type": "SubsriptionPrice",
            "description": "The subscription price."
          }
        ]
      },
      "setSubscriptionIcon": {
        "description": "Sets the icon of a subscription.",
        "tags": {
          "endpoint": "POST /v1/experiences/{universeId}/experience-subscriptions/{subscriptionId}/upload-image",
          "example": "const { data: success } = await ClassicSubscriptionsApi.setSubscriptionIcon({\n  universeId: 5795192361,\n  subscriptionId: \"3656348821302804581\",\n  actingUserId: 45348281,\n  icon: \"./src/image.png\",\n});",
          "exampleData": "",
          "exampleRawBody": "{ status: true }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to create a subscription for."
          }
        ]
      },
      "subscriptionsForUniverse": {
        "description": "Lists subscriptions for a specified universe.",
        "tags": {
          "endpoint": "GET /v1/experiences/{universeId}/experience-subscriptions",
          "exampleconst": "{ data:subscriptions } = await ClassicSubscriptionsApi.subscriptionsForUniverse({ universeId: 5795192361 })",
          "exampleData": "[\n  {\n    id: \"3656348821302804581\",\n    universeId: 5795192361,\n    name: \"Testing\",\n    description: \"Lorem ipsum dolor sit amet.\",\n    imageAssetId: 17095512680,\n    periodType: \"Monthly\",\n    productType: \"Consumable\",\n    productStatusType: 1,\n    basePriceId: \"919c5912-7de8-413c-9756-d4265b3cbd3a\",\n    initialActivationTimestampMs: 0,\n    createdTimestampMs: 1712783803427,\n    updatedTimestampMs: 1712783804047,\n    basePrice: \"$2.99\",\n  },\n]\n",
          "exampleRawBody": "{\n  developerSubscriptions: [\n    {\n      id: \"3656348821302804581\",\n      universeId: 5795192361,\n      name: \"Testing\",\n      description: \"Lorem ipsum dolor sit amet.\",\n      imageAssetId: 17095512680,\n      periodType: 1,\n      productType: 1,\n      productStatusType: 1,\n      basePriceId: \"919c5912-7de8-413c-9756-d4265b3cbd3a\",\n      initialActivationTimestampMs: 0,\n      createdTimestampMs: 1712783803427,\n      updatedTimestampMs: 1712783804047,\n    },\n  ],\n  previousCursor: \"id_2Ac8yvfXhfKwAZQ\",\n  nextCursor: \"id_2Ac8yvfXhfKwAZQ\",\n  hasMoreResults: false,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe to create a subscription for."
          },
          {
            "name": "resultsPerPage?",
            "type": "number",
            "description": "The number of results to show per page."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "A pagination cursor for the next or previous page."
          }
        ]
      },
      "subscriptionInfo": {
        "description": "Gets information about a subscription for a specified universe.",
        "tags": {
          "endpoint": "GET /v1/experiences/{universeId}/experience-subscriptions/{subscriptionId}",
          "example": "const { data: subscription } = await ClassicSubscriptionsApi.subscriptionInfo({\n  universeId: 5795192361,\n  subscriptionId: \"3656348821302804581\",\n});",
          "exampleData": "{\n  id: \"3656348821302804581\",\n  universeId: 5795192361,\n  name: \"Testing\",\n  description: \"Lorem ipsum dolor sit amet.\",\n  imageAssetId: 17175811135,\n  periodType: \"Monthly\",\n  productType: \"Consumable\",\n  productStatusType: 1,\n  basePriceId: \"919c5912-7de8-413c-9756-d4265b3cbd3a\",\n  initialActivationTimestampMs: 0,\n  createdTimestampMs: 1712783803427,\n  updatedTimestampMs: 1713318949692,\n  basePrice: \"$2.99\",\n}\n",
          "exampleRawBody": "{\n  id: \"3656348821302804581\",\n  universeId: 5795192361,\n  name: \"Testing\",\n  description: \"Lorem ipsum dolor sit amet.\",\n  imageAssetId: 17175811135,\n  periodType: 1,\n  productType: 1,\n  productStatusType: 1,\n  basePriceId: \"919c5912-7de8-413c-9756-d4265b3cbd3a\",\n  initialActivationTimestampMs: 0,\n  createdTimestampMs: 1712783803427,\n  updatedTimestampMs: 1713318949692,\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The id of the universe."
          },
          {
            "name": "subscriptionId",
            "type": "SubscriptionId",
            "description": "The id of the subscription to get."
          }
        ]
      },
      "subscriptionsPriceTiersForUniverse": {
        "description": "Gets all of the availible price tiers that a universe's subscriptions can have.",
        "tags": {
          "endpoint": "GET /v1/experiences/{universeId}/experience-subscriptions/prices",
          "example": "const { data: tiers } = await ClassicSubscriptionsApi.subscriptionsPriceTiersForUniverse({ universeId: 5795192361 });",
          "exampleData": "{\n  \"919c5912-7de8-413c-9756-d4265b3cbd3a\": \"$2.99\",\n  \"c0516080-fc44-42a2-bc23-3c6dbfd0772d\": \"$4.99\",\n  \"75c782ff-9d8b-4cf0-b3d8-64dd0ec4676a\": \"$7.99\",\n  \"1adf5d0a-eabb-4d5d-a9e7-d9ab28dcb7c7\": \"$9.99\",\n  \"790ff0ac-ef4b-490e-9b95-89f9249b8f51\": \"$14.99\",\n}\n",
          "exampleRawBody": "{\n  priceTierPrices: {\n    \"919c5912-7de8-413c-9756-d4265b3cbd3a\": { units: 2, cents: 99 },\n    \"c0516080-fc44-42a2-bc23-3c6dbfd0772d\": { units: 4, cents: 99 },\n    \"75c782ff-9d8b-4cf0-b3d8-64dd0ec4676a\": { units: 7, cents: 99 },\n    \"1adf5d0a-eabb-4d5d-a9e7-d9ab28dcb7c7\": { units: 9, cents: 99 },\n    \"790ff0ac-ef4b-490e-9b95-89f9249b8f51\": { units: 14, cents: 99 },\n  },\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe."
          }
        ]
      },
      "authenticatedUserSubscriptionsPermissionsForUniverse": {
        "description": "Gets permissions the authenticated user can perform of a specified universes subscriptions.",
        "tags": {
          "endpoint": "GET /v1/experiences/{universeId}/experience-subscriptions/permission",
          "example": "const { data: perms } = await ClassicSubscriptionsApi.authenticatedUserSubscriptionsPermissionsForUniverse({\n  universeId: 5795192361,\n});",
          "exampleData": "{ canUserEditExperienceSubscription: true }\n",
          "exampleRawBody": "{ canUserEditExperienceSubscription: true }\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get subscription permissions for."
          }
        ]
      }
    },
    "talent": {
      "creatorProfile": {
        "description": "Gets profile information about someones talent hub profile.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/profile",
          "example": "const { data: profile } = await ClassicTalentApi.creatorProfile({ userId: 45348281 });",
          "exampleData": "{\n  creatorUserId: 45348281,\n  createdUtc: \"2021-08-13T01:21:19.146Z\",\n  updatedUtc: \"2024-05-05T01:24:58.442Z\",\n  isPublic: true,\n  isContactAllowed: false,\n  creatorDescription: \"Lorem ipsum dolor sit amet.\",\n  isOpenToWork: false,\n  interestDescription: \"\",\n  linkTypes: [\"DeveloperForum\", \"Roblox\", \"Twitter\"],\n  preferredContactLinkType: \"DeveloperForum\",\n  socialLinks: [],\n  jobTypes: [],\n  skillTypes: [\"Programmer\"],\n  requiresAction: \"NoAction\",\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      creatorUserId: 45348281,\n      createdUtc: \"2021-08-13T01:21:19.1463527Z\",\n      updatedUtc: \"2024-05-05T01:24:58.4421938Z\",\n      isPublic: true,\n      isContactAllowed: false,\n      creatorDescription: \"Lorem ipsum dolor sit amet.\",\n      isOpenToWork: false,\n      interestDescription: \"\",\n      linkTypes: [\"DeveloperForum\", \"Roblox\", \"Twitter\"],\n      preferredContactLinkType: \"DeveloperForum\",\n      socialLinks: [],\n      jobTypes: [],\n      skillTypes: [\"Programmer\"],\n      requiresAction: \"NoAction\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get verification info about."
          }
        ]
      },
      "creatorExperiences": {
        "description": "Gets someones work history (experiences / games) from their talent hub profile.",
        "tags": {
          "endpoint": "GET /v1/users/{userId}/experiences",
          "example": "const { data: experiences } = await ClassicTalentApi.creatorExperiences({ userId: 45348281 });",
          "exampleData": "[\n  {\n    experienceId: 21126,\n    creatorUserId: 45348281,\n    createdUtc: \"2022-01-16T16:09:30.161Z\",\n    updatedUtc: \"2022-07-29T12:23:28.866Z\",\n    projectName: \"RoCamping\",\n    experienceDescription: \"RoCamping was my first game, it was a survival game where you built a shelter and tried to survive. My role was the manage the project as well as script and create the UI .\",\n    jobRole: \"Programmer & UI Designer\",\n    teamName: \"\",\n    experienceMedia: [],\n    experienceLinks: [\n      \"[The Game](https://www.roblox.com/games/4922741943/RoCamping)\",\n    ],\n    teamId: null,\n    robloxExperienceIds: [],\n    robloxAssetIds: [],\n    startedUtc: \"2020-03-31T23:00:00.000Z\",\n    endedUtc: \"2020-09-30T23:00:00.000Z\",\n    isCurrent: false,\n  },\n]\n",
          "exampleRawBody": "{\n  data: [\n    {\n      experienceId: 21126,\n      creatorUserId: 45348281,\n      createdUtc: \"2022-01-16T16:09:30.1614813Z\",\n      updatedUtc: \"2022-07-29T12:23:28.8660325Z\",\n      projectName: \"RoCamping\",\n      experienceDescription: \"RoCamping was my first game, it was a survival game where you built a shelter and tried to survive. My role was the manage the project as well as script and create the UI .\",\n      jobRole: \"Programmer & UI Designer\",\n      teamName: \"\",\n      experienceMedia: [],\n      experienceLinks: [\n        \"[The Game](https://www.roblox.com/games/4922741943/RoCamping)\",\n      ],\n      teamId: null,\n      robloxExperienceIds: [],\n      robloxAssetIds: [],\n      startedUtc: \"2020-03-31T23:00:00Z\",\n      endedUtc: \"2020-09-30T23:00:00Z\",\n      isCurrent: false,\n    },\n  ],\n  nextPageCursor: null,\n  previousPageCursor: null,\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get verification info about."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order the results are sorted it."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results to be returned"
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "creatorIsIdVerified": {
        "description": "Gets ID verification status for a user that has a public talent hub profile.",
        "tags": {
          "endpoint": "GET /v1/users/verification",
          "example": "const { data: isIdVerified } = await ClassicTalentApi.creatorIsIdVerified({ userId: 45348281 });",
          "exampleData": "{ data: [{ userId: 45348281, isVerified: false }] }\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get verification info about."
          }
        ]
      },
      "jobSearch": {
        "description": "Searches talent hub job posts.",
        "tags": {
          "endpoint": "GET /v1/search/jobs",
          "example": "const { data: jobSearchData } = await ClassicTalentApi.jobSearch({ query: \"simulator\", limit: 1, cursor: 1 });",
          "exampleData": "{\n  results: [\n    {\n      id: \"2428901580346619\",\n      jobPosterId: \"419693467\",\n      title: \"Frontend Scripter for a simulator game\",\n      description: \"Hi I'm looking for 1 scripter that can work on the frontend script in my new game i already have a talented scripter that wanna focus on the backend but if you are good at booth we can se what we can do. The game function in a way where you collect different instruments and pets to become one of the best musicians in the game, if you want more information about the game, just ask. Below you can see pictures of models but also UI that we have right now but of course these are just a beginning and we will upgrade these.\",\n      jobType: \"FullTime\",\n      paymentTypes: [\"RevenuePercent\"],\n      skillTypes: [\"Scripting\"],\n      publishedUtc: \"2024-04-10T19:37:08.749Z\",\n      expiresUtc: \"2024-07-09T19:37:08.749Z\",\n      minAgeRequirement: 0,\n      isVerifiedRequirement: true,\n      isVerified: \"true\",\n      paymentAmount: 25,\n      paymentAmountType: \"Total\",\n    },\n  ],\n  meta: {\n    page: { totalPages: 184, totalResults: 184, current: 1, size: 1 },\n  },\n}\n",
          "exampleRawBody": "{\n  meta: {\n    page: { totalPages: 184, totalResults: 184, current: 1, size: 1 },\n  },\n  results: [\n    {\n      id: { raw: \"2428901580346619\" },\n      jobPosterId: { raw: \"419693467\" },\n      title: { raw: \"Frontend Scripter for a simulator game\" },\n      description: {\n        raw: \"Hi I'm looking for 1 scripter that can work on the frontend script in my new game i already have a talented scripter that wanna focus on the backend but if you are good at booth we can se what we can do. The game function in a way where you collect different instruments and pets to become one of the best musicians in the game, if you want more information about the game, just ask. Below you can see pictures of models but also UI that we have right now but of course these are just a beginning and we will upgrade these.\",\n      },\n      jobType: { raw: \"FullTime\" },\n      paymentTypes: { raw: [\"RevenuePercent\"] },\n      skillTypes: { raw: [\"Scripting\"] },\n      publishedUtc: { raw: \"2024-04-10T19:37:08.749Z\" },\n      expiresUtc: { raw: \"2024-07-09T19:37:08.749Z\" },\n      minAgeRequirement: { raw: 0 },\n      isVerifiedRequirement: { raw: \"false\" },\n      isVerified: { raw: \"true\" },\n      paymentAmount: { raw: 25 },\n      paymentAmountType: { raw: \"Total\" },\n      _meta: { score: 0 },\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "query?",
            "type": "string",
            "description": "The query to search for."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The maxium amount of items to return."
          },
          {
            "name": "filter?",
            "type": "JobSearchFilter",
            "description": "Filter the returned job posts to match specific requirements."
          },
          {
            "name": "cursor?",
            "type": "number",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      }
    },
    "thumbnails": {
      "assetsThumbnails": {
        "description": "Gets thumbnail for multiple assets.",
        "tags": {
          "category": "Assets",
          "endpoint": "GET /v1/assets",
          "example": "const { data: assetsThumbnails } = await ClassicThumbnailsApi.assetsThumbnails({\n  assetIds: [7229442422],\n  size: \"420x420\",\n});",
          "exampleData": "{\n  \"7229442422\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/7da8e78d9e2e303f0122c355f19f66d5/420/420/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 7229442422,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/7da8e78d9e2e303f0122c355f19f66d5/420/420/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "assetIds",
            "type": "ArrayNonEmptyIfConst<AssetId>",
            "description": "The ids of the assets to get thumbnails for."
          },
          {
            "name": "returnPolicy?",
            "type": "ThumbnailReturnPolicy",
            "description": "The policy to use in selecting the thumbnails to return."
          },
          {
            "name": "size",
            "type": "AssetSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "asset3dThumbnail": {
        "description": "Gets 3d thumbnail for an asset.",
        "tags": {
          "category": "Assets",
          "endpoint": "GET /v1/assets-thumbnail-3d",
          "example": "const { data: asset3dData } = await ClassicThumbnailsApi.asset3dThumbnail({ assetId: 6768917255 });",
          "exampleData": "{\n  targetId: 6768917255,\n  state: \"Completed\",\n  imageUrl: \"https://t2.rbxcdn.com/30ac72dfa05dff91baae9b8c0f9049e3\",\n}\n",
          "exampleRawBody": "{\n  targetId: 6768917255,\n  state: \"Completed\",\n  imageUrl: \"https://t2.rbxcdn.com/30ac72dfa05dff91baae9b8c0f9049e3\",\n}\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The id of the asset to get a 3d thumbnail for."
          }
        ]
      },
      "assetAnimatedThumbnail": {
        "description": "Gets animated thumbnail for an asset.",
        "tags": {
          "category": "Assets",
          "endpoint": "GET /v1/asset-thumbnail-animated",
          "example": "const { data: assetAnimatedData } = await ClassicThumbnailsApi.assetAnimatedThumbnail({ assetId: 6768917255 });",
          "exampleData": "{ targetId: 6768917255, state: \"Completed\", imageUrl: null }\n",
          "exampleRawBody": "{ targetId: 6768917255, state: \"Completed\", imageUrl: null }\n"
        },
        "params": [
          {
            "name": "assetId",
            "type": "AssetId",
            "description": "The id of the asset to get an animated thumbnail for."
          }
        ]
      },
      "badgesThumbnails": {
        "description": "Gets thumbnail for multiple badges.",
        "tags": {
          "category": "Badges",
          "endpoint": "GET /v1/badges/icons",
          "example": "const { data: badgesThumbnails } = await ClassicThumbnailsApi.badgesThumbnails({ badgeIds: [2124533401] });",
          "exampleData": "{\n  \"2124533401\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/87105a9a85ea09e7591cfdd3f0825225/150/150/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 2124533401,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/87105a9a85ea09e7591cfdd3f0825225/150/150/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "badgeIds",
            "type": "ArrayNonEmptyIfConst<BadgeId>",
            "description": "The ids of the badges to get thumbnails for."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnailS."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "bundlesThumbnails": {
        "description": "Gets thumbnail for multiple bundles.",
        "tags": {
          "category": "Bundles",
          "endpoint": "GET /v1/bundles/thumbnails",
          "example": "const { data: bundlesThumbnails } = await ClassicThumbnailsApi.bundlesThumbnails({ bundleIds: [181] });",
          "exampleData": "{\n  \"181\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/12ff41b547ee75865bb60d0f3ae5508b/420/420/Avatar/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 181,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/12ff41b547ee75865bb60d0f3ae5508b/420/420/Avatar/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "bundleIds",
            "type": "ArrayNonEmptyIfConst<BundleId>",
            "description": "The ids of the bundles to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "BundleSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "developerProductsThumbnails": {
        "description": "Gets thumbnail for multiple developer products.",
        "tags": {
          "category": "Developer Products",
          "endpoint": "GET /v1/developer-products/icons",
          "example": "const { data: developerProductsThumbnails } = await ClassicThumbnailsApi.developerProductsThumbnails({\n  developerProductIds: [3616425],\n});",
          "exampleData": "{\n  \"3616425\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/3e495c43b44b85cd3dd1afee9df3636b/420/420/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 3616425,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/3e495c43b44b85cd3dd1afee9df3636b/420/420/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "developerProductIds",
            "type": "ArrayNonEmptyIfConst<DeveloperProductId>",
            "description": "The ids of the developer products to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "DeveloperProductSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "gamePassesThumbnails": {
        "description": "Gets thumbnail for multiple game passes.",
        "tags": {
          "category": "Game Passes",
          "endpoint": "GET /v1/game-passes",
          "example": "const { data: gamePassesThumbnails } = await ClassicThumbnailsApi.gamePassesThumbnails({ gamePassIds: [9063647] });",
          "exampleData": "{\n  \"9063647\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/4464935a3f7b124ba0a315cb3ff8113d/150/150/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 9063647,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/4464935a3f7b124ba0a315cb3ff8113d/150/150/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "gamePassIds",
            "type": "ArrayNonEmptyIfConst<GamePassId>",
            "description": "The ids of the game passes to get thumbnails for."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "gameThumbnailsFromIds": {
        "description": "Gets thumbnail for multiple thumbnail ids that belong to a specified universe.",
        "tags": {
          "category": "Game Passes",
          "endpoint": "GET /v1/games/{universeId}/thumbnails",
          "example": "const { data: gameThumbnails } = await ClassicThumbnailsApi.gameThumbnailsFromIds({\n  universeId: 1685831367,\n  thumbnailIds: [5030792576],\n});",
          "exampleData": "{\n  \"5030792576\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/e997db8b4e41b08acb49b9d2bb021b23/768/432/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: \"5030792576\",\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/e997db8b4e41b08acb49b9d2bb021b23/768/432/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeId",
            "type": "Identifier",
            "description": "The id of the universe to get the thumbnails from."
          },
          {
            "name": "thumbnailIds",
            "type": "ArrayNonEmptyIfConst<ThumbnailId>",
            "description": "The ids of the thumbnails."
          },
          {
            "name": "size?",
            "type": "GameThumbnailSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "gamesThumbnails": {
        "tags": {
          "category": "Games",
          "endpoint": "GET /v1/games/icons",
          "example": "const { data: gamesIcons } = await ClassicThumbnailsApi.gamesIcons({ universeIds: [1685831367] });",
          "exampleData": "{\n  \"1685831367\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/7c1bf96fefde7b761e7b86bedf6fdca3/512/512/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 1685831367,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/7c1bf96fefde7b761e7b86bedf6fdca3/512/512/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "universeIds",
            "type": "ArrayNonEmptyIfConst<UniverseId>",
            "description": "The ids of the universes to get the thumbnail icons from."
          },
          {
            "name": "returnPolicy",
            "type": "🤷",
            "description": "The policy to use in selecting the thumbnail icons to return."
          },
          {
            "name": "size?",
            "type": "GameThumbnailSize",
            "description": "The thumbnail icons size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnail icons."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnail icons should be masked by a circle."
          }
        ]
      },
      "groupsEmblems": {
        "description": "Gets group emblem thumbnail for multiple groups.",
        "tags": {
          "category": "Group Emblem",
          "endpoint": "GET /v1/groups/icons",
          "example": "const { data: groupsEmblems } = await ClassicThumbnailsApi.groupsEmblems({ groupIds: [5850082] });",
          "exampleData": "{\n  \"5850082\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/caadbbddbed97108cfcff64fd1258b8f/420/420/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 5850082,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/caadbbddbed97108cfcff64fd1258b8f/420/420/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupIds",
            "type": "ArrayNonEmptyIfConst<GroupId>",
            "description": "The ids of the groups to get the thumbnail icons from."
          },
          {
            "name": "size?",
            "type": "GroupEmblemSize",
            "description": "The thumbnail icons size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnail icons."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnail icons should be masked by a circle."
          }
        ]
      },
      "thumbnailsMetadata": {
        "description": "Gets thumbnail metadata.",
        "tags": {
          "category": "Metadata",
          "endpoint": "GET /v1/metadata",
          "example": "const { data: metadata } = await ClassicThumbnailsApi.metadata();",
          "exampleData": "{\n  isWebappUseCacheEnabled: false,\n  webappCacheExpirationTimspan: \"00:00:00\",\n}\n",
          "exampleRawBody": "{\n  isWebappUseCacheEnabled: false,\n  webappCacheExpirationTimspan: \"00:00:00\",\n}\n"
        },
        "params": []
      },
      "placesIcons": {
        "description": "Gets thumbnail icon for multiple places.",
        "tags": {
          "category": "Places",
          "endpoint": "GET /v1/places/gameicons",
          "example": "const { data: placesIconsThumbnails } = await ClassicThumbnailsApi.placesIcons([4922741943]);",
          "exampleData": "{\n  \"4922741943\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/7c1bf96fefde7b761e7b86bedf6fdca3/512/512/Image/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 4922741943,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/7c1bf96fefde7b761e7b86bedf6fdca3/512/512/Image/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "placeIds",
            "type": "ArrayNonEmptyIfConst<PlaceId>",
            "description": "The ids of the places to get thumbnails for."
          },
          {
            "name": "returnPolicy?",
            "type": "ThumbnailReturnPolicy",
            "description": "The policy to use in selecting the thumbnail icons to return."
          },
          {
            "name": "size?",
            "type": "GamesIconSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "avatarsFullThumbnails": {
        "description": "Gets full avatar thumbnail for multiple users.",
        "tags": {
          "category": "Avatar",
          "endpoint": "GET /v1/users/avatar",
          "example": "const { data: avatarsFullThumbnails } = await ClassicThumbnailsApi.avatarsFullThumbnails({\n  userIds: [45348281],\n  size: \"150x150\",\n});",
          "exampleData": "{\n  \"45348281\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/b91cd7a2d531a50be786e08c7739c56a/150/150/Avatar/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 45348281,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/b91cd7a2d531a50be786e08c7739c56a/150/150/Avatar/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The ids of the users to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "AvatarsFullThumbnailsSize",
            "description": "The avatar thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "avatarsBustsThumbnails": {
        "description": "Gets avatar bust thumbnail for multiple users.",
        "tags": {
          "category": "Avatar",
          "endpoint": "GET /v1/users/avatar-bust",
          "example": "const { data: avatarsBustsThumbnails } = await ClassicThumbnailsApi.avatarsBustsThumbnails({\n  userIds: [45348281],\n  size: \"150x150\",\n});",
          "exampleData": "{\n  \"45348281\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/4b3c0e5b4efdda3bdfd94e77b2850ea5/150/150/AvatarBust/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 45348281,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/4b3c0e5b4efdda3bdfd94e77b2850ea5/150/150/AvatarBust/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The ids of the users to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "AvatarsFullThumbnailsSize",
            "description": "The avatar thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "avatarsHeadshotsThumbnails": {
        "description": "Gets avatar headshot thumbnail for multiple users.",
        "tags": {
          "category": "Avatar",
          "endpoint": "GET /v1/users/avatar-headshot",
          "example": "const { data: avatarsHeadshotsThumbnails } = await ClassicThumbnailsApi.avatarsHeadshotsThumbnails({\n  userIds: [45348281],\n  size: \"720x720\",\n});",
          "exampleData": "{\n  \"45348281\": {\n    state: \"Completed\",\n    imageUrl: \"https://t0.rbxcdn.com/697567606503f6484a06e8617307d54f\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 45348281,\n      state: \"Completed\",\n      imageUrl: \"https://t0.rbxcdn.com/697567606503f6484a06e8617307d54f\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The ids of the users to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "AvatarsFullThumbnailsSize",
            "description": "The avatar thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "avatar3dThumbnail": {
        "description": "Gets 3d avatar thumbnail for multiple users.",
        "tags": {
          "category": "Avatar",
          "endpoint": "GET /v1/users/avatar-3d",
          "example": "const { data: avatar3dData } = await ClassicThumbnailsApi.avatar3dThumbnail({ userId: 45348281 });",
          "exampleData": "{\n  targetId: 45348281,\n  state: \"Completed\",\n  imageUrl: \"https://t6.rbxcdn.com/7927ecfe11399126171f4cd2939dc511\",\n}\n",
          "exampleRawBody": "{\n  targetId: 45348281,\n  state: \"Completed\",\n  imageUrl: \"https://t6.rbxcdn.com/7927ecfe11399126171f4cd2939dc511\",\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get a 3d avatar thumbnail for."
          }
        ]
      },
      "outfit3dThumbnail": {
        "description": "Gets 3d outfit thumbnail for an outfit.",
        "tags": {
          "category": "Outfits",
          "endpoint": "GET /v1/users/outfit-3d",
          "example": "const { data: outfit3dData } = await ClassicThumbnailsApi.outfit3dThumbnail({ outfitId: 110540093 });",
          "exampleData": "{\n  targetId: 110540093,\n  state: \"Completed\",\n  imageUrl: \"https://t7.rbxcdn.com/24eea0d840fe712230943a3bead4659a\",\n}\n",
          "exampleRawBody": "{\n  targetId: 110540093,\n  state: \"Completed\",\n  imageUrl: \"https://t7.rbxcdn.com/24eea0d840fe712230943a3bead4659a\",\n}\n"
        },
        "params": [
          {
            "name": "outfitId",
            "type": "OutfitId",
            "description": "The id of the outfit to get a 3d thumbnail for."
          }
        ]
      },
      "outfitsThumbnails": {
        "description": "Gets outfit thumbnail for multiple outfits.",
        "tags": {
          "category": "Outfits",
          "endpoint": "GET /v1/users/outfits",
          "example": "const { data: outfitsThumbnails } = await ClassicThumbnailsApi.outfitsThumbnails({ outfitIds: [110540093] });",
          "exampleData": "{\n  \"110540093\": {\n    state: \"Completed\",\n    imageUrl: \"https://tr.rbxcdn.com/41b9a3552f17cc2d7bca01b37be25d40/420/420/Avatar/Png\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      targetId: 110540093,\n      state: \"Completed\",\n      imageUrl: \"https://tr.rbxcdn.com/41b9a3552f17cc2d7bca01b37be25d40/420/420/Avatar/Png\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "outfitIds",
            "type": "ArrayNonEmptyIfConst<OutfitId>",
            "description": "The ids of the outfits to get thumbnails for."
          },
          {
            "name": "size?",
            "type": "OutfitSize",
            "description": "The thumbnails size (formatted as {width}x{height})."
          },
          {
            "name": "format?",
            "type": "ThumbnailFormat",
            "description": "Specifies the format of the thumbnails."
          },
          {
            "name": "isCircular?",
            "type": "boolean",
            "description": "Dictates if the thumbnails should be masked by a circle."
          }
        ]
      },
      "batchThumbnails": {
        "description": "Gets thumbnail for multiple things.",
        "tags": {
          "category": "Batch",
          "endpoint": "POST /v1/batch",
          "example": "const { data: thumbnails } = await ClassicThumbnailsApi.batchThumbnails({\n  requests: [\n    {\n      type: \"AvatarHeadShot\",\n      targetId: 45348281,\n      size: \"720x720\",\n      format: \"Png\",\n      isCircular: false,\n    },\n  ],\n});",
          "exampleData": "{\n  AvatarHeadShot: {\n    \"45348281\": {\n      requestId: null,\n      errorCode: 0,\n      errorMessage: \"\",\n      state: \"Completed\",\n      imageUrl: \"https://t0.rbxcdn.com/697567606503f6484a06e8617307d54f\",\n    },\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      requestId: null,\n      errorCode: 0,\n      errorMessage: \"\",\n      targetId: 45348281,\n      state: \"Completed\",\n      imageUrl: \"https://t0.rbxcdn.com/697567606503f6484a06e8617307d54f\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "requests",
            "type": "BReq[]",
            "description": "An array of BatchRequest objects."
          }
        ]
      }
    },
    "universes": {
      "universeIdFromPlaceId": {
        "description": "Gets the parent universe Id from a place Id.",
        "tags": {
          "endpoint": "GET /v1/places/{placeId}/universe",
          "example": "const { data: universeId } = await ClassicUniversesApi.universeIdFromPlaceId({ placeId: 16349154726 });",
          "exampleData": "",
          "exampleRawBody": "{ universeId: 5638577595 }\n"
        },
        "params": [
          {
            "name": "placeId",
            "type": "Identifier",
            "description": "The id of the place to get the universe id for."
          }
        ]
      }
    },
    "users": {
      "authenticatedUserBirthdate": {
        "description": "Gets the birthdate for the currently authenticated user.",
        "tags": {
          "category": "Account Information",
          "endpoint": "GET /v1/birthdate",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: birthdate } = await ClassicUsersApi.authenticatedUserBirthdate();",
          "exampleData": "",
          "exampleRawBody": "{ birthMonth: 2, birthDay: 3, birthYear: 2005 }\n"
        },
        "params": []
      },
      "authenticatedUserDescription": {
        "description": "Gets the description for the currently authenticated user.",
        "tags": {
          "category": "Account Information",
          "endpoint": "GET /v1/description",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: description } = await ClassicUsersApi.authenticatedUserDescription();",
          "exampleData": "",
          "exampleRawBody": "{ description: \"Lorem ipsum dolor sit amet consectetur adipiscing elit.\" }\n"
        },
        "params": []
      },
      "authenticatedUserGender": {
        "description": "Gets the gender for the currently authenticated user.",
        "tags": {
          "category": "Account Information",
          "endpoint": "GET /v1/gender",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: description } = await ClassicUsersApi.authenticatedUserGender();",
          "exampleData": "",
          "exampleRawBody": "{ gender: 2 }\n"
        },
        "params": []
      },
      "validateDisplayNameForNewUser": {
        "description": "Validates a display name for a new user (NOTE: This does not change the display name).",
        "tags": {
          "category": "Display Names",
          "endpoint": "GET /v1/display-names/validate",
          "detailedEndpoint": "GET /v1/display-names/validate ? displayName={displayName} & birthdate={birthdate}",
          "example": "const { data: displayNameIsValid } = await ClassicUsersApi.validateDisplayNameForNewUser({\n  displayName: \"Hello\",\n  birthdate: \"2023-07-27T04:14:57+0000\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "displayName",
            "type": "string",
            "description": "The display name to be validated."
          },
          {
            "name": "birthdate",
            "type": "ISODateTime | Date",
            "description": "The birthdate of the new user."
          }
        ]
      },
      "validateDisplayNameForExistingUser": {
        "description": "Validates a display name for an existing user (NOTE: This does not change the display name).",
        "tags": {
          "category": "Display Names",
          "endpoint": "GET /v1/users/{userId}/display-names/validate",
          "detailedEndpoint": "GET /v1/users/{userId}/display-names/validate ? displayName={displayName}",
          "example": "const { data: displayNameIsValid } = await ClassicUsersApi.validateDisplayNameForExistingUser({\n  userId: 45348281,\n  displayName: \"Hello\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "displayName",
            "type": "string",
            "description": "The display name to be validated."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the existing user."
          }
        ]
      },
      "authenticatedUserSetDisplayName": {
        "description": "Sets the display name for the currently authenticated user.",
        "tags": {
          "category": "Display Names",
          "endpoint": "PATCH /v1/users/{userId}/display-names",
          "tags": "[ \"Auth Needed\", \"XCSRF\" ]",
          "example": "const { data: displayNameUpdated } = await ClassicUsersApi.authenticatedUserSetDisplayName({\n  userId: 45348281,\n  newDisplayName: \"LoremIpsum\",\n});",
          "exampleData": "",
          "exampleRawBody": "{}\n"
        },
        "params": [
          {
            "name": "newDisplayName",
            "type": "string",
            "description": "The new display name for the authenticated user."
          },
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the currently authenticated user (the endpoint requires this for some reason)."
          }
        ]
      },
      "userInfo": {
        "description": "Gets information about a user from their id.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /v1/users/{userId}",
          "example": "const { data: userInfo } = await ClassicUsersApi.userInfo({ userId: 45348281 });",
          "exampleData": "{\n  description: \"Lorem ipsum dolor sit amet consectetur adipiscing elit.\",\n  created: \"2013-07-13T07:50:00.083Z\",\n  isBanned: false,\n  externalAppDisplayName: null,\n  hasVerifiedBadge: false,\n  id: 45348281,\n  name: \"MightyPart\",\n  displayName: \"MightyPart\",\n}\n",
          "exampleRawBody": "{\n  description: \"Lorem ipsum dolor sit amet consectetur adipiscing elit.\",\n  created: \"2013-07-13T07:50:00.083Z\",\n  isBanned: false,\n  externalAppDisplayName: null,\n  hasVerifiedBadge: false,\n  id: 45348281,\n  name: \"MightyPart\",\n  displayName: \"MightyPart\",\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "UserId",
            "description": "The id of the user to get detailed info about."
          }
        ]
      },
      "authenticatedUserInfo": {
        "description": "Gets information about the currently authenticated user.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /v1/users/authenticated",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: userInfo } = await ClassicUsersApi.authenticatedUserInfo();",
          "exampleData": "{ id: 45348281, name: \"MightyPart\", displayName: \"MightyPart\" }\n",
          "exampleRawBody": "{ id: 45348281, name: \"MightyPart\", displayName: \"MightyPart\" }\n"
        },
        "params": []
      },
      "authenticatedUserAgeBracket": {
        "description": "Gets the currently authenticated user's age bracket.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /v1/users/authenticated/age-bracket",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: ageBracket } = await ClassicUsersApi.authenticatedUserAgeBracket();",
          "exampleData": "",
          "exampleRawBody": "{ ageBracket: 0 }\n"
        },
        "params": []
      },
      "authenticatedUserCountryCode": {
        "description": "Gets the currently authenticated user's country code.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /v1/users/authenticated/country-code",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: countryCode } = await ClassicUsersApi.authenticatedUserCountryCode();",
          "exampleData": "",
          "exampleRawBody": "{ countryCode: \"DE\" }\n"
        },
        "params": []
      },
      "authenticatedUserRoles": {
        "description": "Gets the currently authenticated user's roles.",
        "tags": {
          "category": "Users",
          "endpoint": "GET /v1/users/authenticated/roles",
          "tags": "[ \"Auth Needed\" ]",
          "example": "const { data: roles } = await ClassicUsersApi.authenticatedUserRoles();",
          "exampleData": "[\"BetaTester\"]\n",
          "exampleRawBody": "{ roles: [\"BetaTester\"] }\n"
        },
        "params": []
      },
      "usersInfoFromNames": {
        "description": "Gets information about multiple users from their usernames.",
        "tags": {
          "category": "Users",
          "endpoint": "POST /v1/usernames/users",
          "example": "const { data: usersInfo } = await ClassicUsersApi.usersInfoFromNames({ usernames: [\"MightyPart\"] });",
          "exampleData": "{\n  MightyPart: {\n    hasVerifiedBadge: false,\n    id: 45348281,\n    name: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      requestedUsername: \"MightyPart\",\n      hasVerifiedBadge: false,\n      id: 45348281,\n      name: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "usernames",
            "type": "ArrayNonEmptyIfConst<Username>",
            "description": "The usernames of the users to get info about."
          },
          {
            "name": "excludeBannedUsers?",
            "type": "boolean",
            "description": "Dictates if info about banned users should be excluded from the returned data. (defaults to false)."
          }
        ]
      },
      "usersInfoFromIds": {
        "description": "Gets information about multiple users from their ids.",
        "tags": {
          "category": "Users",
          "endpoint": "POST /v1/users",
          "example": "const { data: usersInfo } = await ClassicUsersApi.usersInfoFromIds({ userIds: [45348281] });",
          "exampleData": "{\n  \"45348281\": {\n    hasVerifiedBadge: false,\n    name: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n}\n",
          "exampleRawBody": "{\n  data: [\n    {\n      hasVerifiedBadge: false,\n      id: 45348281,\n      name: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "userIds",
            "type": "ArrayNonEmptyIfConst<UserId>",
            "description": "The ids of the users to get info about."
          },
          {
            "name": "excludeBannedUsers?",
            "type": "boolean",
            "description": "Dictates if info about banned users should be excluded from the returned data. (defaults to false)."
          }
        ]
      },
      "usernameHistory": {
        "description": "Gets a users previous usernames.",
        "tags": {
          "category": "Usernames",
          "endpoint": "GET /v1/users/{userId}/username-history",
          "detailedEndpoint": "GET /v1/users/{userId}/username-history ? limit={limit} & sortOrder={sortOrder} & cursor={cursor}",
          "example": "const { data: previousUsernames } = await ClassicUsersApi.usernameHistory({ userId: 45348281 });",
          "exampleData": "[\"NamelessGuy2005\", \"parrrty\"]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: null,\n  data: [{ name: \"NamelessGuy2005\" }, { name: \"parrrty\" }],\n}\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "Identifier",
            "description": "The id of the user to get the username history for."
          },
          {
            "name": "limit?",
            "type": "10|25|50|100",
            "description": "The number of results to be returned."
          },
          {
            "name": "sortOrder?",
            "type": "SortOrder",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      },
      "userSearch": {
        "description": "Searched for users.",
        "tags": {
          "category": "Usernames",
          "endpoint": "GET /v1/users/search",
          "detailedEndpoint": "GET /v1/users/search ? keyword={keyword} & limit={limit} & cursor={cursor}",
          "example": "const { data: searchResults } = await ClassicUsersApi.userSearch({ keyword: \"MightyPart\", limit: 10 });",
          "exampleData": "[\n  {\n    previousUsernames: [\"parrrty\", \"NamelessGuy2005\"],\n    hasVerifiedBadge: false,\n    id: 45348281,\n    name: \"MightyPart\",\n    displayName: \"MightyPart\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 2655994471,\n    name: \"MightyPartJr\",\n    displayName: \"MightyPartJr\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 109174199,\n    name: \"MightyPartyAnimal\",\n    displayName: \"jonny\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 151051171,\n    name: \"MightyPartygirl101\",\n    displayName: \"india\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 3886457808,\n    name: \"mightypartxl\",\n    displayName: \"mightypartxl\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 31488865,\n    name: \"mightypartyrocker101\",\n    displayName: \"mightypartyrocker101\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 35463215,\n    name: \"mightyparty3\",\n    displayName: \"mightyparty3\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 152196440,\n    name: \"MightyPartygirl234\",\n    displayName: \"MightyPartygirl234\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 141415414,\n    name: \"MightyPartygod49\",\n    displayName: \"MightyPartygod49\",\n  },\n  {\n    previousUsernames: [],\n    hasVerifiedBadge: false,\n    id: 153951993,\n    name: \"Mightypartylove\",\n    displayName: \"Mightypartylove\",\n  },\n]\n",
          "exampleRawBody": "{\n  previousPageCursor: null,\n  nextPageCursor: \"eyJzdGFydEluZGV4IjoxMCwiZGlzY3JpbWluYXRvciI6ImtleXdvcmQ6TWlnaHR5UGFydCIsImNvdW50IjoxMH0KNzU4ZDExMWU1NjYwZGI1YWQ3ZDk4ZTJhMzI3ZTQzNjA0ZjdkYzI0NGRjODlkMWY1YjczMDBjY2E3NDI4YmMxOQ==\",\n  data: [\n    {\n      previousUsernames: [\"parrrty\", \"NamelessGuy2005\"],\n      hasVerifiedBadge: false,\n      id: 45348281,\n      name: \"MightyPart\",\n      displayName: \"MightyPart\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 2655994471,\n      name: \"MightyPartJr\",\n      displayName: \"MightyPartJr\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 109174199,\n      name: \"MightyPartyAnimal\",\n      displayName: \"jonny\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 151051171,\n      name: \"MightyPartygirl101\",\n      displayName: \"india\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 3886457808,\n      name: \"mightypartxl\",\n      displayName: \"mightypartxl\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 31488865,\n      name: \"mightypartyrocker101\",\n      displayName: \"mightypartyrocker101\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 35463215,\n      name: \"mightyparty3\",\n      displayName: \"mightyparty3\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 152196440,\n      name: \"MightyPartygirl234\",\n      displayName: \"MightyPartygirl234\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 141415414,\n      name: \"MightyPartygod49\",\n      displayName: \"MightyPartygod49\",\n    },\n    {\n      previousUsernames: [],\n      hasVerifiedBadge: false,\n      id: 153951993,\n      name: \"Mightypartylove\",\n      displayName: \"Mightypartylove\",\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "keyword",
            "type": "string",
            "description": "The keyword to search users by."
          },
          {
            "name": "limit?",
            "type": "10|25|50|100",
            "description": "The number of results to be returned"
          },
          {
            "name": "cursor?",
            "type": "string",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      }
    },
    "virtualEvents": {
      "eventInfo": {
        "description": "Gets information about an event.",
        "tags": {
          "endpoint": "GET /v1/virtual-events/{eventId}",
          "example": "const { data: eventInfo } = await ClassicVirtualEventsApi.eventInfo({ eventId: \"5904751593700196492\" });",
          "exampleData": "{\n  id: \"5904751593700196492\",\n  title: \"My Cool Event Of Epic Awesomeness\",\n  displayTitle: \"My Cool Event Of Epic Awesomeness\",\n  description: \"hello\",\n  displayDescription: \"hello\",\n  eventTime: {\n    startUtc: \"2024-07-12T19:18:00.000Z\",\n    endUtc: \"2024-07-13T20:30:00.000Z\",\n  },\n  host: {\n    hostName: \"Bloxfolio\",\n    hasVerifiedBadge: false,\n    hostType: \"group\",\n    hostId: 15842838,\n  },\n  universeId: 6255645791,\n  eventStatus: \"active\",\n  createdUtc: \"2024-07-12T19:01:41.661Z\",\n  updatedUtc: \"2024-07-13T20:29:50.734Z\",\n  eventCategories: [\n    { category: \"activity\", rank: 0 },\n    { category: \"systemUpdate\", rank: 1 },\n  ],\n  thumbnails: [{ mediaId: 18459197740, rank: 0 }],\n  allThumbnailsCreated: false,\n  userRsvpStatus: \"going\",\n}\n",
          "exampleRawBody": "{\n  id: \"5904751593700196492\",\n  title: \"My Cool Event Of Epic Awesomeness\",\n  displayTitle: \"My Cool Event Of Epic Awesomeness\",\n  description: \"hello\",\n  displayDescription: \"hello\",\n  eventTime: {\n    startUtc: \"2024-07-12T19:18:00.000Z\",\n    endUtc: \"2024-07-13T20:30:00.000Z\",\n  },\n  host: {\n    hostName: \"Bloxfolio\",\n    hasVerifiedBadge: false,\n    hostType: \"group\",\n    hostId: 15842838,\n  },\n  universeId: 6255645791,\n  eventStatus: \"active\",\n  createdUtc: \"2024-07-12T19:01:41.661Z\",\n  updatedUtc: \"2024-07-13T20:29:50.734Z\",\n  eventCategories: [\n    { category: \"activity\", rank: 0 },\n    { category: \"systemUpdate\", rank: 1 },\n  ],\n  thumbnails: [{ mediaId: 18459197740, rank: 0 }],\n  allThumbnailsCreated: false,\n  userRsvpStatus: \"going\",\n}\n"
        },
        "params": [
          {
            "name": "eventId",
            "type": "Identifier",
            "description": "The ID of the event to get information for."
          }
        ]
      },
      "createEvent": {
        "description": "Creates a virtual event.",
        "tags": {
          "endpoint": "POST /v1/virtual-events/create",
          "example": "const { data: createdEvent } = await ClassicVirtualEventsApi.createEvent({\n  title: \"Event Name\",\n  description: \"Description\",\n  startTime: \"2024-08-14T00:46:54.000Z\",\n  endTime: \"2024-08-14T01:46:54.000Z\",\n  universeId: 6255645791,\n  groupId: 15842838,\n  primaryCategory: \"contentUpdate\",\n  secondaryCategory: \"activity\",\n});",
          "exampleData": "{\n  id: \"6533473338141704368\",\n  title: \"Event Name\",\n  displayTitle: null,\n  description: \"Description\",\n  displayDescription: null,\n  eventTime: {\n    startUtc: \"2024-08-14T00:46:54.000Z\",\n    endUtc: \"2024-08-14T01:46:54.000Z\",\n  },\n  host: {\n    hostName: \"Bloxfolio\",\n    hasVerifiedBadge: false,\n    hostType: \"group\",\n    hostId: 15842838,\n  },\n  universeId: 6255645791,\n  eventStatus: \"unpublished\",\n  createdUtc: \"2024-07-14T00:35:35.487Z\",\n  updatedUtc: \"2024-07-14T00:35:35.487Z\",\n  eventCategories: [\n    { category: \"contentUpdate\", rank: 0 },\n    { category: \"activity\", rank: 1 },\n  ],\n  thumbnails: null,\n  allThumbnailsCreated: false,\n}\n",
          "exampleRawBody": "{\n  id: \"6533473338141704368\",\n  title: \"Event Name\",\n  displayTitle: null,\n  description: \"Description\",\n  displayDescription: null,\n  eventTime: {\n    startUtc: \"2024-08-14T00:46:54+00:00\",\n    endUtc: \"2024-08-14T01:46:54+00:00\",\n  },\n  host: {\n    hostName: \"Bloxfolio\",\n    hasVerifiedBadge: false,\n    hostType: \"group\",\n    hostId: 15842838,\n  },\n  universeId: 6255645791,\n  eventStatus: \"unpublished\",\n  createdUtc: \"2024-07-14T00:35:35.487+00:00\",\n  updatedUtc: \"2024-07-14T00:35:35.487+00:00\",\n  eventCategories: [\n    { category: \"contentUpdate\", rank: 0 },\n    { category: \"activity\", rank: 1 },\n  ],\n  thumbnails: null,\n  allThumbnailsCreated: false,\n}\n"
        },
        "params": [
          {
            "name": "title",
            "type": "Title",
            "description": "The title of the event."
          },
          {
            "name": "description",
            "type": "Description",
            "description": "The description of the event."
          },
          {
            "name": "startTime",
            "type": "StartTime",
            "description": "The start time of the event."
          },
          {
            "name": "endTime",
            "type": "EndTime",
            "description": "The end time of the event."
          },
          {
            "name": "universeId",
            "type": "UniverseId",
            "description": "The ID of the universe to create the event in."
          },
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to create the event in. The universe must be owned by this group."
          },
          {
            "name": "primaryCategory?",
            "type": "PrimaryCategory",
            "description": "The primary purpose/category of this event."
          },
          {
            "name": "secondaryCategory?",
            "type": "SecondaryCategory",
            "description": "The secondary purpose/category of this event."
          },
          {
            "name": "thumbnailIds?",
            "type": "ThumbnailIds",
            "description": "An array of thumbnailIds to be used for this event."
          }
        ]
      },
      "updateEvent": {
        "description": "DESCRIPTION",
        "tags": {
          "endpoint": "REST /...",
          "example": "const { data: updatedEvent } = await ClassicVirtualEventsApi.updateEvent({\n  eventId: \"7512531542949494927\",\n  title: \"Event Name\",\n  description: \"Description\",\n  startTime: \"2024-08-14T00:46:54.000Z\",\n  endTime: \"2024-08-14T01:46:54.000Z\",\n  primaryCategory: \"contentUpdate\",\n  secondaryCategory: \"locationUpdate\",\n});",
          "exampleData": "{ isUpdated: true, thumbnailsUpdated: false, categoriesUpdated: true }\n",
          "exampleRawBody": "{ isUpdated: true, thumbnailsUpdated: false, categoriesUpdated: true }\n"
        },
        "params": []
      },
      "publishEvent": {
        "description": "Publishes an event.",
        "tags": {
          "endpoint": "POST /v1/virtual-events/{eventId}/status",
          "example": "const { data: success } = await ClassicVirtualEventsApi.publishEvent({ eventId: \"6533473338141704368\" });",
          "exampleData": "{ isUpdated: true }\n",
          "exampleRawBody": ""
        },
        "params": [
          {
            "name": "eventId",
            "type": "Identifier",
            "description": "The ID of the event to update status for."
          }
        ]
      },
      "eventRsvps": {
        "description": "Gets rsvps for an event.",
        "tags": {
          "endpoint": "GET /v1/virtual-events/{eventId}/rsvps",
          "example": "const { data: rsvps } = await ClassicVirtualEventsApi.eventRsvps({ eventId: \"5904751593700196492\" });",
          "exampleData": "[\n  {\n    userId: 45348281,\n    rsvpStatus: \"going\",\n    shouldSeeNotificationsUpsellModal: false,\n  },\n]\n",
          "exampleRawBody": "{\n  nextPageCursor: \"\",\n  previousPageCursor: \"\",\n  data: [\n    {\n      userId: 45348281,\n      rsvpStatus: \"going\",\n      shouldSeeNotificationsUpsellModal: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "eventId",
            "type": "Identifier",
            "description": "The ID of the event to get rsvps for."
          }
        ]
      },
      "eventRsvpCounters": {
        "description": "Gets rsvp counters for an event.",
        "tags": {
          "endpoint": "GET /v1/virtual-events/{eventId}/rsvps/counters",
          "example": "const { data: counters } = await ClassicVirtualEventsApi.eventRsvpCounters({ eventId: \"5904751593700196492\" });",
          "exampleData": "{ none: 0, going: 1, maybeGoing: 0, notGoing: 0 }\n",
          "exampleRawBody": "{ counters: { none: 0, going: 1, maybeGoing: 0, notGoing: 0 } }\n"
        },
        "params": [
          {
            "name": "eventId",
            "type": "Identifier",
            "description": "The ID of the event to get rsvp counters for."
          }
        ]
      },
      "authenticatedUserEventPermissionsForHost": {
        "description": "Gets permissions for all events created by either a user or a group.",
        "tags": {
          "endpoint": "GET /v1/virtual-events/permissions",
          "example": "const { data: permissions } = await ClassicVirtualEventsApi.authenticatedUserEventPermissionsForHost({\n  groupId: 15842838,\n});",
          "exampleData": "{ maxPermissionLevel: \"edit\" }\n",
          "exampleRawBody": "{ maxPermissionLevel: \"edit\" }\n"
        },
        "params": [
          {
            "name": "userId",
            "type": "🤷",
            "description": "Define a userId to get permissions for all events created by the user."
          },
          {
            "name": "groupId",
            "type": "🤷",
            "description": "Define a groupId to get permissions for all events created by the group."
          }
        ]
      },
      "authenticatedUserEvents": {
        "description": "Gets events that the authenticated user has edit access to from a group.",
        "tags": {
          "endpoint": "GET /v1/virtual-events/my-events",
          "example": "const { data: myEvents } = await ClassicVirtualEventsApi.authenticatedUserEvents({ groupId: 15842838 });",
          "exampleData": "[\n  {\n    id: \"5904751593700196492\",\n    title: \"My Cool Event Of Epic Awesomeness\",\n    displayTitle: null,\n    description: \"hello\",\n    displayDescription: null,\n    eventTime: {\n      startUtc: \"2024-07-12T19:18:00.000Z\",\n      endUtc: \"2024-07-13T20:30:00.000Z\",\n    },\n    host: {\n      hostName: \"Bloxfolio\",\n      hasVerifiedBadge: false,\n      hostType: \"group\",\n      hostId: 15842838,\n    },\n    universeId: 6255645791,\n    eventStatus: \"active\",\n    createdUtc: \"2024-07-12T19:01:41.661Z\",\n    updatedUtc: \"2024-07-13T20:29:50.734Z\",\n    eventCategories: null,\n    thumbnails: [{ mediaId: 18459197740, rank: 0 }],\n    allThumbnailsCreated: false,\n  },\n  {\n    id: \"3425484122702479513\",\n    title: \"Test\",\n    displayTitle: null,\n    description: \"lol\",\n    displayDescription: null,\n    eventTime: {\n      startUtc: \"2024-07-13T21:27:32.656Z\",\n      endUtc: \"2024-07-13T22:27:32.656Z\",\n    },\n    host: {\n      hostName: \"Bloxfolio\",\n      hasVerifiedBadge: false,\n      hostType: \"group\",\n      hostId: 15842838,\n    },\n    universeId: 6255645791,\n    eventStatus: \"active\",\n    createdUtc: \"2024-07-13T20:27:52.493Z\",\n    updatedUtc: \"2024-07-13T20:27:52.967Z\",\n    eventCategories: null,\n    thumbnails: null,\n    allThumbnailsCreated: false,\n  },\n]\n",
          "exampleRawBody": "{\n  nextPageCursor: \"\",\n  previousPageCursor: \"\",\n  data: [\n    {\n      id: \"5904751593700196492\",\n      title: \"My Cool Event Of Epic Awesomeness\",\n      displayTitle: null,\n      description: \"hello\",\n      displayDescription: null,\n      eventTime: {\n        startUtc: \"2024-07-12T19:18:00+00:00\",\n        endUtc: \"2024-07-13T20:30:00+00:00\",\n      },\n      host: {\n        hostName: \"Bloxfolio\",\n        hasVerifiedBadge: false,\n        hostType: \"group\",\n        hostId: 15842838,\n      },\n      universeId: 6255645791,\n      eventStatus: \"active\",\n      createdUtc: \"2024-07-12T19:01:41.661+00:00\",\n      updatedUtc: \"2024-07-13T20:29:50.734+00:00\",\n      eventCategories: null,\n      thumbnails: [{ mediaId: 18459197740, rank: 0 }],\n      allThumbnailsCreated: false,\n    },\n    {\n      id: \"3425484122702479513\",\n      title: \"Test\",\n      displayTitle: null,\n      description: \"lol\",\n      displayDescription: null,\n      eventTime: {\n        startUtc: \"2024-07-13T21:27:32.656+00:00\",\n        endUtc: \"2024-07-13T22:27:32.656+00:00\",\n      },\n      host: {\n        hostName: \"Bloxfolio\",\n        hasVerifiedBadge: false,\n        hostType: \"group\",\n        hostId: 15842838,\n      },\n      universeId: 6255645791,\n      eventStatus: \"active\",\n      createdUtc: \"2024-07-13T20:27:52.493+00:00\",\n      updatedUtc: \"2024-07-13T20:27:52.967+00:00\",\n      eventCategories: null,\n      thumbnails: null,\n      allThumbnailsCreated: false,\n    },\n  ],\n}\n"
        },
        "params": [
          {
            "name": "groupId",
            "type": "GroupId",
            "description": "The ID of the group to get events from."
          },
          {
            "name": "filterBy?",
            "type": "\"upcoming\" | \"past\" | \"drafts\"",
            "description": "Filter the events by different criterias."
          },
          {
            "name": "sortOrder?",
            "type": "\"desc\" | \"asc\"",
            "description": "The order that the results are sorted in."
          },
          {
            "name": "sortBy?",
            "type": "\"startUtc\" | \"createdUtc\"",
            "description": "The criteria used to sort the results."
          },
          {
            "name": "fromUtc?",
            "type": "Date | ISODateTime",
            "description": "Only include events during or after a specific time."
          },
          {
            "name": "limit?",
            "type": "number",
            "description": "The number of results to be returned."
          },
          {
            "name": "cursor?",
            "type": "number",
            "description": "The paging cursor for the previous or next page."
          }
        ]
      }
    }
  }
}